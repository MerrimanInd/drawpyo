{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to drawpyo Drawpyo is a Python library for programmatically generating Draw.io charts. It enables creating a diagram object, placing and styling objects, then writing the object to a file. History/Justification I love Draw.io! Compared to expensive and heavy commercial options like Visio and Miro, Draw.io's free and lightweight app allows wider and more universal distribution of diagrams. Because the files are stored in plaintext they can be versioned alongside code in a repository as documentation. Draw.io also maintains back compatibility and any diagram created in the app since it was launched can still be opened. The XML-based file format makes these diagrams semi-portable, and could easily be ported to other applications if Draw.io ever disappeared. For these reason, I think it's one of the best options for documentation diagrams. So wen I had a need to generate heirarchical tree diagrams of requirement structures I looked to Draw.io but I was surprised to find there wasn't even a single existing Python library for working with these files. I took the project home and spent a weekend building the initial functionality. I've been adding functionality, robustness, and documentation intermittently since. The Future of Drawpyo I will continue to tinker away with this tool, creating new functionality as I need it or find it interesting. But it's unfortunately a rather low priority so if anyone wants to contribute I would be grateful for the help! Reach out to me at xander@merriman.industries if you want to contribute.","title":"Home"},{"location":"#welcome-to-drawpyo","text":"Drawpyo is a Python library for programmatically generating Draw.io charts. It enables creating a diagram object, placing and styling objects, then writing the object to a file.","title":"Welcome to drawpyo"},{"location":"#historyjustification","text":"I love Draw.io! Compared to expensive and heavy commercial options like Visio and Miro, Draw.io's free and lightweight app allows wider and more universal distribution of diagrams. Because the files are stored in plaintext they can be versioned alongside code in a repository as documentation. Draw.io also maintains back compatibility and any diagram created in the app since it was launched can still be opened. The XML-based file format makes these diagrams semi-portable, and could easily be ported to other applications if Draw.io ever disappeared. For these reason, I think it's one of the best options for documentation diagrams. So wen I had a need to generate heirarchical tree diagrams of requirement structures I looked to Draw.io but I was surprised to find there wasn't even a single existing Python library for working with these files. I took the project home and spent a weekend building the initial functionality. I've been adding functionality, robustness, and documentation intermittently since.","title":"History/Justification"},{"location":"#the-future-of-drawpyo","text":"I will continue to tinker away with this tool, creating new functionality as I need it or find it interesting. But it's unfortunately a rather low priority so if anyone wants to contribute I would be grateful for the help! Reach out to me at xander@merriman.industries if you want to contribute.","title":"The Future of Drawpyo"},{"location":"about/","text":"Conventions and Naming This library contains quite a lot of camel case (capitalizeEachWord) attributes. While the Python convention is snake case (underscores_between_lowercase) the Draw.io style strings and attributes are camel case. Wherever possible, drawpyo uses the terminology and variable names from Draw.io to make it more intuitive to work between the two apps. However, any attribute that does not have an analogy in the Draw.io app is snake case. While this is a bit confusing I hope it helps to clarify when there's a direct analog between drawpyo and Draw.io and when the variable is a drawpyo abstraction. If this is confusing please share that feedback on the GitHub page or email and it may be changed in future versions! Basic Diagrams Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. See the full documentation for these functions in Basic Diagrams - Usage . Extended Functionality Drawpyo extends the basic functionality of the Draw.io app with custom diagram types. These custom diagrams have automated styling and layouting to make common or complex diagrams easier to generate. TreeDiagram This diagram makes creating directed tree graphs easy. Define trees, nodes, and the apply an auto layout. Documentation","title":"About"},{"location":"about/#conventions-and-naming","text":"This library contains quite a lot of camel case (capitalizeEachWord) attributes. While the Python convention is snake case (underscores_between_lowercase) the Draw.io style strings and attributes are camel case. Wherever possible, drawpyo uses the terminology and variable names from Draw.io to make it more intuitive to work between the two apps. However, any attribute that does not have an analogy in the Draw.io app is snake case. While this is a bit confusing I hope it helps to clarify when there's a direct analog between drawpyo and Draw.io and when the variable is a drawpyo abstraction. If this is confusing please share that feedback on the GitHub page or email and it may be changed in future versions!","title":"Conventions and Naming"},{"location":"about/#basic-diagrams","text":"Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. See the full documentation for these functions in Basic Diagrams - Usage .","title":"Basic Diagrams"},{"location":"about/#extended-functionality","text":"Drawpyo extends the basic functionality of the Draw.io app with custom diagram types. These custom diagrams have automated styling and layouting to make common or complex diagrams easier to generate.","title":"Extended Functionality"},{"location":"about/#treediagram","text":"This diagram makes creating directed tree graphs easy. Define trees, nodes, and the apply an auto layout. Documentation","title":"TreeDiagram"},{"location":"api/architecture/","text":"Architecture Drawpyo provides two high level classes to define critical methods and attributes for all exportable Draw.io objects. Primarily they define the parent and id attributes as well as a series of methods and properties for generating XML and style strings. XMLBase XMLBase is the base class for all exportable objects in drawpyo. This class defines a few useful properties that drawpyo needs to use to generate a Draw.io file. Source code in drawpyo/xml_base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class XMLBase : \"\"\" XMLBase is the base class for all exportable objects in drawpyo. This class defines a few useful properties that drawpyo needs to use to generate a Draw.io file. \"\"\" def __init__ ( self , ** kwargs ): self . _id = kwargs . get ( \"id\" , id ( self )) self . xml_class = kwargs . get ( \"xml_class\" , \"xml_tag\" ) # There's only one situation where XMLBase is called directly: to # create the two empty mxCell objects at the beginning of every # Draw.io diagram. The following declarations should be overwritten # in every other use case. self . xml_parent = kwargs . get ( \"xml_parent\" , None ) @property def id ( self ): \"\"\" id is a unique identifier. Draw.io generated diagrams use an ID many more characters but the app isn't picky when parsing so drawpyo just uses Python's built-in id() function as it guarantees unique identifiers. Returns: int: A unique identifier for the Draw.io object \"\"\" return self . _id @property def attributes ( self ): \"\"\" The most basic attributes of a Draw.io object. Extended by subclasses. Returns: dict: A dict containing an 'id' and 'xml_parent' object. \"\"\" return { 'id' : self . id , 'parent' : self . xml_parent } ########################################################### # XML Tags ########################################################### @property def xml_open_tag ( self ): \"\"\" The open tag contains the name of the object but also the attribute tags. This property function concatenates all the attributes in the class along with the opening and closing angle brackets and returns them as a string. Example: <class_name attribute_name=attribute_value> Returns: str: The opening tag of the object with all the attributes. \"\"\" open_tag = \"<\" + self . xml_class for ( att , value ) in self . attributes . items (): if value is not None : xml_parameter = self . xml_ify ( str ( value )) open_tag = open_tag + \" \" + att + '=\"' + xml_parameter + '\"' return open_tag + \">\" @property def xml_close_tag ( self ): \"\"\" The closing tag contains the name of the object wrapped in angle brackets. Example: </class_name> Returns: str: The closing tag of the object with all the attributes. \"\"\" return \"</ {0} >\" . format ( self . xml_class ) @property def xml ( self ): \"\"\" All drawpyo exportable classes contain an xml property that returns the formatted string of their XML output. This default version of the function assumes no inner value so it just returns the opening tag closed with a '/>'. Subclasses that require more printing overload this function with their own implementation. Example: <class_name attribute_name=attribute_value/> Returns: str: A single XML tag containing the object name, style attributes, and a closer. \"\"\" open_tag = self . xml_open_tag return open_tag [: - 1 ] + \" />\" def xml_ify ( self , parameter_string ): return parameter_string . translate ( xmlize ) attributes property The most basic attributes of a Draw.io object. Extended by subclasses. Returns: dict \u2013 A dict containing an 'id' and 'xml_parent' object. id property id is a unique identifier. Draw.io generated diagrams use an ID many more characters but the app isn't picky when parsing so drawpyo just uses Python's built-in id() function as it guarantees unique identifiers. Returns: int \u2013 A unique identifier for the Draw.io object xml property All drawpyo exportable classes contain an xml property that returns the formatted string of their XML output. This default version of the function assumes no inner value so it just returns the opening tag closed with a '/>'. Subclasses that require more printing overload this function with their own implementation. Example: Returns: str \u2013 A single XML tag containing the object name, style attributes, and a closer. xml_close_tag property The closing tag contains the name of the object wrapped in angle brackets. Example: Returns: str \u2013 The closing tag of the object with all the attributes. xml_open_tag property The open tag contains the name of the object but also the attribute tags. This property function concatenates all the attributes in the class along with the opening and closing angle brackets and returns them as a string. Example: Returns: str \u2013 The opening tag of the object with all the attributes. DiagramBase Bases: XMLBase This class is the base for all diagram objects to inherit from. It defines some general creation methods and properties to make diagram objects printable and useful. Source code in drawpyo/diagram/base_diagram.pyclass DiagramBase ( XMLBase ): \"\"\" This class is the base for all diagram objects to inherit from. It defines some general creation methods and properties to make diagram objects printable and useful. \"\"\" def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" ] self . page = kwargs . get ( \"page\" , None ) self . xml_parent = kwargs . get ( \"xml_parent\" , None ) @classmethod def create_from_library ( cls , library , obj ): return cls # XML_parent property @property def xml_parent_id ( self ): if self . xml_parent is not None : return self . xml_parent . id else : return 1 # Parent object linking @property def xml_parent ( self ): return self . _xml_parent @xml_parent . setter def xml_parent ( self , p ): if p is not None : p . add_object ( self ) self . _xml_parent = p else : self . _xml_parent = None @xml_parent . deleter def xml_parent ( self ): self . _xml_parent . remove_object ( self ) self . _xml_parent = None # Page property @property def page_id ( self ): if self . page is not None : return self . page . id else : return 1 # page object linking @property def page ( self ): return self . _page @page . setter def page ( self , p ): if p is not None : p . add_object ( self ) self . _page = p else : self . _page = None @page . deleter def page ( self ): self . _page . remove_object ( self ) self . _page = None ########################################################### # Style properties ########################################################### def add_style_attribute ( self , style_attr ): if style_attr not in self . _style_attributes : self . _style_attributes . append ( style_attr ) @property def style_attributes ( self ): \"\"\" The style attributes are the list of style tags that should be printed into the style XML attribute. This is a subset of the attributes defined on the object method. Returns: list: A list of the names of the style_attributes. \"\"\" return self . _style_attributes @style_attributes . setter def style_attributes ( self , value ): self . _style_attributes = value @property def style ( self ): \"\"\" This function returns the style string of the object to be appended into the style XML attribute. First it searches the object properties called out in self.style_attributes. If the property is initialized to something that isn't None or an empty string, it will add it. Otherwise it searches the base_style defined by the object template. Returns: str: The style string of the object. \"\"\" style_str = \"\" if ( hasattr ( self , \"baseStyle\" ) and getattr ( self , \"baseStyle\" ) is not None ): style_str = getattr ( self , \"baseStyle\" ) + \";\" for attribute in self . style_attributes : if ( hasattr ( self , attribute ) and getattr ( self , attribute ) is not None ): attr_val = getattr ( self , attribute ) # reformat different datatypes to strings if isinstance ( attr_val , bool ): attr_val = format ( attr_val * 1 ) style_str = style_str + \" {0} = {1} ;\" . format ( attribute , attr_val ) return style_str def _add_and_set_style_attrib ( self , attrib , value ): if hasattr ( self , attrib ): setattr ( self , attrib , value ) else : setattr ( self , attrib , value ) self . add_style_attribute ( attrib ) def apply_style_string ( self , style_str ): \"\"\" This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Args: style_str (str): A Draw.io style string \"\"\" for attrib in style_str . split ( \";\" ): if attrib == '' : pass elif \"=\" in attrib : a_name = attrib . split ( \"=\" )[ 0 ] a_value = attrib . split ( \"=\" )[ 1 ] if a_value . isdigit (): if \".\" in a_value : a_value = float ( a_value ) else : a_value = int ( a_value ) elif a_value == \"True\" or a_value == \"False\" : a_value = bool ( a_value ) self . _add_and_set_style_attrib ( a_name , a_value ) else : self . baseStyle = attrib def _apply_style_from_template ( self , template ): for attrib in template . style_attributes : value = getattr ( template , attrib ) self . _add_and_set_style_attrib ( attrib , value ) def apply_attribute_dict ( self , attr_dict ): \"\"\" This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list. Parameters ---------- attr_dict : dict A dictionary of attributes to set or add to the object. Returns ------- None. \"\"\" for attr , val in attr_dict . items (): self . _add_and_set_style_attrib ( attr , val ) @classmethod def from_style_string ( cls , style_string ): \"\"\" This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Args: style_string (str): A Draw.io style string Returns: BaseDiagram: A BaseDiagram or subclass instantiated with the style from the Draw.io string \"\"\" new_obj = cls () new_obj . apply_style_string ( style_string ) return new_obj style property This function returns the style string of the object to be appended into the style XML attribute. First it searches the object properties called out in self.style_attributes. If the property is initialized to something that isn't None or an empty string, it will add it. Otherwise it searches the base_style defined by the object template. Returns: str \u2013 The style string of the object. style_attributes property writable The style attributes are the list of style tags that should be printed into the style XML attribute. This is a subset of the attributes defined on the object method. Returns: list \u2013 A list of the names of the style_attributes. apply_attribute_dict ( attr_dict ) This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list. Parameters attr_dict : dict A dictionary of attributes to set or add to the object. Returns None. Source code in drawpyo/diagram/base_diagram.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def apply_attribute_dict ( self , attr_dict ): \"\"\" This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list. Parameters ---------- attr_dict : dict A dictionary of attributes to set or add to the object. Returns ------- None. \"\"\" for attr , val in attr_dict . items (): self . _add_and_set_style_attrib ( attr , val ) apply_style_string ( style_str ) This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Parameters: style_str ( str ) \u2013 A Draw.io style string Source code in drawpyo/diagram/base_diagram.py 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 def apply_style_string ( self , style_str ): \"\"\" This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Args: style_str (str): A Draw.io style string \"\"\" for attrib in style_str . split ( \";\" ): if attrib == '' : pass elif \"=\" in attrib : a_name = attrib . split ( \"=\" )[ 0 ] a_value = attrib . split ( \"=\" )[ 1 ] if a_value . isdigit (): if \".\" in a_value : a_value = float ( a_value ) else : a_value = int ( a_value ) elif a_value == \"True\" or a_value == \"False\" : a_value = bool ( a_value ) self . _add_and_set_style_attrib ( a_name , a_value ) else : self . baseStyle = attrib from_style_string ( style_string ) classmethod This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Parameters: style_string ( str ) \u2013 A Draw.io style string Returns: BaseDiagram \u2013 A BaseDiagram or subclass instantiated with the style from the Draw.io string Source code in drawpyo/diagram/base_diagram.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 @classmethod def from_style_string ( cls , style_string ): \"\"\" This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Args: style_string (str): A Draw.io style string Returns: BaseDiagram: A BaseDiagram or subclass instantiated with the style from the Draw.io string \"\"\" new_obj = cls () new_obj . apply_style_string ( style_string ) return new_obj","title":"Architecture"},{"location":"api/architecture/#architecture","text":"Drawpyo provides two high level classes to define critical methods and attributes for all exportable Draw.io objects. Primarily they define the parent and id attributes as well as a series of methods and properties for generating XML and style strings.","title":"Architecture"},{"location":"api/architecture/#xmlbase","text":"XMLBase is the base class for all exportable objects in drawpyo. This class defines a few useful properties that drawpyo needs to use to generate a Draw.io file. Source code in drawpyo/xml_base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class XMLBase : \"\"\" XMLBase is the base class for all exportable objects in drawpyo. This class defines a few useful properties that drawpyo needs to use to generate a Draw.io file. \"\"\" def __init__ ( self , ** kwargs ): self . _id = kwargs . get ( \"id\" , id ( self )) self . xml_class = kwargs . get ( \"xml_class\" , \"xml_tag\" ) # There's only one situation where XMLBase is called directly: to # create the two empty mxCell objects at the beginning of every # Draw.io diagram. The following declarations should be overwritten # in every other use case. self . xml_parent = kwargs . get ( \"xml_parent\" , None ) @property def id ( self ): \"\"\" id is a unique identifier. Draw.io generated diagrams use an ID many more characters but the app isn't picky when parsing so drawpyo just uses Python's built-in id() function as it guarantees unique identifiers. Returns: int: A unique identifier for the Draw.io object \"\"\" return self . _id @property def attributes ( self ): \"\"\" The most basic attributes of a Draw.io object. Extended by subclasses. Returns: dict: A dict containing an 'id' and 'xml_parent' object. \"\"\" return { 'id' : self . id , 'parent' : self . xml_parent } ########################################################### # XML Tags ########################################################### @property def xml_open_tag ( self ): \"\"\" The open tag contains the name of the object but also the attribute tags. This property function concatenates all the attributes in the class along with the opening and closing angle brackets and returns them as a string. Example: <class_name attribute_name=attribute_value> Returns: str: The opening tag of the object with all the attributes. \"\"\" open_tag = \"<\" + self . xml_class for ( att , value ) in self . attributes . items (): if value is not None : xml_parameter = self . xml_ify ( str ( value )) open_tag = open_tag + \" \" + att + '=\"' + xml_parameter + '\"' return open_tag + \">\" @property def xml_close_tag ( self ): \"\"\" The closing tag contains the name of the object wrapped in angle brackets. Example: </class_name> Returns: str: The closing tag of the object with all the attributes. \"\"\" return \"</ {0} >\" . format ( self . xml_class ) @property def xml ( self ): \"\"\" All drawpyo exportable classes contain an xml property that returns the formatted string of their XML output. This default version of the function assumes no inner value so it just returns the opening tag closed with a '/>'. Subclasses that require more printing overload this function with their own implementation. Example: <class_name attribute_name=attribute_value/> Returns: str: A single XML tag containing the object name, style attributes, and a closer. \"\"\" open_tag = self . xml_open_tag return open_tag [: - 1 ] + \" />\" def xml_ify ( self , parameter_string ): return parameter_string . translate ( xmlize )","title":"XMLBase"},{"location":"api/architecture/#drawpyo.xml_base.XMLBase.attributes","text":"The most basic attributes of a Draw.io object. Extended by subclasses. Returns: dict \u2013 A dict containing an 'id' and 'xml_parent' object.","title":"attributes"},{"location":"api/architecture/#drawpyo.xml_base.XMLBase.id","text":"id is a unique identifier. Draw.io generated diagrams use an ID many more characters but the app isn't picky when parsing so drawpyo just uses Python's built-in id() function as it guarantees unique identifiers. Returns: int \u2013 A unique identifier for the Draw.io object","title":"id"},{"location":"api/architecture/#drawpyo.xml_base.XMLBase.xml","text":"All drawpyo exportable classes contain an xml property that returns the formatted string of their XML output. This default version of the function assumes no inner value so it just returns the opening tag closed with a '/>'. Subclasses that require more printing overload this function with their own implementation. Example: Returns: str \u2013 A single XML tag containing the object name, style attributes, and a closer.","title":"xml"},{"location":"api/architecture/#drawpyo.xml_base.XMLBase.xml_close_tag","text":"The closing tag contains the name of the object wrapped in angle brackets. Example: Returns: str \u2013 The closing tag of the object with all the attributes.","title":"xml_close_tag"},{"location":"api/architecture/#drawpyo.xml_base.XMLBase.xml_open_tag","text":"The open tag contains the name of the object but also the attribute tags. This property function concatenates all the attributes in the class along with the opening and closing angle brackets and returns them as a string. Example: Returns: str \u2013 The opening tag of the object with all the attributes.","title":"xml_open_tag"},{"location":"api/architecture/#diagrambase","text":"Bases: XMLBase This class is the base for all diagram objects to inherit from. It defines some general creation methods and properties to make diagram objects printable and useful. Source code in drawpyo/diagram/base_diagram.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 class DiagramBase ( XMLBase ): \"\"\" This class is the base for all diagram objects to inherit from. It defines some general creation methods and properties to make diagram objects printable and useful. \"\"\" def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" ] self . page = kwargs . get ( \"page\" , None ) self . xml_parent = kwargs . get ( \"xml_parent\" , None ) @classmethod def create_from_library ( cls , library , obj ): return cls # XML_parent property @property def xml_parent_id ( self ): if self . xml_parent is not None : return self . xml_parent . id else : return 1 # Parent object linking @property def xml_parent ( self ): return self . _xml_parent @xml_parent . setter def xml_parent ( self , p ): if p is not None : p . add_object ( self ) self . _xml_parent = p else : self . _xml_parent = None @xml_parent . deleter def xml_parent ( self ): self . _xml_parent . remove_object ( self ) self . _xml_parent = None # Page property @property def page_id ( self ): if self . page is not None : return self . page . id else : return 1 # page object linking @property def page ( self ): return self . _page @page . setter def page ( self , p ): if p is not None : p . add_object ( self ) self . _page = p else : self . _page = None @page . deleter def page ( self ): self . _page . remove_object ( self ) self . _page = None ########################################################### # Style properties ########################################################### def add_style_attribute ( self , style_attr ): if style_attr not in self . _style_attributes : self . _style_attributes . append ( style_attr ) @property def style_attributes ( self ): \"\"\" The style attributes are the list of style tags that should be printed into the style XML attribute. This is a subset of the attributes defined on the object method. Returns: list: A list of the names of the style_attributes. \"\"\" return self . _style_attributes @style_attributes . setter def style_attributes ( self , value ): self . _style_attributes = value @property def style ( self ): \"\"\" This function returns the style string of the object to be appended into the style XML attribute. First it searches the object properties called out in self.style_attributes. If the property is initialized to something that isn't None or an empty string, it will add it. Otherwise it searches the base_style defined by the object template. Returns: str: The style string of the object. \"\"\" style_str = \"\" if ( hasattr ( self , \"baseStyle\" ) and getattr ( self , \"baseStyle\" ) is not None ): style_str = getattr ( self , \"baseStyle\" ) + \";\" for attribute in self . style_attributes : if ( hasattr ( self , attribute ) and getattr ( self , attribute ) is not None ): attr_val = getattr ( self , attribute ) # reformat different datatypes to strings if isinstance ( attr_val , bool ): attr_val = format ( attr_val * 1 ) style_str = style_str + \" {0} = {1} ;\" . format ( attribute , attr_val ) return style_str def _add_and_set_style_attrib ( self , attrib , value ): if hasattr ( self , attrib ): setattr ( self , attrib , value ) else : setattr ( self , attrib , value ) self . add_style_attribute ( attrib ) def apply_style_string ( self , style_str ): \"\"\" This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Args: style_str (str): A Draw.io style string \"\"\" for attrib in style_str . split ( \";\" ): if attrib == '' : pass elif \"=\" in attrib : a_name = attrib . split ( \"=\" )[ 0 ] a_value = attrib . split ( \"=\" )[ 1 ] if a_value . isdigit (): if \".\" in a_value : a_value = float ( a_value ) else : a_value = int ( a_value ) elif a_value == \"True\" or a_value == \"False\" : a_value = bool ( a_value ) self . _add_and_set_style_attrib ( a_name , a_value ) else : self . baseStyle = attrib def _apply_style_from_template ( self , template ): for attrib in template . style_attributes : value = getattr ( template , attrib ) self . _add_and_set_style_attrib ( attrib , value ) def apply_attribute_dict ( self , attr_dict ): \"\"\" This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list. Parameters ---------- attr_dict : dict A dictionary of attributes to set or add to the object. Returns ------- None. \"\"\" for attr , val in attr_dict . items (): self . _add_and_set_style_attrib ( attr , val ) @classmethod def from_style_string ( cls , style_string ): \"\"\" This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Args: style_string (str): A Draw.io style string Returns: BaseDiagram: A BaseDiagram or subclass instantiated with the style from the Draw.io string \"\"\" new_obj = cls () new_obj . apply_style_string ( style_string ) return new_obj","title":"DiagramBase"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.style","text":"This function returns the style string of the object to be appended into the style XML attribute. First it searches the object properties called out in self.style_attributes. If the property is initialized to something that isn't None or an empty string, it will add it. Otherwise it searches the base_style defined by the object template. Returns: str \u2013 The style string of the object.","title":"style"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.style_attributes","text":"The style attributes are the list of style tags that should be printed into the style XML attribute. This is a subset of the attributes defined on the object method. Returns: list \u2013 A list of the names of the style_attributes.","title":"style_attributes"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.apply_attribute_dict","text":"This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list.","title":"apply_attribute_dict"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.apply_attribute_dict--parameters","text":"attr_dict : dict A dictionary of attributes to set or add to the object.","title":"Parameters"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.apply_attribute_dict--returns","text":"None. Source code in drawpyo/diagram/base_diagram.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def apply_attribute_dict ( self , attr_dict ): \"\"\" This function takes in a dictionary of attributes and applies them to the object. These attributes can be style or properties. If the attribute isn't already defined as a property of the class it's assumed to be a style attribute. It will then be added as a property and also appended to the .style_attributes list. Parameters ---------- attr_dict : dict A dictionary of attributes to set or add to the object. Returns ------- None. \"\"\" for attr , val in attr_dict . items (): self . _add_and_set_style_attrib ( attr , val )","title":"Returns"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.apply_style_string","text":"This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Parameters: style_str ( str ) \u2013 A Draw.io style string Source code in drawpyo/diagram/base_diagram.py 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 def apply_style_string ( self , style_str ): \"\"\" This function will apply a passed in style string to the object. This style string can be obtained from the Draw.io app by selecting Edit Style from the context menu of any object. This function will iterate through the attributes in the style string and assign the corresponding property the value. Args: style_str (str): A Draw.io style string \"\"\" for attrib in style_str . split ( \";\" ): if attrib == '' : pass elif \"=\" in attrib : a_name = attrib . split ( \"=\" )[ 0 ] a_value = attrib . split ( \"=\" )[ 1 ] if a_value . isdigit (): if \".\" in a_value : a_value = float ( a_value ) else : a_value = int ( a_value ) elif a_value == \"True\" or a_value == \"False\" : a_value = bool ( a_value ) self . _add_and_set_style_attrib ( a_name , a_value ) else : self . baseStyle = attrib","title":"apply_style_string"},{"location":"api/architecture/#drawpyo.diagram.base_diagram.DiagramBase.from_style_string","text":"This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Parameters: style_string ( str ) \u2013 A Draw.io style string Returns: BaseDiagram \u2013 A BaseDiagram or subclass instantiated with the style from the Draw.io string Source code in drawpyo/diagram/base_diagram.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 @classmethod def from_style_string ( cls , style_string ): \"\"\" This classmethod allows the intantiation of an object from a style string. This is useful since Draw.io allows copying the style string out of an object in their UI. This string can then be copied into the Python environment and further objects created that match the style. Args: style_string (str): A Draw.io style string Returns: BaseDiagram: A BaseDiagram or subclass instantiated with the style from the Draw.io string \"\"\" new_obj = cls () new_obj . apply_style_string ( style_string ) return new_obj","title":"from_style_string"},{"location":"api/edges/","text":"Edges drawpyo.diagram.edges.Edge Bases: DiagramBase The Edge class is the simplest class for defining an edge or an arrow in a Draw.io diagram. The three primary styling inputs are the waypoints, connections, and pattern. These are how edges are styled in the Draw.io app, with dropdown menus for each one. But it's not how the style string is assembled in the XML. To abstract this, the Edge class loads a database called edge_styles.toml. The database maps the options in each dropdown to the style strings they correspond to. The Edge class then assembles the style strings on export. More information about edges are in the Usage documents at Usage - Edges . Source code in drawpyo/diagram/edges.pyclass Edge ( DiagramBase ): \"\"\"The Edge class is the simplest class for defining an edge or an arrow in a Draw.io diagram. The three primary styling inputs are the waypoints, connections, and pattern. These are how edges are styled in the Draw.io app, with dropdown menus for each one. But it's not how the style string is assembled in the XML. To abstract this, the Edge class loads a database called edge_styles.toml. The database maps the options in each dropdown to the style strings they correspond to. The Edge class then assembles the style strings on export. More information about edges are in the Usage documents at [Usage - Edges](../../usage/edges). \"\"\" def __init__ ( self , ** kwargs ): \"\"\"Edges can be initialized with almost all styling parameters as args. See [Usage - Edges](../../usage/edges) for more information and the options for each parameter. Args: source (DiagramBase): The Draw.io object that the edge originates from target (DiagramBase): The Draw.io object that the edge points to waypoints (str): How the edge should be styled in Draw.io connection (str): What type of style the edge should be rendered with pattern (str): How the line of the edge should be rendered line_end_target (str): What graphic the edge should be rendered with at the target line_end_source (str): What graphic the edge should be rendered with at the source endFill_target (boolean): Whether the target graphic should be filled endFill_source (boolean): Whether the source graphic should be filled jettySize (str or int): Length of the straight sections at the end of the edge. \"auto\" or a number rounded (bool): Whether the corner of the line should be rounded entryX (int): From where along the X axis on the source object the edge originates (0-1) entryY (int): From where along the Y axis on the source object the edge originates (0-1) entryDx (int): Applies an offset in pixels to the X axis entry point entryDy (int): Applies an offset in pixels to the Y axis entry point exitX (int): From where along the X axis on the target object the edge originates (0-1) exitY (int): From where along the Y axis on the target object the edge originates (0-1) exitDx (int): Applies an offset in pixels to the X axis exit point exitDy (int): Applies an offset in pixels to the Y axis exit point \"\"\" super () . __init__ ( ** kwargs ) self . xml_class = \"mxCell\" # Style self . waypoints = kwargs . get ( \"waypoints\" , \"orthogonal\" ) self . connection = kwargs . get ( \"connection\" , \"line\" ) self . pattern = kwargs . get ( \"pattern\" , \"solid\" ) self . line_end_target = kwargs . get ( \"line_end_target\" , None ) self . line_end_source = kwargs . get ( \"line_end_source\" , None ) self . endFill_target = kwargs . get ( \"endFill_target\" , False ) self . endFill_source = kwargs . get ( \"endFill_source\" , False ) self . jettySize = kwargs . get ( \"jettySize\" , \"auto\" ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) # Connection and geometry self . edge = kwargs . get ( \"edge\" , 1 ) self . source = kwargs . get ( \"source\" , None ) self . target = kwargs . get ( \"target\" , None ) self . geometry = EdgeGeometry () self . entryX = kwargs . get ( \"entryX\" , None ) self . entryY = kwargs . get ( \"entryY\" , None ) self . entryDx = kwargs . get ( \"entryDx\" , None ) self . entryDy = kwargs . get ( \"entryDy\" , None ) self . exitX = kwargs . get ( \"exitX\" , None ) self . exitY = kwargs . get ( \"exitY\" , None ) self . exitDx = kwargs . get ( \"exitDx\" , None ) self . exitDy = kwargs . get ( \"exitDy\" , None ) def __repr__ ( self ): name_str = \" {0} edge from {1} to {2} \" . format ( self . __class__ . __name__ , self . source , self . target ) return name_str def __str__ ( self ): return self . __repr__ () def remove ( self ): \"\"\"This function removes references to the Edge from its source and target objects then deletes the Edge. \"\"\" if self . source is not None : self . source . remove_out_edge ( self ) if self . target is not None : self . target . remove_in_edge ( self ) del self @property def attributes ( self ): \"\"\"Returns the XML attributes to be added to the tag for the object Returns: dict: Dictionary of object attributes and their values \"\"\" return { \"id\" : self . id , \"style\" : self . style , \"edge\" : self . edge , \"parent\" : self . xml_parent_id , \"source\" : self . source_id , \"target\" : self . target_id , } ########################################################### # Source and Target Linking ########################################################### # Source @property def source ( self ): \"\"\"The source object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram: source object of the edge \"\"\" return self . _source @source . setter def source ( self , f ): f . add_out_edge ( self ) self . _source = f @source . deleter def source ( self ): self . _source . remove_out_edge ( self ) self . _source = None @property def source_id ( self ): \"\"\"The ID of the source object or 1 if no source is set Returns: int: Source object ID \"\"\" if self . source is not None : return self . source . id else : return 1 # Target @property def target ( self ): \"\"\"The target object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram: target object of the edge \"\"\" return self . _target @target . setter def target ( self , f ): f . add_in_edge ( self ) self . _target = f @target . deleter def target ( self ): self . _target . remove_in_edge ( self ) self . _target = None @property def target_id ( self ): \"\"\"The ID of the target object or 1 if no target is set Returns: int: Target object ID \"\"\" if self . target is not None : return self . target . id else : return 1 ########################################################### # Style properties ########################################################### @property def style_attributes ( self ): \"\"\"The style attributes to add to the style tag in the XML Returns: list: A list of style attributes \"\"\" return [ \"html\" , \"rounded\" , \"jettySize\" , \"entryX\" , \"entryY\" , \"entryDx\" , \"entryDy\" , \"exitX\" , \"exitY\" , \"exitDx\" , \"exitDy\" , \"startArrow\" , \"endArrow\" , \"startFill\" , \"endFill\" , ] @property def baseStyle ( self ): \"\"\"Generates the baseStyle string from the connection style, waypoint style, pattern style, and base style string. Returns: str: Concatenated baseStyle string \"\"\" style_str = [] connection_style = style_str_from_dict ( connection_db [ self . connection ]) if connection_style is not None and connection_style != \"\" : style_str . append ( connection_style ) waypoint_style = style_str_from_dict ( waypoints_db [ self . waypoints ]) if waypoint_style is not None and waypoint_style != \"\" : style_str . append ( waypoint_style ) pattern_style = style_str_from_dict ( pattern_db [ self . pattern ]) if pattern_style is not None and pattern_style != \"\" : style_str . append ( pattern_style ) if len ( style_str ) == 0 : return None else : return \";\" . join ( style_str ) @property def startArrow ( self ): \"\"\"What graphic the edge should be rendered with at the source Returns: str: The source edge graphic \"\"\" return self . line_end_source @startArrow . setter def startArrow ( self , val ): self . line_end_source = val @property def startFill ( self ): \"\"\"Whether the graphic at the source should be filled Returns: bool: The source graphic fill \"\"\" if line_ends_db [ self . line_end_source ][ \"fillable\" ]: return self . endFill_source else : return None @property def endArrow ( self ): \"\"\"What graphic the edge should be rendered with at the target Returns: str: The target edge graphic \"\"\" return self . line_end_target @endArrow . setter def endArrow ( self , val ): self . line_end_target = val @property def endFill ( self ): \"\"\"Whether the graphic at the target should be filled Returns: bool: The target graphic fill \"\"\" if line_ends_db [ self . line_end_target ][ \"fillable\" ]: return self . endFill_target else : return None # Base Line Style # Waypoints @property def waypoints ( self ): \"\"\"The waypoint style. Checks if the passed in value is in the TOML database of waypoints before setting and throws a ValueError if not. Returns: str: The style of the waypoints \"\"\" return self . _waypoints @waypoints . setter def waypoints ( self , value ): if value in waypoints_db . keys (): self . _waypoints = value else : raise ValueError ( \" {0} is not an allowed value of waypoints\" ) # Connection @property def connection ( self ): \"\"\"The connection style. Checks if the passed in value is in the TOML database of connections before setting and throws a ValueError if not. Returns: str: The style of the connections \"\"\" return self . _connection @connection . setter def connection ( self , value ): if value in connection_db . keys (): self . _connection = value else : raise ValueError ( \" {0} is not an allowed value of connection\" . format ( value ) ) # Pattern @property def pattern ( self ): \"\"\"The pattern style. Checks if the passed in value is in the TOML database of patterns before setting and throws a ValueError if not. Returns: str: The style of the patterns \"\"\" return self . _pattern @pattern . setter def pattern ( self , value ): if value in pattern_db . keys (): self . _pattern = value else : raise ValueError ( \" {0} is not an allowed value of pattern\" ) ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\"The opening and closing XML tags with the styling attributes included. Returns: str: _description_ \"\"\" tag = ( self . xml_open_tag + \" \\n \" + self . geometry . xml + \" \\n \" + self . xml_close_tag ) return tag attributes property Returns the XML attributes to be added to the tag for the object Returns: dict \u2013 Dictionary of object attributes and their values baseStyle property Generates the baseStyle string from the connection style, waypoint style, pattern style, and base style string. Returns: str \u2013 Concatenated baseStyle string connection property writable The connection style. Checks if the passed in value is in the TOML database of connections before setting and throws a ValueError if not. Returns: str \u2013 The style of the connections endArrow property writable What graphic the edge should be rendered with at the target Returns: str \u2013 The target edge graphic endFill property Whether the graphic at the target should be filled Returns: bool \u2013 The target graphic fill pattern property writable The pattern style. Checks if the passed in value is in the TOML database of patterns before setting and throws a ValueError if not. Returns: str \u2013 The style of the patterns source deletable property writable The source object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram \u2013 source object of the edge source_id property The ID of the source object or 1 if no source is set Returns: int \u2013 Source object ID startArrow property writable What graphic the edge should be rendered with at the source Returns: str \u2013 The source edge graphic startFill property Whether the graphic at the source should be filled Returns: bool \u2013 The source graphic fill style_attributes property The style attributes to add to the style tag in the XML Returns: list \u2013 A list of style attributes target deletable property writable The target object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram \u2013 target object of the edge target_id property The ID of the target object or 1 if no target is set Returns: int \u2013 Target object ID waypoints property writable The waypoint style. Checks if the passed in value is in the TOML database of waypoints before setting and throws a ValueError if not. Returns: str \u2013 The style of the waypoints xml property The opening and closing XML tags with the styling attributes included. Returns: str \u2013 description __init__ ( ** kwargs ) Edges can be initialized with almost all styling parameters as args. See Usage - Edges for more information and the options for each parameter. Parameters: source ( DiagramBase ) \u2013 The Draw.io object that the edge originates from target ( DiagramBase ) \u2013 The Draw.io object that the edge points to waypoints ( str ) \u2013 How the edge should be styled in Draw.io connection ( str ) \u2013 What type of style the edge should be rendered with pattern ( str ) \u2013 How the line of the edge should be rendered line_end_target ( str ) \u2013 What graphic the edge should be rendered with at the target line_end_source ( str ) \u2013 What graphic the edge should be rendered with at the source endFill_target ( boolean ) \u2013 Whether the target graphic should be filled endFill_source ( boolean ) \u2013 Whether the source graphic should be filled jettySize ( str or int ) \u2013 Length of the straight sections at the end of the edge. \"auto\" or a number rounded ( bool ) \u2013 Whether the corner of the line should be rounded entryX ( int ) \u2013 From where along the X axis on the source object the edge originates (0-1) entryY ( int ) \u2013 From where along the Y axis on the source object the edge originates (0-1) entryDx ( int ) \u2013 Applies an offset in pixels to the X axis entry point entryDy ( int ) \u2013 Applies an offset in pixels to the Y axis entry point exitX ( int ) \u2013 From where along the X axis on the target object the edge originates (0-1) exitY ( int ) \u2013 From where along the Y axis on the target object the edge originates (0-1) exitDx ( int ) \u2013 Applies an offset in pixels to the X axis exit point exitDy ( int ) \u2013 Applies an offset in pixels to the Y axis exit point Source code in drawpyo/diagram/edges.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def __init__ ( self , ** kwargs ): \"\"\"Edges can be initialized with almost all styling parameters as args. See [Usage - Edges](../../usage/edges) for more information and the options for each parameter. Args: source (DiagramBase): The Draw.io object that the edge originates from target (DiagramBase): The Draw.io object that the edge points to waypoints (str): How the edge should be styled in Draw.io connection (str): What type of style the edge should be rendered with pattern (str): How the line of the edge should be rendered line_end_target (str): What graphic the edge should be rendered with at the target line_end_source (str): What graphic the edge should be rendered with at the source endFill_target (boolean): Whether the target graphic should be filled endFill_source (boolean): Whether the source graphic should be filled jettySize (str or int): Length of the straight sections at the end of the edge. \"auto\" or a number rounded (bool): Whether the corner of the line should be rounded entryX (int): From where along the X axis on the source object the edge originates (0-1) entryY (int): From where along the Y axis on the source object the edge originates (0-1) entryDx (int): Applies an offset in pixels to the X axis entry point entryDy (int): Applies an offset in pixels to the Y axis entry point exitX (int): From where along the X axis on the target object the edge originates (0-1) exitY (int): From where along the Y axis on the target object the edge originates (0-1) exitDx (int): Applies an offset in pixels to the X axis exit point exitDy (int): Applies an offset in pixels to the Y axis exit point \"\"\" super () . __init__ ( ** kwargs ) self . xml_class = \"mxCell\" # Style self . waypoints = kwargs . get ( \"waypoints\" , \"orthogonal\" ) self . connection = kwargs . get ( \"connection\" , \"line\" ) self . pattern = kwargs . get ( \"pattern\" , \"solid\" ) self . line_end_target = kwargs . get ( \"line_end_target\" , None ) self . line_end_source = kwargs . get ( \"line_end_source\" , None ) self . endFill_target = kwargs . get ( \"endFill_target\" , False ) self . endFill_source = kwargs . get ( \"endFill_source\" , False ) self . jettySize = kwargs . get ( \"jettySize\" , \"auto\" ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) # Connection and geometry self . edge = kwargs . get ( \"edge\" , 1 ) self . source = kwargs . get ( \"source\" , None ) self . target = kwargs . get ( \"target\" , None ) self . geometry = EdgeGeometry () self . entryX = kwargs . get ( \"entryX\" , None ) self . entryY = kwargs . get ( \"entryY\" , None ) self . entryDx = kwargs . get ( \"entryDx\" , None ) self . entryDy = kwargs . get ( \"entryDy\" , None ) self . exitX = kwargs . get ( \"exitX\" , None ) self . exitY = kwargs . get ( \"exitY\" , None ) self . exitDx = kwargs . get ( \"exitDx\" , None ) self . exitDy = kwargs . get ( \"exitDy\" , None ) remove () This function removes references to the Edge from its source and target objects then deletes the Edge. Source code in drawpyo/diagram/edges.py 109 110 111 112 113 114 115 116 def remove ( self ): \"\"\"This function removes references to the Edge from its source and target objects then deletes the Edge. \"\"\" if self . source is not None : self . source . remove_out_edge ( self ) if self . target is not None : self . target . remove_in_edge ( self ) del self","title":"Edges"},{"location":"api/edges/#edges","text":"","title":"Edges"},{"location":"api/edges/#drawpyo.diagram.edges.Edge","text":"Bases: DiagramBase The Edge class is the simplest class for defining an edge or an arrow in a Draw.io diagram. The three primary styling inputs are the waypoints, connections, and pattern. These are how edges are styled in the Draw.io app, with dropdown menus for each one. But it's not how the style string is assembled in the XML. To abstract this, the Edge class loads a database called edge_styles.toml. The database maps the options in each dropdown to the style strings they correspond to. The Edge class then assembles the style strings on export. More information about edges are in the Usage documents at Usage - Edges . Source code in drawpyo/diagram/edges.pyclass Edge ( DiagramBase ): \"\"\"The Edge class is the simplest class for defining an edge or an arrow in a Draw.io diagram. The three primary styling inputs are the waypoints, connections, and pattern. These are how edges are styled in the Draw.io app, with dropdown menus for each one. But it's not how the style string is assembled in the XML. To abstract this, the Edge class loads a database called edge_styles.toml. The database maps the options in each dropdown to the style strings they correspond to. The Edge class then assembles the style strings on export. More information about edges are in the Usage documents at [Usage - Edges](../../usage/edges). \"\"\" def __init__ ( self , ** kwargs ): \"\"\"Edges can be initialized with almost all styling parameters as args. See [Usage - Edges](../../usage/edges) for more information and the options for each parameter. Args: source (DiagramBase): The Draw.io object that the edge originates from target (DiagramBase): The Draw.io object that the edge points to waypoints (str): How the edge should be styled in Draw.io connection (str): What type of style the edge should be rendered with pattern (str): How the line of the edge should be rendered line_end_target (str): What graphic the edge should be rendered with at the target line_end_source (str): What graphic the edge should be rendered with at the source endFill_target (boolean): Whether the target graphic should be filled endFill_source (boolean): Whether the source graphic should be filled jettySize (str or int): Length of the straight sections at the end of the edge. \"auto\" or a number rounded (bool): Whether the corner of the line should be rounded entryX (int): From where along the X axis on the source object the edge originates (0-1) entryY (int): From where along the Y axis on the source object the edge originates (0-1) entryDx (int): Applies an offset in pixels to the X axis entry point entryDy (int): Applies an offset in pixels to the Y axis entry point exitX (int): From where along the X axis on the target object the edge originates (0-1) exitY (int): From where along the Y axis on the target object the edge originates (0-1) exitDx (int): Applies an offset in pixels to the X axis exit point exitDy (int): Applies an offset in pixels to the Y axis exit point \"\"\" super () . __init__ ( ** kwargs ) self . xml_class = \"mxCell\" # Style self . waypoints = kwargs . get ( \"waypoints\" , \"orthogonal\" ) self . connection = kwargs . get ( \"connection\" , \"line\" ) self . pattern = kwargs . get ( \"pattern\" , \"solid\" ) self . line_end_target = kwargs . get ( \"line_end_target\" , None ) self . line_end_source = kwargs . get ( \"line_end_source\" , None ) self . endFill_target = kwargs . get ( \"endFill_target\" , False ) self . endFill_source = kwargs . get ( \"endFill_source\" , False ) self . jettySize = kwargs . get ( \"jettySize\" , \"auto\" ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) # Connection and geometry self . edge = kwargs . get ( \"edge\" , 1 ) self . source = kwargs . get ( \"source\" , None ) self . target = kwargs . get ( \"target\" , None ) self . geometry = EdgeGeometry () self . entryX = kwargs . get ( \"entryX\" , None ) self . entryY = kwargs . get ( \"entryY\" , None ) self . entryDx = kwargs . get ( \"entryDx\" , None ) self . entryDy = kwargs . get ( \"entryDy\" , None ) self . exitX = kwargs . get ( \"exitX\" , None ) self . exitY = kwargs . get ( \"exitY\" , None ) self . exitDx = kwargs . get ( \"exitDx\" , None ) self . exitDy = kwargs . get ( \"exitDy\" , None ) def __repr__ ( self ): name_str = \" {0} edge from {1} to {2} \" . format ( self . __class__ . __name__ , self . source , self . target ) return name_str def __str__ ( self ): return self . __repr__ () def remove ( self ): \"\"\"This function removes references to the Edge from its source and target objects then deletes the Edge. \"\"\" if self . source is not None : self . source . remove_out_edge ( self ) if self . target is not None : self . target . remove_in_edge ( self ) del self @property def attributes ( self ): \"\"\"Returns the XML attributes to be added to the tag for the object Returns: dict: Dictionary of object attributes and their values \"\"\" return { \"id\" : self . id , \"style\" : self . style , \"edge\" : self . edge , \"parent\" : self . xml_parent_id , \"source\" : self . source_id , \"target\" : self . target_id , } ########################################################### # Source and Target Linking ########################################################### # Source @property def source ( self ): \"\"\"The source object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram: source object of the edge \"\"\" return self . _source @source . setter def source ( self , f ): f . add_out_edge ( self ) self . _source = f @source . deleter def source ( self ): self . _source . remove_out_edge ( self ) self . _source = None @property def source_id ( self ): \"\"\"The ID of the source object or 1 if no source is set Returns: int: Source object ID \"\"\" if self . source is not None : return self . source . id else : return 1 # Target @property def target ( self ): \"\"\"The target object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram: target object of the edge \"\"\" return self . _target @target . setter def target ( self , f ): f . add_in_edge ( self ) self . _target = f @target . deleter def target ( self ): self . _target . remove_in_edge ( self ) self . _target = None @property def target_id ( self ): \"\"\"The ID of the target object or 1 if no target is set Returns: int: Target object ID \"\"\" if self . target is not None : return self . target . id else : return 1 ########################################################### # Style properties ########################################################### @property def style_attributes ( self ): \"\"\"The style attributes to add to the style tag in the XML Returns: list: A list of style attributes \"\"\" return [ \"html\" , \"rounded\" , \"jettySize\" , \"entryX\" , \"entryY\" , \"entryDx\" , \"entryDy\" , \"exitX\" , \"exitY\" , \"exitDx\" , \"exitDy\" , \"startArrow\" , \"endArrow\" , \"startFill\" , \"endFill\" , ] @property def baseStyle ( self ): \"\"\"Generates the baseStyle string from the connection style, waypoint style, pattern style, and base style string. Returns: str: Concatenated baseStyle string \"\"\" style_str = [] connection_style = style_str_from_dict ( connection_db [ self . connection ]) if connection_style is not None and connection_style != \"\" : style_str . append ( connection_style ) waypoint_style = style_str_from_dict ( waypoints_db [ self . waypoints ]) if waypoint_style is not None and waypoint_style != \"\" : style_str . append ( waypoint_style ) pattern_style = style_str_from_dict ( pattern_db [ self . pattern ]) if pattern_style is not None and pattern_style != \"\" : style_str . append ( pattern_style ) if len ( style_str ) == 0 : return None else : return \";\" . join ( style_str ) @property def startArrow ( self ): \"\"\"What graphic the edge should be rendered with at the source Returns: str: The source edge graphic \"\"\" return self . line_end_source @startArrow . setter def startArrow ( self , val ): self . line_end_source = val @property def startFill ( self ): \"\"\"Whether the graphic at the source should be filled Returns: bool: The source graphic fill \"\"\" if line_ends_db [ self . line_end_source ][ \"fillable\" ]: return self . endFill_source else : return None @property def endArrow ( self ): \"\"\"What graphic the edge should be rendered with at the target Returns: str: The target edge graphic \"\"\" return self . line_end_target @endArrow . setter def endArrow ( self , val ): self . line_end_target = val @property def endFill ( self ): \"\"\"Whether the graphic at the target should be filled Returns: bool: The target graphic fill \"\"\" if line_ends_db [ self . line_end_target ][ \"fillable\" ]: return self . endFill_target else : return None # Base Line Style # Waypoints @property def waypoints ( self ): \"\"\"The waypoint style. Checks if the passed in value is in the TOML database of waypoints before setting and throws a ValueError if not. Returns: str: The style of the waypoints \"\"\" return self . _waypoints @waypoints . setter def waypoints ( self , value ): if value in waypoints_db . keys (): self . _waypoints = value else : raise ValueError ( \" {0} is not an allowed value of waypoints\" ) # Connection @property def connection ( self ): \"\"\"The connection style. Checks if the passed in value is in the TOML database of connections before setting and throws a ValueError if not. Returns: str: The style of the connections \"\"\" return self . _connection @connection . setter def connection ( self , value ): if value in connection_db . keys (): self . _connection = value else : raise ValueError ( \" {0} is not an allowed value of connection\" . format ( value ) ) # Pattern @property def pattern ( self ): \"\"\"The pattern style. Checks if the passed in value is in the TOML database of patterns before setting and throws a ValueError if not. Returns: str: The style of the patterns \"\"\" return self . _pattern @pattern . setter def pattern ( self , value ): if value in pattern_db . keys (): self . _pattern = value else : raise ValueError ( \" {0} is not an allowed value of pattern\" ) ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\"The opening and closing XML tags with the styling attributes included. Returns: str: _description_ \"\"\" tag = ( self . xml_open_tag + \" \\n \" + self . geometry . xml + \" \\n \" + self . xml_close_tag ) return tag","title":"Edge"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.attributes","text":"Returns the XML attributes to be added to the tag for the object Returns: dict \u2013 Dictionary of object attributes and their values","title":"attributes"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.baseStyle","text":"Generates the baseStyle string from the connection style, waypoint style, pattern style, and base style string. Returns: str \u2013 Concatenated baseStyle string","title":"baseStyle"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.connection","text":"The connection style. Checks if the passed in value is in the TOML database of connections before setting and throws a ValueError if not. Returns: str \u2013 The style of the connections","title":"connection"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.endArrow","text":"What graphic the edge should be rendered with at the target Returns: str \u2013 The target edge graphic","title":"endArrow"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.endFill","text":"Whether the graphic at the target should be filled Returns: bool \u2013 The target graphic fill","title":"endFill"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.pattern","text":"The pattern style. Checks if the passed in value is in the TOML database of patterns before setting and throws a ValueError if not. Returns: str \u2013 The style of the patterns","title":"pattern"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.source","text":"The source object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram \u2013 source object of the edge","title":"source"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.source_id","text":"The ID of the source object or 1 if no source is set Returns: int \u2013 Source object ID","title":"source_id"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.startArrow","text":"What graphic the edge should be rendered with at the source Returns: str \u2013 The source edge graphic","title":"startArrow"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.startFill","text":"Whether the graphic at the source should be filled Returns: bool \u2013 The source graphic fill","title":"startFill"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.style_attributes","text":"The style attributes to add to the style tag in the XML Returns: list \u2013 A list of style attributes","title":"style_attributes"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.target","text":"The target object of the edge. Automatically adds the edge to the object when set and removes it when deleted. Returns: BaseDiagram \u2013 target object of the edge","title":"target"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.target_id","text":"The ID of the target object or 1 if no target is set Returns: int \u2013 Target object ID","title":"target_id"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.waypoints","text":"The waypoint style. Checks if the passed in value is in the TOML database of waypoints before setting and throws a ValueError if not. Returns: str \u2013 The style of the waypoints","title":"waypoints"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.xml","text":"The opening and closing XML tags with the styling attributes included. Returns: str \u2013 description","title":"xml"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.__init__","text":"Edges can be initialized with almost all styling parameters as args. See Usage - Edges for more information and the options for each parameter. Parameters: source ( DiagramBase ) \u2013 The Draw.io object that the edge originates from target ( DiagramBase ) \u2013 The Draw.io object that the edge points to waypoints ( str ) \u2013 How the edge should be styled in Draw.io connection ( str ) \u2013 What type of style the edge should be rendered with pattern ( str ) \u2013 How the line of the edge should be rendered line_end_target ( str ) \u2013 What graphic the edge should be rendered with at the target line_end_source ( str ) \u2013 What graphic the edge should be rendered with at the source endFill_target ( boolean ) \u2013 Whether the target graphic should be filled endFill_source ( boolean ) \u2013 Whether the source graphic should be filled jettySize ( str or int ) \u2013 Length of the straight sections at the end of the edge. \"auto\" or a number rounded ( bool ) \u2013 Whether the corner of the line should be rounded entryX ( int ) \u2013 From where along the X axis on the source object the edge originates (0-1) entryY ( int ) \u2013 From where along the Y axis on the source object the edge originates (0-1) entryDx ( int ) \u2013 Applies an offset in pixels to the X axis entry point entryDy ( int ) \u2013 Applies an offset in pixels to the Y axis entry point exitX ( int ) \u2013 From where along the X axis on the target object the edge originates (0-1) exitY ( int ) \u2013 From where along the Y axis on the target object the edge originates (0-1) exitDx ( int ) \u2013 Applies an offset in pixels to the X axis exit point exitDy ( int ) \u2013 Applies an offset in pixels to the Y axis exit point Source code in drawpyo/diagram/edges.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def __init__ ( self , ** kwargs ): \"\"\"Edges can be initialized with almost all styling parameters as args. See [Usage - Edges](../../usage/edges) for more information and the options for each parameter. Args: source (DiagramBase): The Draw.io object that the edge originates from target (DiagramBase): The Draw.io object that the edge points to waypoints (str): How the edge should be styled in Draw.io connection (str): What type of style the edge should be rendered with pattern (str): How the line of the edge should be rendered line_end_target (str): What graphic the edge should be rendered with at the target line_end_source (str): What graphic the edge should be rendered with at the source endFill_target (boolean): Whether the target graphic should be filled endFill_source (boolean): Whether the source graphic should be filled jettySize (str or int): Length of the straight sections at the end of the edge. \"auto\" or a number rounded (bool): Whether the corner of the line should be rounded entryX (int): From where along the X axis on the source object the edge originates (0-1) entryY (int): From where along the Y axis on the source object the edge originates (0-1) entryDx (int): Applies an offset in pixels to the X axis entry point entryDy (int): Applies an offset in pixels to the Y axis entry point exitX (int): From where along the X axis on the target object the edge originates (0-1) exitY (int): From where along the Y axis on the target object the edge originates (0-1) exitDx (int): Applies an offset in pixels to the X axis exit point exitDy (int): Applies an offset in pixels to the Y axis exit point \"\"\" super () . __init__ ( ** kwargs ) self . xml_class = \"mxCell\" # Style self . waypoints = kwargs . get ( \"waypoints\" , \"orthogonal\" ) self . connection = kwargs . get ( \"connection\" , \"line\" ) self . pattern = kwargs . get ( \"pattern\" , \"solid\" ) self . line_end_target = kwargs . get ( \"line_end_target\" , None ) self . line_end_source = kwargs . get ( \"line_end_source\" , None ) self . endFill_target = kwargs . get ( \"endFill_target\" , False ) self . endFill_source = kwargs . get ( \"endFill_source\" , False ) self . jettySize = kwargs . get ( \"jettySize\" , \"auto\" ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) # Connection and geometry self . edge = kwargs . get ( \"edge\" , 1 ) self . source = kwargs . get ( \"source\" , None ) self . target = kwargs . get ( \"target\" , None ) self . geometry = EdgeGeometry () self . entryX = kwargs . get ( \"entryX\" , None ) self . entryY = kwargs . get ( \"entryY\" , None ) self . entryDx = kwargs . get ( \"entryDx\" , None ) self . entryDy = kwargs . get ( \"entryDy\" , None ) self . exitX = kwargs . get ( \"exitX\" , None ) self . exitY = kwargs . get ( \"exitY\" , None ) self . exitDx = kwargs . get ( \"exitDx\" , None ) self . exitDy = kwargs . get ( \"exitDy\" , None )","title":"__init__"},{"location":"api/edges/#drawpyo.diagram.edges.Edge.remove","text":"This function removes references to the Edge from its source and target objects then deletes the Edge. Source code in drawpyo/diagram/edges.py 109 110 111 112 113 114 115 116 def remove ( self ): \"\"\"This function removes references to the Edge from its source and target objects then deletes the Edge. \"\"\" if self . source is not None : self . source . remove_out_edge ( self ) if self . target is not None : self . target . remove_in_edge ( self ) del self","title":"remove"},{"location":"api/file/","text":"File drawpyo.file.File Bases: XMLBase The File class defines a Draw.io file, its properties, and the methods required for saving it. Source code in drawpyo/file.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 class File ( XMLBase ): \"\"\"The File class defines a Draw.io file, its properties, and the methods required for saving it. \"\"\" def __init__ ( self , file_name = \"Drawpyo Diagram.drawio\" , file_path = path . join ( path . expanduser ( '~' ), \"Drawpyo Charts\" )): \"\"\"To initiate a File object, pass in a name and path or leave it to the defaults. Args: file_name (str, optional): The name of the file. file_path (str, optional): The location where the file will be saved. \"\"\" super () . __init__ () self . pages = [] self . file_name = file_name self . file_path = file_path # Attributes self . host = \"Drawpyo\" self . type = \"device\" self . version = \"21.6.5\" # This is the version of the Draw.io spec self . xml_class = \"mxfile\" def __repr__ ( self ): return f \"drawpyo File - { self . file_name } \" @property def attributes ( self ): return { \"host\" : self . host , \"modified\" : self . modified , \"agent\" : self . agent , \"etag\" : self . etag , \"version\" : self . version , \"type\" : self . type , } def add_page ( self , page ): \"\"\"Add a page to the file. Args: page (drawpyo.diagram.Page): A Page object \"\"\" self . pages . append ( page ) def remove_page ( self , page ): \"\"\"Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Args: page (drawpyo.diagram.Page or str or int): A Page object that's currently contained in the file \"\"\" if isinstance ( page , int ): del self . pages [ page ] elif isinstance ( page , str ): for pg in self . pages : if pg . name == page : self . pages . remove ( pg ) elif isinstance ( page , Page ): self . pages . remove ( page ) ########################################################### # File Properties ########################################################### @property def modified ( self ): return datetime . now () . strftime ( \"%Y-%m- %d T%H:%M:%S\" ) @property def agent ( self ): python_version = f \" { version_info . major } . { version_info . minor } \" drawpyo_version = f \"0.01\" return f \"Python { python_version } , Drawpyo { drawpyo_version } \" @property def etag ( self ): # etag is in the Draw.io spec but not sure how it's used or if I need to create it return None ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\"This function goes through each page in the file, retrieves its XML, and appends it to a list, then wraps that list in the file's open and close tags. Returns: str: The XML data for the file and all the pages in it \"\"\" xml_string = self . xml_open_tag for diag in self . pages : xml_string = xml_string + \" \\n \" + diag . xml xml_string = xml_string + \" \\n \" + self . xml_close_tag return xml_string ########################################################### # File Handling ########################################################### def write ( self , ** kwargs ): \"\"\"This function write the file to disc at the path and name specified. Args: file_path (str, opt): The path to save the file in file_name (str, opt): The name of the file overwrite (bool, opt): Whether to overwrite an existing file or not \"\"\" # Check if file_path or file_name were passed in, or are preexisting self . file_path = kwargs . get ( \"file_path\" , self . file_path ) self . file_name = kwargs . get ( \"file_name\" , self . file_name ) overwrite = kwargs . get ( \"overwrite\" , True ) if overwrite : write_mode = \"w\" else : write_mode = \"x\" if not path . exists ( self . file_path ): makedirs ( self . file_path ) f = open ( path . join ( self . file_path , self . file_name ), write_mode , encoding = \"utf-8\" ) f . write ( self . xml ) f . close xml property This function goes through each page in the file, retrieves its XML, and appends it to a list, then wraps that list in the file's open and close tags. Returns: str \u2013 The XML data for the file and all the pages in it __init__ ( file_name = 'Drawpyo Diagram.drawio' , file_path = path . join ( path . expanduser ( '~' ), 'Drawpyo Charts' )) To initiate a File object, pass in a name and path or leave it to the defaults. Parameters: file_name ( str , default: 'Drawpyo Diagram.drawio' ) \u2013 The name of the file. file_path ( str , default: join ( expanduser ('~'), 'Drawpyo Charts') ) \u2013 The location where the file will be saved. Source code in drawpyo/file.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , file_name = \"Drawpyo Diagram.drawio\" , file_path = path . join ( path . expanduser ( '~' ), \"Drawpyo Charts\" )): \"\"\"To initiate a File object, pass in a name and path or leave it to the defaults. Args: file_name (str, optional): The name of the file. file_path (str, optional): The location where the file will be saved. \"\"\" super () . __init__ () self . pages = [] self . file_name = file_name self . file_path = file_path # Attributes self . host = \"Drawpyo\" self . type = \"device\" self . version = \"21.6.5\" # This is the version of the Draw.io spec self . xml_class = \"mxfile\" add_page ( page ) Add a page to the file. Parameters: page ( Page ) \u2013 A Page object Source code in drawpyo/file.py 45 46 47 48 49 50 51 def add_page ( self , page ): \"\"\"Add a page to the file. Args: page (drawpyo.diagram.Page): A Page object \"\"\" self . pages . append ( page ) remove_page ( page ) Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Parameters: page ( Page or str or int ) \u2013 A Page object that's currently contained in the file Source code in drawpyo/file.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def remove_page ( self , page ): \"\"\"Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Args: page (drawpyo.diagram.Page or str or int): A Page object that's currently contained in the file \"\"\" if isinstance ( page , int ): del self . pages [ page ] elif isinstance ( page , str ): for pg in self . pages : if pg . name == page : self . pages . remove ( pg ) elif isinstance ( page , Page ): self . pages . remove ( page ) write ( ** kwargs ) This function write the file to disc at the path and name specified. Parameters: file_path ( ( str , opt ) ) \u2013 The path to save the file in file_name ( ( str , opt ) ) \u2013 The name of the file overwrite ( ( bool , opt ) ) \u2013 Whether to overwrite an existing file or not Source code in drawpyo/file.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def write ( self , ** kwargs ): \"\"\"This function write the file to disc at the path and name specified. Args: file_path (str, opt): The path to save the file in file_name (str, opt): The name of the file overwrite (bool, opt): Whether to overwrite an existing file or not \"\"\" # Check if file_path or file_name were passed in, or are preexisting self . file_path = kwargs . get ( \"file_path\" , self . file_path ) self . file_name = kwargs . get ( \"file_name\" , self . file_name ) overwrite = kwargs . get ( \"overwrite\" , True ) if overwrite : write_mode = \"w\" else : write_mode = \"x\" if not path . exists ( self . file_path ): makedirs ( self . file_path ) f = open ( path . join ( self . file_path , self . file_name ), write_mode , encoding = \"utf-8\" ) f . write ( self . xml ) f . close","title":"File"},{"location":"api/file/#file","text":"","title":"File"},{"location":"api/file/#drawpyo.file.File","text":"Bases: XMLBase The File class defines a Draw.io file, its properties, and the methods required for saving it. Source code in drawpyo/file.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 class File ( XMLBase ): \"\"\"The File class defines a Draw.io file, its properties, and the methods required for saving it. \"\"\" def __init__ ( self , file_name = \"Drawpyo Diagram.drawio\" , file_path = path . join ( path . expanduser ( '~' ), \"Drawpyo Charts\" )): \"\"\"To initiate a File object, pass in a name and path or leave it to the defaults. Args: file_name (str, optional): The name of the file. file_path (str, optional): The location where the file will be saved. \"\"\" super () . __init__ () self . pages = [] self . file_name = file_name self . file_path = file_path # Attributes self . host = \"Drawpyo\" self . type = \"device\" self . version = \"21.6.5\" # This is the version of the Draw.io spec self . xml_class = \"mxfile\" def __repr__ ( self ): return f \"drawpyo File - { self . file_name } \" @property def attributes ( self ): return { \"host\" : self . host , \"modified\" : self . modified , \"agent\" : self . agent , \"etag\" : self . etag , \"version\" : self . version , \"type\" : self . type , } def add_page ( self , page ): \"\"\"Add a page to the file. Args: page (drawpyo.diagram.Page): A Page object \"\"\" self . pages . append ( page ) def remove_page ( self , page ): \"\"\"Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Args: page (drawpyo.diagram.Page or str or int): A Page object that's currently contained in the file \"\"\" if isinstance ( page , int ): del self . pages [ page ] elif isinstance ( page , str ): for pg in self . pages : if pg . name == page : self . pages . remove ( pg ) elif isinstance ( page , Page ): self . pages . remove ( page ) ########################################################### # File Properties ########################################################### @property def modified ( self ): return datetime . now () . strftime ( \"%Y-%m- %d T%H:%M:%S\" ) @property def agent ( self ): python_version = f \" { version_info . major } . { version_info . minor } \" drawpyo_version = f \"0.01\" return f \"Python { python_version } , Drawpyo { drawpyo_version } \" @property def etag ( self ): # etag is in the Draw.io spec but not sure how it's used or if I need to create it return None ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\"This function goes through each page in the file, retrieves its XML, and appends it to a list, then wraps that list in the file's open and close tags. Returns: str: The XML data for the file and all the pages in it \"\"\" xml_string = self . xml_open_tag for diag in self . pages : xml_string = xml_string + \" \\n \" + diag . xml xml_string = xml_string + \" \\n \" + self . xml_close_tag return xml_string ########################################################### # File Handling ########################################################### def write ( self , ** kwargs ): \"\"\"This function write the file to disc at the path and name specified. Args: file_path (str, opt): The path to save the file in file_name (str, opt): The name of the file overwrite (bool, opt): Whether to overwrite an existing file or not \"\"\" # Check if file_path or file_name were passed in, or are preexisting self . file_path = kwargs . get ( \"file_path\" , self . file_path ) self . file_name = kwargs . get ( \"file_name\" , self . file_name ) overwrite = kwargs . get ( \"overwrite\" , True ) if overwrite : write_mode = \"w\" else : write_mode = \"x\" if not path . exists ( self . file_path ): makedirs ( self . file_path ) f = open ( path . join ( self . file_path , self . file_name ), write_mode , encoding = \"utf-8\" ) f . write ( self . xml ) f . close","title":"File"},{"location":"api/file/#drawpyo.file.File.xml","text":"This function goes through each page in the file, retrieves its XML, and appends it to a list, then wraps that list in the file's open and close tags. Returns: str \u2013 The XML data for the file and all the pages in it","title":"xml"},{"location":"api/file/#drawpyo.file.File.__init__","text":"To initiate a File object, pass in a name and path or leave it to the defaults. Parameters: file_name ( str , default: 'Drawpyo Diagram.drawio' ) \u2013 The name of the file. file_path ( str , default: join ( expanduser ('~'), 'Drawpyo Charts') ) \u2013 The location where the file will be saved. Source code in drawpyo/file.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , file_name = \"Drawpyo Diagram.drawio\" , file_path = path . join ( path . expanduser ( '~' ), \"Drawpyo Charts\" )): \"\"\"To initiate a File object, pass in a name and path or leave it to the defaults. Args: file_name (str, optional): The name of the file. file_path (str, optional): The location where the file will be saved. \"\"\" super () . __init__ () self . pages = [] self . file_name = file_name self . file_path = file_path # Attributes self . host = \"Drawpyo\" self . type = \"device\" self . version = \"21.6.5\" # This is the version of the Draw.io spec self . xml_class = \"mxfile\"","title":"__init__"},{"location":"api/file/#drawpyo.file.File.add_page","text":"Add a page to the file. Parameters: page ( Page ) \u2013 A Page object Source code in drawpyo/file.py 45 46 47 48 49 50 51 def add_page ( self , page ): \"\"\"Add a page to the file. Args: page (drawpyo.diagram.Page): A Page object \"\"\" self . pages . append ( page )","title":"add_page"},{"location":"api/file/#drawpyo.file.File.remove_page","text":"Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Parameters: page ( Page or str or int ) \u2013 A Page object that's currently contained in the file Source code in drawpyo/file.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def remove_page ( self , page ): \"\"\"Remove a page from the file. The page argument can be either a Page object, the integer number of the page, or the string name of the page. Args: page (drawpyo.diagram.Page or str or int): A Page object that's currently contained in the file \"\"\" if isinstance ( page , int ): del self . pages [ page ] elif isinstance ( page , str ): for pg in self . pages : if pg . name == page : self . pages . remove ( pg ) elif isinstance ( page , Page ): self . pages . remove ( page )","title":"remove_page"},{"location":"api/file/#drawpyo.file.File.write","text":"This function write the file to disc at the path and name specified. Parameters: file_path ( ( str , opt ) ) \u2013 The path to save the file in file_name ( ( str , opt ) ) \u2013 The name of the file overwrite ( ( bool , opt ) ) \u2013 Whether to overwrite an existing file or not Source code in drawpyo/file.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def write ( self , ** kwargs ): \"\"\"This function write the file to disc at the path and name specified. Args: file_path (str, opt): The path to save the file in file_name (str, opt): The name of the file overwrite (bool, opt): Whether to overwrite an existing file or not \"\"\" # Check if file_path or file_name were passed in, or are preexisting self . file_path = kwargs . get ( \"file_path\" , self . file_path ) self . file_name = kwargs . get ( \"file_name\" , self . file_name ) overwrite = kwargs . get ( \"overwrite\" , True ) if overwrite : write_mode = \"w\" else : write_mode = \"x\" if not path . exists ( self . file_path ): makedirs ( self . file_path ) f = open ( path . join ( self . file_path , self . file_name ), write_mode , encoding = \"utf-8\" ) f . write ( self . xml ) f . close","title":"write"},{"location":"api/objects/","text":"Objects Object Creation object_from_library drawpyo . diagram . objects . object_from_library ( library , obj_name , ** kwargs ) This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Returns: Object \u2013 An object with the style from the library Source code in drawpyo/diagram/objects.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def object_from_library ( library , obj_name , ** kwargs ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = Object ( ** kwargs ) new_obj . format_as_library_object ( library , obj_name ) return new_obj Object drawpyo.diagram.objects.Object Bases: DiagramBase The Object class is the base object for all shapes in Draw.io. More information about objects are in the Usage documents at Usage - Objects . Source code in drawpyo/diagram/objects.pyclass Object ( DiagramBase ): \"\"\" The Object class is the base object for all shapes in Draw.io. More information about objects are in the Usage documents at [Usage - Objects](../../usage/objects). \"\"\" ########################################################### # Initialization Functions ########################################################### def __init__ ( self , value = \"\" , size = ( 120 , 80 ), position = ( 0 , 0 ), ** kwargs ): \"\"\"A Object can be initialized with as many or as few of its styling attributes as is desired. Args: value (str, optional): The text to fill the object with. Defaults to \"\". size (tuple, optional): The size of the object in pixels, in (W, H). Defaults to (120, 80). position (tuple, optional): The position of the object in pixels, in (X, Y). Defaults to (0, 0). Keyword Args: template_object (Object, optional): Another object to copy the style_attributes from aspect rounded (bool, optional): Whether to round the corners of the shape whiteSpace (str, optional): white space fillColor (str, optional): The object fill color in a hex color code (#ffffff) opacity (int, optional): The object's opacity, 0-100 strokeColor: The object stroke color in a hex color code (#ffffff) glass (bool, optional): Apply glass styling to the object shadow (bool, optional): Add a shadow to the object comic (bool, optional): Add comic styling to the object line_pattern (str, optional): The stroke style of the object. fontColor (int, optional): The color of the text in the object (#ffffff) fontFamily (str, optional): The typeface of the text in the object (see Draw.io for available fonts) fontSize (int, optional): The size of the text in the object in points align (str, optional): The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign (str, optional): The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity (int, optional): The opacity of the text in the object text_direction (str, optional): The direction to print the text ('vertical', 'horizontal') bold_font (bool, optional): Whether the text in the object should be bold italic_font (bool, optional): Whether the text in the object should be italic underline_font (bool, optional): Whether the text in the object should be underlined labelPosition (str, optional): The position of the object label ('left', 'center', or 'right') labelBackgroundColor (str, optional): The background color of the object label (#ffffff) labelBorderColor (str, optional): The border color of the object label (#ffffff) \"\"\" super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" , \"whiteSpace\" , \"rounded\" , \"fillColor\" , \"fontColor\" , \"strokeColor\" , \"glass\" , \"shadow\" , \"comic\" , \"fontFamily\" , \"align\" , \"verticalAlign\" , \"labelPosition\" , \"labelBackgroundColor\" , \"labelBorderColor\" , \"fontSize\" , \"horizontal\" , \"textOpacity\" , \"opacity\" , \"dashed\" , ] # Geometry self . geometry = ObjGeometry ( parent_object = self ) self . position = kwargs . get ( \"position\" , ( 0 , 0 )) self . size = kwargs . get ( \"size\" , [ 120 , 80 ]) self . vertex = kwargs . get ( \"vertex\" , 1 ) # TODO enumerate to fixed self . aspect = kwargs . get ( \"aspect\" , None ) # Content self . value = value # Style self . baseStyle = kwargs . get ( \"baseStyle\" , None ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) self . whiteSpace = kwargs . get ( \"whiteSpace\" , \"wrap\" ) self . fillColor = kwargs . get ( \"fillColor\" , None ) self . fontColor = kwargs . get ( \"fontColor\" , None ) self . opacity = kwargs . get ( \"opacity\" , None ) self . strokeColor = kwargs . get ( \"strokeColor\" , None ) self . glass = kwargs . get ( \"glass\" , None ) self . shadow = kwargs . get ( \"shadow\" , None ) self . comic = kwargs . get ( \"comic\" , None ) self . line_pattern = kwargs . get ( \"line_pattern\" , \"solid\" ) self . fontFamily = kwargs . get ( \"fontFamily\" , None ) self . fontSize = kwargs . get ( \"fontSize\" , None ) self . align = kwargs . get ( \"align\" , None ) self . verticalAlign = kwargs . get ( \"verticalAlign\" , None ) self . labelPosition = kwargs . get ( \"labelPosition\" , None ) self . labelBackgroundColor = kwargs . get ( \"labelBackgroundColor\" , None ) self . labelBorderColor = kwargs . get ( \"labelBorderColor\" , None ) # These need to be enumerated self . text_direction = kwargs . get ( \"text_direction\" , None ) # This is actually horizontal. 0 means vertical text, 1 or not present # means horizontal self . textOpacity = kwargs . get ( \"textOpacity\" , None ) self . bold_font = kwargs . get ( \"bold_font\" , False ) self . italic_font = kwargs . get ( \"italic_font\" , False ) self . underline_font = kwargs . get ( \"underline_font\" , False ) self . out_edges = kwargs . get ( \"out_edges\" , []) self . in_edges = kwargs . get ( \"in_edges\" , []) self . xml_class = \"mxCell\" if \"template_object\" in kwargs : self . template_object = kwargs . get ( \"template_object\" ) self . _apply_style_from_template ( self . template_object ) def __repr__ ( self ): if self . value != \"\" : name_str = \" {0} object with value {1} \" . format ( self . __class__ . __name__ , self . value ) else : name_str = \" {0} object\" . format ( self . __class__ . __name__ ) return name_str def __str_ ( self ): return self . __repr__ () @classmethod def create_from_template_object ( cls , template_object , value = None , position = None , page = None ): \"\"\"Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Args: template_object (Object): Another drawpyo Object to use as a template value (str, optional): The text contents of the object. Defaults to None. position (tuple, optional): The position where the object should be placed. Defaults to (0, 0). page (Page, optional): The Page object to place the object on. Defaults to None. Returns: Object: The newly created object \"\"\" new_obj = cls ( value = value , page = page , size = template_object . size , template_object = template_object ) if position is not None : new_obj . position = position if value is not None : new_obj . value = value return new_obj @classmethod def create_from_style_string ( cls , style_string ): \"\"\"Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Args: style_string (str): A Draw.io generated style string. Returns: Object: An object formatted with the style string \"\"\" cls . apply_style_from_string ( style_string ) return cls @classmethod def create_from_library ( cls , library , obj_name ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = cls () new_obj . format_as_library_object ( library , obj_name ) return new_obj def format_as_library_object ( self , library , obj_name ): \"\"\"This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate \"\"\" if type ( library ) == str : if library in base_libraries : library_dict = base_libraries [ library ] if obj_name in library_dict : obj_dict = library_dict [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Object {0} not in Library {1} \" . format ( obj_name , library ) ) else : raise ValueError ( \"Library {0} not in base_libraries\" . format ( library ) ) elif type ( library ) == dict : obj_dict = library [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Unparseable libary passed in.\" ) @property def attributes ( self ): return { \"id\" : self . id , \"value\" : self . value , \"style\" : self . style , \"vertex\" : self . vertex , \"parent\" : self . xml_parent_id , } ########################################################### # Style templates ########################################################### @property def line_styles ( self ): return line_styles @property def text_directions ( self ): return text_directions @property def container ( self ): return container ########################################################### # Style properties ########################################################### # The direction of the text is encoded as 'horizontal' in Draw.io. This is # unintuitive so I provided a text_direction alternate syntax. @property def horizontal ( self ): return text_directions [ self . _text_direction ] @horizontal . setter def horizontal ( self , value ): if value in text_directions_inv . keys (): self . _text_direction = text_directions_inv [ value ] else : raise ValueError ( \" {0} is not an allowed value of horizontal\" . format ( value ) ) @property def text_direction ( self ): return self . _text_direction @text_direction . setter def text_direction ( self , value ): if value in text_directions . keys (): self . _text_direction = value else : raise ValueError ( \" {0} is not an allowed value of text_direction\" . format ( value ) ) @property def font_style ( self ): '''The font_style is a numeric format that corresponds to a combination of three other attributes: bold_font, italic_font, and underline_font. Any combination of them can be true. ''' bld = self . bold_font ita = self . italic_font unl = self . underline_font # 0 = normal # 1 = bold # 2 = italic # 3 = bold and italic # 4 = underline # 5 = bold and underlined # 6 = italic and underlined # 7 = bolt, italic, and underlined if not bld and not ita and not unl : return 0 elif bld and not ita and not unl : return 1 elif not bld and ita and not unl : return 2 elif bld and ita and not unl : return 3 elif not bld and not ita and unl : return 4 elif bld and not ita and unl : return 5 elif not bld and ita and unl : return 6 elif bld and ita and unl : return 7 @property def line_pattern ( self ): \"\"\"Two properties are enumerated together into line_pattern: dashed and dashPattern. line_pattern simplifies this with an external database that contains the dropdown options from the Draw.io app then outputs the correct combination of dashed and dashPattern. However in some cases dashed and dashpattern need to be set individually, such as when formatting from a style string. In that case, the setters for those two attributes will disable the other. Returns: str: The line style \"\"\" return self . _line_pattern @line_pattern . setter def line_pattern ( self , value ): if value in line_styles . keys (): self . _line_pattern = value else : raise ValueError ( \" {0} is not an allowed value of line_pattern\" . format ( value ) ) @property def dashed ( self ): \"\"\"This is one of the properties that defines the line style. Along with dashPattern, it can be overriden by setting line_pattern or set directly. Returns: str: Whether the object stroke is dashed. \"\"\" if self . _line_pattern is None : return self . _dashed else : return line_styles [ self . _line_pattern ] @dashed . setter def dashed ( self , value ): self . _line_pattern = None self . _dashed = value @property def dashPattern ( self ): \"\"\"This is one of the properties that defines the line style. Along with dashed, it can be overriden by setting line_pattern or set directly. Returns: str: What style the object stroke is dashed with. \"\"\" if self . _line_pattern is None : return self . _dashed else : return line_styles [ self . _line_pattern ] @dashPattern . setter def dashPattern ( self , value ): self . _line_pattern = None self . _dashPattern = value ########################################################### # Geometry properties ########################################################### # Position property @property def position ( self ): \"\"\"The position of the object on the page. This is the top left corner. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple: A tuple of ints describing the top left corner position of the object \"\"\" return ( self . geometry . x , self . geometry . y ) @position . setter def position ( self , value ): self . geometry . x = value [ 0 ] self . geometry . y = value [ 1 ] @property def center_position ( self ): \"\"\"The position of the object on the page. This is the center of the object. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple: A tuple of ints describing the center position of the object \"\"\" x = self . geometry . x + self . geometry . width / 2 y = self . geometry . y + self . geometry . height / 2 return ( x , y ) @center_position . setter def center_position ( self , position ): self . geometry . x = position [ 0 ] - self . geometry . width / 2 self . geometry . y = position [ 1 ] - self . geometry . height / 2 # Size property @property def size ( self ): \"\"\"The size of the object. It's set with a tuple of ints, width and height respectively. (width, height) Returns: tuple: A tuple of ints describing the size of the object \"\"\" return ( self . geometry . width , self . geometry . height ) @size . setter def size ( self , value ): self . geometry . width = value [ 0 ] self . geometry . height = value [ 1 ] ########################################################### # Edge Tracking ########################################################### def add_out_edge ( self , edge ): \"\"\"Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . append ( edge ) def remove_out_edge ( self , edge ): \"\"\"Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . remove ( edge ) def add_in_edge ( self , edge ): \"\"\"Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . append ( edge ) def remove_in_edge ( self , edge ): \"\"\"Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . remove ( edge ) ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\" Returns the XML object for the Object: the opening tag with the style attributes, the value, and the closing tag. Example: <class_name attribute_name=attribute_value>Text in object</class_name> Returns: str: A single XML tag containing the object name, style attributes, and a closer. \"\"\" tag = ( self . xml_open_tag + \" \\n \" + self . geometry . xml + \" \\n \" + self . xml_close_tag ) return tag center_position property writable The position of the object on the page. This is the center of the object. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple \u2013 A tuple of ints describing the center position of the object dashPattern property writable This is one of the properties that defines the line style. Along with dashed, it can be overriden by setting line_pattern or set directly. Returns: str \u2013 What style the object stroke is dashed with. dashed property writable This is one of the properties that defines the line style. Along with dashPattern, it can be overriden by setting line_pattern or set directly. Returns: str \u2013 Whether the object stroke is dashed. font_style property The font_style is a numeric format that corresponds to a combination of three other attributes: bold_font, italic_font, and underline_font. Any combination of them can be true. line_pattern property writable Two properties are enumerated together into line_pattern: dashed and dashPattern. line_pattern simplifies this with an external database that contains the dropdown options from the Draw.io app then outputs the correct combination of dashed and dashPattern. However in some cases dashed and dashpattern need to be set individually, such as when formatting from a style string. In that case, the setters for those two attributes will disable the other. Returns: str \u2013 The line style position property writable The position of the object on the page. This is the top left corner. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple \u2013 A tuple of ints describing the top left corner position of the object size property writable The size of the object. It's set with a tuple of ints, width and height respectively. (width, height) Returns: tuple \u2013 A tuple of ints describing the size of the object xml property Returns the XML object for the Object: the opening tag with the style attributes, the value, and the closing tag. Example: Text in object Returns: str \u2013 A single XML tag containing the object name, style attributes, and a closer. __init__ ( value = '' , size = ( 120 , 80 ), position = ( 0 , 0 ), ** kwargs ) A Object can be initialized with as many or as few of its styling attributes as is desired. Parameters: value ( str , default: '' ) \u2013 The text to fill the object with. Defaults to \"\". size ( tuple , default: (120, 80) ) \u2013 The size of the object in pixels, in (W, H). Defaults to (120, 80). position ( tuple , default: (0, 0) ) \u2013 The position of the object in pixels, in (X, Y). Defaults to (0, 0). template_object ( Object ) \u2013 Another object to copy the style_attributes from rounded ( bool ) \u2013 Whether to round the corners of the shape whiteSpace ( str ) \u2013 white space fillColor ( str ) \u2013 The object fill color in a hex color code (#ffffff) opacity ( (int ) \u2013 The object's opacity, 0-100 strokeColor \u2013 The object stroke color in a hex color code (#ffffff) glass ( bool ) \u2013 Apply glass styling to the object shadow ( bool ) \u2013 Add a shadow to the object comic ( bool ) \u2013 Add comic styling to the object line_pattern ( str ) \u2013 The stroke style of the object. fontColor ( int ) \u2013 The color of the text in the object (#ffffff) fontFamily ( str ) \u2013 The typeface of the text in the object (see Draw.io for available fonts) fontSize ( int ) \u2013 The size of the text in the object in points align ( str ) \u2013 The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign ( str ) \u2013 The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity ( int ) \u2013 The opacity of the text in the object text_direction ( str ) \u2013 The direction to print the text ('vertical', 'horizontal') bold_font ( bool ) \u2013 Whether the text in the object should be bold italic_font ( bool ) \u2013 Whether the text in the object should be italic underline_font ( bool ) \u2013 Whether the text in the object should be underlined labelPosition ( str ) \u2013 The position of the object label ('left', 'center', or 'right') labelBackgroundColor ( str ) \u2013 The background color of the object label (#ffffff) labelBorderColor ( str ) \u2013 The border color of the object label (#ffffff) Source code in drawpyo/diagram/objects.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __init__ ( self , value = \"\" , size = ( 120 , 80 ), position = ( 0 , 0 ), ** kwargs ): \"\"\"A Object can be initialized with as many or as few of its styling attributes as is desired. Args: value (str, optional): The text to fill the object with. Defaults to \"\". size (tuple, optional): The size of the object in pixels, in (W, H). Defaults to (120, 80). position (tuple, optional): The position of the object in pixels, in (X, Y). Defaults to (0, 0). Keyword Args: template_object (Object, optional): Another object to copy the style_attributes from aspect rounded (bool, optional): Whether to round the corners of the shape whiteSpace (str, optional): white space fillColor (str, optional): The object fill color in a hex color code (#ffffff) opacity (int, optional): The object's opacity, 0-100 strokeColor: The object stroke color in a hex color code (#ffffff) glass (bool, optional): Apply glass styling to the object shadow (bool, optional): Add a shadow to the object comic (bool, optional): Add comic styling to the object line_pattern (str, optional): The stroke style of the object. fontColor (int, optional): The color of the text in the object (#ffffff) fontFamily (str, optional): The typeface of the text in the object (see Draw.io for available fonts) fontSize (int, optional): The size of the text in the object in points align (str, optional): The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign (str, optional): The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity (int, optional): The opacity of the text in the object text_direction (str, optional): The direction to print the text ('vertical', 'horizontal') bold_font (bool, optional): Whether the text in the object should be bold italic_font (bool, optional): Whether the text in the object should be italic underline_font (bool, optional): Whether the text in the object should be underlined labelPosition (str, optional): The position of the object label ('left', 'center', or 'right') labelBackgroundColor (str, optional): The background color of the object label (#ffffff) labelBorderColor (str, optional): The border color of the object label (#ffffff) \"\"\" super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" , \"whiteSpace\" , \"rounded\" , \"fillColor\" , \"fontColor\" , \"strokeColor\" , \"glass\" , \"shadow\" , \"comic\" , \"fontFamily\" , \"align\" , \"verticalAlign\" , \"labelPosition\" , \"labelBackgroundColor\" , \"labelBorderColor\" , \"fontSize\" , \"horizontal\" , \"textOpacity\" , \"opacity\" , \"dashed\" , ] # Geometry self . geometry = ObjGeometry ( parent_object = self ) self . position = kwargs . get ( \"position\" , ( 0 , 0 )) self . size = kwargs . get ( \"size\" , [ 120 , 80 ]) self . vertex = kwargs . get ( \"vertex\" , 1 ) # TODO enumerate to fixed self . aspect = kwargs . get ( \"aspect\" , None ) # Content self . value = value # Style self . baseStyle = kwargs . get ( \"baseStyle\" , None ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) self . whiteSpace = kwargs . get ( \"whiteSpace\" , \"wrap\" ) self . fillColor = kwargs . get ( \"fillColor\" , None ) self . fontColor = kwargs . get ( \"fontColor\" , None ) self . opacity = kwargs . get ( \"opacity\" , None ) self . strokeColor = kwargs . get ( \"strokeColor\" , None ) self . glass = kwargs . get ( \"glass\" , None ) self . shadow = kwargs . get ( \"shadow\" , None ) self . comic = kwargs . get ( \"comic\" , None ) self . line_pattern = kwargs . get ( \"line_pattern\" , \"solid\" ) self . fontFamily = kwargs . get ( \"fontFamily\" , None ) self . fontSize = kwargs . get ( \"fontSize\" , None ) self . align = kwargs . get ( \"align\" , None ) self . verticalAlign = kwargs . get ( \"verticalAlign\" , None ) self . labelPosition = kwargs . get ( \"labelPosition\" , None ) self . labelBackgroundColor = kwargs . get ( \"labelBackgroundColor\" , None ) self . labelBorderColor = kwargs . get ( \"labelBorderColor\" , None ) # These need to be enumerated self . text_direction = kwargs . get ( \"text_direction\" , None ) # This is actually horizontal. 0 means vertical text, 1 or not present # means horizontal self . textOpacity = kwargs . get ( \"textOpacity\" , None ) self . bold_font = kwargs . get ( \"bold_font\" , False ) self . italic_font = kwargs . get ( \"italic_font\" , False ) self . underline_font = kwargs . get ( \"underline_font\" , False ) self . out_edges = kwargs . get ( \"out_edges\" , []) self . in_edges = kwargs . get ( \"in_edges\" , []) self . xml_class = \"mxCell\" if \"template_object\" in kwargs : self . template_object = kwargs . get ( \"template_object\" ) self . _apply_style_from_template ( self . template_object ) add_in_edge ( edge ) Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object ending at this object Source code in drawpyo/diagram/objects.py 488 489 490 491 492 493 494 def add_in_edge ( self , edge ): \"\"\"Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . append ( edge ) add_out_edge ( edge ) Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object originating at this object Source code in drawpyo/diagram/objects.py 472 473 474 475 476 477 478 def add_out_edge ( self , edge ): \"\"\"Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . append ( edge ) create_from_library ( library , obj_name ) classmethod This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Returns: Object \u2013 An object with the style from the library Source code in drawpyo/diagram/objects.py 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @classmethod def create_from_library ( cls , library , obj_name ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = cls () new_obj . format_as_library_object ( library , obj_name ) return new_obj create_from_style_string ( style_string ) classmethod Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Parameters: style_string ( str ) \u2013 A Draw.io generated style string. Returns: Object \u2013 An object formatted with the style string Source code in drawpyo/diagram/objects.py 207 208 209 210 211 212 213 214 215 216 217 218 @classmethod def create_from_style_string ( cls , style_string ): \"\"\"Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Args: style_string (str): A Draw.io generated style string. Returns: Object: An object formatted with the style string \"\"\" cls . apply_style_from_string ( style_string ) return cls create_from_template_object ( template_object , value = None , position = None , page = None ) classmethod Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Parameters: template_object ( Object ) \u2013 Another drawpyo Object to use as a template value ( str , default: None ) \u2013 The text contents of the object. Defaults to None. position ( tuple , default: None ) \u2013 The position where the object should be placed. Defaults to (0, 0). page ( Page , default: None ) \u2013 The Page object to place the object on. Defaults to None. Returns: Object \u2013 The newly created object Source code in drawpyo/diagram/objects.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 @classmethod def create_from_template_object ( cls , template_object , value = None , position = None , page = None ): \"\"\"Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Args: template_object (Object): Another drawpyo Object to use as a template value (str, optional): The text contents of the object. Defaults to None. position (tuple, optional): The position where the object should be placed. Defaults to (0, 0). page (Page, optional): The Page object to place the object on. Defaults to None. Returns: Object: The newly created object \"\"\" new_obj = cls ( value = value , page = page , size = template_object . size , template_object = template_object ) if position is not None : new_obj . position = position if value is not None : new_obj . value = value return new_obj format_as_library_object ( library , obj_name ) This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Source code in drawpyo/diagram/objects.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def format_as_library_object ( self , library , obj_name ): \"\"\"This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate \"\"\" if type ( library ) == str : if library in base_libraries : library_dict = base_libraries [ library ] if obj_name in library_dict : obj_dict = library_dict [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Object {0} not in Library {1} \" . format ( obj_name , library ) ) else : raise ValueError ( \"Library {0} not in base_libraries\" . format ( library ) ) elif type ( library ) == dict : obj_dict = library [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Unparseable libary passed in.\" ) remove_in_edge ( edge ) Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object ending at this object Source code in drawpyo/diagram/objects.py 496 497 498 499 500 501 502 def remove_in_edge ( self , edge ): \"\"\"Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . remove ( edge ) remove_out_edge ( edge ) Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object originating at this object Source code in drawpyo/diagram/objects.py 480 481 482 483 484 485 486 def remove_out_edge ( self , edge ): \"\"\"Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . remove ( edge ) Group drawpyo.diagram.objects.Group This class allows objects to be grouped together. It then provides a number of geometry functions and properties to move the entire group around. Currently this object doesn't replicate any of the functionality of groups in the Draw.io app but it may be extended to have that capability in the future. Source code in drawpyo/diagram/objects.pyclass Group : \"\"\"This class allows objects to be grouped together. It then provides a number of geometry functions and properties to move the entire group around. Currently this object doesn't replicate any of the functionality of groups in the Draw.io app but it may be extended to have that capability in the future. \"\"\" def __init__ ( self , ** kwargs ): self . objects = kwargs . get ( \"objects\" , []) self . geometry = ObjGeometry () def add_object ( self , object ): \"\"\"Adds one or more objects to the group and updates the geometry of the group. Args: object (Object or list): Object or list of objects to be added to the group \"\"\" if not isinstance ( object , list ): object = [ object ] for o in object : if o not in self . objects : self . objects . append ( o ) self . update_geometry () def update_geometry ( self ): \"\"\"Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. \"\"\" self . geometry . x = self . left self . geometry . y = self . top self . geometry . width = self . width self . geometry . height = self . height ########################################################### # Passive properties ########################################################### @property def left ( self ): \"\"\"The leftmost X-coordinate of the objects in the group Returns: int: Left edge of the group \"\"\" return min ([ obj . geometry . x for obj in self . objects ]) @property def right ( self ): \"\"\"The rightmost X-coordinate of the objects in the group Returns: int: Right edge of the group \"\"\" return max ( [ obj . geometry . x + obj . geometry . width for obj in self . objects ] ) @property def top ( self ): \"\"\"The topmost Y-coordinate of the objects in the group Returns: int: Top edge of the group \"\"\" return min ([ obj . geometry . y for obj in self . objects ]) @property def bottom ( self ): \"\"\"The bottommost Y-coordinate of the objects in the group Returns: int: The bottom edge of the group \"\"\" return max ( [ obj . geometry . y + obj . geometry . height for obj in self . objects ] ) @property def width ( self ): \"\"\"The width of all the objects in the group Returns: int: Width of the group \"\"\" return self . right - self . left @property def height ( self ): \"\"\"The height of all the objects in the group Returns: int: Height of the group \"\"\" return self . bottom - self . top @property def size ( self ): \"\"\"The size of the group. Returns a tuple of ints, with the width and height. Returns: tuple: A tuple of ints (width, height) \"\"\" return ( self . width , self . height ) ########################################################### # Position properties ########################################################### @property def center_position ( self ): \"\"\"The center position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple: A tuple of ints (X, Y) \"\"\" return ( self . left + self . width / 2 , self . top + self . height / 2 ) @center_position . setter def center_position ( self , new_center ): current_center = ( self . left + self . width / 2 , self . top + self . height / 2 , ) delta_x = new_center [ 0 ] - current_center [ 0 ] delta_y = new_center [ 1 ] - current_center [ 1 ] for obj in self . objects : obj . position = ( obj . geometry . x + delta_x , obj . geometry . y + delta_y ) self . update_geometry () @property def position ( self ): \"\"\"The top left position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple: A tuple of ints (X, Y) \"\"\" return ( self . left , self . top ) @position . setter def position ( self , new_position ): current_position = ( self . left , self . top ) delta_x = new_position [ 0 ] - current_position [ 0 ] delta_y = new_position [ 1 ] - current_position [ 1 ] for obj in self . objects : obj . position = ( obj . geometry . x + delta_x , obj . geometry . y + delta_y ) self . update_geometry () bottom property The bottommost Y-coordinate of the objects in the group Returns: int \u2013 The bottom edge of the group center_position property writable The center position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple \u2013 A tuple of ints (X, Y) height property The height of all the objects in the group Returns: int \u2013 Height of the group left property The leftmost X-coordinate of the objects in the group Returns: int \u2013 Left edge of the group position property writable The top left position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple \u2013 A tuple of ints (X, Y) right property The rightmost X-coordinate of the objects in the group Returns: int \u2013 Right edge of the group size property The size of the group. Returns a tuple of ints, with the width and height. Returns: tuple \u2013 A tuple of ints (width, height) top property The topmost Y-coordinate of the objects in the group Returns: int \u2013 Top edge of the group width property The width of all the objects in the group Returns: int \u2013 Width of the group add_object ( object ) Adds one or more objects to the group and updates the geometry of the group. Parameters: object ( Object or list ) \u2013 Object or list of objects to be added to the group Source code in drawpyo/diagram/objects.py 563 564 565 566 567 568 569 570 571 572 573 574 def add_object ( self , object ): \"\"\"Adds one or more objects to the group and updates the geometry of the group. Args: object (Object or list): Object or list of objects to be added to the group \"\"\" if not isinstance ( object , list ): object = [ object ] for o in object : if o not in self . objects : self . objects . append ( o ) self . update_geometry () update_geometry () Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. Source code in drawpyo/diagram/objects.py 576 577 578 579 580 581 582 def update_geometry ( self ): \"\"\"Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. \"\"\" self . geometry . x = self . left self . geometry . y = self . top self . geometry . width = self . width self . geometry . height = self . height","title":"Objects"},{"location":"api/objects/#objects","text":"","title":"Objects"},{"location":"api/objects/#object-creation","text":"","title":"Object Creation"},{"location":"api/objects/#object_from_library","text":"","title":"object_from_library"},{"location":"api/objects/#drawpyo.diagram.objects.object_from_library","text":"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Returns: Object \u2013 An object with the style from the library Source code in drawpyo/diagram/objects.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def object_from_library ( library , obj_name , ** kwargs ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = Object ( ** kwargs ) new_obj . format_as_library_object ( library , obj_name ) return new_obj","title":"object_from_library"},{"location":"api/objects/#object","text":"","title":"Object"},{"location":"api/objects/#drawpyo.diagram.objects.Object","text":"Bases: DiagramBase The Object class is the base object for all shapes in Draw.io. More information about objects are in the Usage documents at Usage - Objects . Source code in drawpyo/diagram/objects.pyclass Object ( DiagramBase ): \"\"\" The Object class is the base object for all shapes in Draw.io. More information about objects are in the Usage documents at [Usage - Objects](../../usage/objects). \"\"\" ########################################################### # Initialization Functions ########################################################### def __init__ ( self , value = \"\" , size = ( 120 , 80 ), position = ( 0 , 0 ), ** kwargs ): \"\"\"A Object can be initialized with as many or as few of its styling attributes as is desired. Args: value (str, optional): The text to fill the object with. Defaults to \"\". size (tuple, optional): The size of the object in pixels, in (W, H). Defaults to (120, 80). position (tuple, optional): The position of the object in pixels, in (X, Y). Defaults to (0, 0). Keyword Args: template_object (Object, optional): Another object to copy the style_attributes from aspect rounded (bool, optional): Whether to round the corners of the shape whiteSpace (str, optional): white space fillColor (str, optional): The object fill color in a hex color code (#ffffff) opacity (int, optional): The object's opacity, 0-100 strokeColor: The object stroke color in a hex color code (#ffffff) glass (bool, optional): Apply glass styling to the object shadow (bool, optional): Add a shadow to the object comic (bool, optional): Add comic styling to the object line_pattern (str, optional): The stroke style of the object. fontColor (int, optional): The color of the text in the object (#ffffff) fontFamily (str, optional): The typeface of the text in the object (see Draw.io for available fonts) fontSize (int, optional): The size of the text in the object in points align (str, optional): The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign (str, optional): The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity (int, optional): The opacity of the text in the object text_direction (str, optional): The direction to print the text ('vertical', 'horizontal') bold_font (bool, optional): Whether the text in the object should be bold italic_font (bool, optional): Whether the text in the object should be italic underline_font (bool, optional): Whether the text in the object should be underlined labelPosition (str, optional): The position of the object label ('left', 'center', or 'right') labelBackgroundColor (str, optional): The background color of the object label (#ffffff) labelBorderColor (str, optional): The border color of the object label (#ffffff) \"\"\" super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" , \"whiteSpace\" , \"rounded\" , \"fillColor\" , \"fontColor\" , \"strokeColor\" , \"glass\" , \"shadow\" , \"comic\" , \"fontFamily\" , \"align\" , \"verticalAlign\" , \"labelPosition\" , \"labelBackgroundColor\" , \"labelBorderColor\" , \"fontSize\" , \"horizontal\" , \"textOpacity\" , \"opacity\" , \"dashed\" , ] # Geometry self . geometry = ObjGeometry ( parent_object = self ) self . position = kwargs . get ( \"position\" , ( 0 , 0 )) self . size = kwargs . get ( \"size\" , [ 120 , 80 ]) self . vertex = kwargs . get ( \"vertex\" , 1 ) # TODO enumerate to fixed self . aspect = kwargs . get ( \"aspect\" , None ) # Content self . value = value # Style self . baseStyle = kwargs . get ( \"baseStyle\" , None ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) self . whiteSpace = kwargs . get ( \"whiteSpace\" , \"wrap\" ) self . fillColor = kwargs . get ( \"fillColor\" , None ) self . fontColor = kwargs . get ( \"fontColor\" , None ) self . opacity = kwargs . get ( \"opacity\" , None ) self . strokeColor = kwargs . get ( \"strokeColor\" , None ) self . glass = kwargs . get ( \"glass\" , None ) self . shadow = kwargs . get ( \"shadow\" , None ) self . comic = kwargs . get ( \"comic\" , None ) self . line_pattern = kwargs . get ( \"line_pattern\" , \"solid\" ) self . fontFamily = kwargs . get ( \"fontFamily\" , None ) self . fontSize = kwargs . get ( \"fontSize\" , None ) self . align = kwargs . get ( \"align\" , None ) self . verticalAlign = kwargs . get ( \"verticalAlign\" , None ) self . labelPosition = kwargs . get ( \"labelPosition\" , None ) self . labelBackgroundColor = kwargs . get ( \"labelBackgroundColor\" , None ) self . labelBorderColor = kwargs . get ( \"labelBorderColor\" , None ) # These need to be enumerated self . text_direction = kwargs . get ( \"text_direction\" , None ) # This is actually horizontal. 0 means vertical text, 1 or not present # means horizontal self . textOpacity = kwargs . get ( \"textOpacity\" , None ) self . bold_font = kwargs . get ( \"bold_font\" , False ) self . italic_font = kwargs . get ( \"italic_font\" , False ) self . underline_font = kwargs . get ( \"underline_font\" , False ) self . out_edges = kwargs . get ( \"out_edges\" , []) self . in_edges = kwargs . get ( \"in_edges\" , []) self . xml_class = \"mxCell\" if \"template_object\" in kwargs : self . template_object = kwargs . get ( \"template_object\" ) self . _apply_style_from_template ( self . template_object ) def __repr__ ( self ): if self . value != \"\" : name_str = \" {0} object with value {1} \" . format ( self . __class__ . __name__ , self . value ) else : name_str = \" {0} object\" . format ( self . __class__ . __name__ ) return name_str def __str_ ( self ): return self . __repr__ () @classmethod def create_from_template_object ( cls , template_object , value = None , position = None , page = None ): \"\"\"Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Args: template_object (Object): Another drawpyo Object to use as a template value (str, optional): The text contents of the object. Defaults to None. position (tuple, optional): The position where the object should be placed. Defaults to (0, 0). page (Page, optional): The Page object to place the object on. Defaults to None. Returns: Object: The newly created object \"\"\" new_obj = cls ( value = value , page = page , size = template_object . size , template_object = template_object ) if position is not None : new_obj . position = position if value is not None : new_obj . value = value return new_obj @classmethod def create_from_style_string ( cls , style_string ): \"\"\"Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Args: style_string (str): A Draw.io generated style string. Returns: Object: An object formatted with the style string \"\"\" cls . apply_style_from_string ( style_string ) return cls @classmethod def create_from_library ( cls , library , obj_name ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = cls () new_obj . format_as_library_object ( library , obj_name ) return new_obj def format_as_library_object ( self , library , obj_name ): \"\"\"This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate \"\"\" if type ( library ) == str : if library in base_libraries : library_dict = base_libraries [ library ] if obj_name in library_dict : obj_dict = library_dict [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Object {0} not in Library {1} \" . format ( obj_name , library ) ) else : raise ValueError ( \"Library {0} not in base_libraries\" . format ( library ) ) elif type ( library ) == dict : obj_dict = library [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Unparseable libary passed in.\" ) @property def attributes ( self ): return { \"id\" : self . id , \"value\" : self . value , \"style\" : self . style , \"vertex\" : self . vertex , \"parent\" : self . xml_parent_id , } ########################################################### # Style templates ########################################################### @property def line_styles ( self ): return line_styles @property def text_directions ( self ): return text_directions @property def container ( self ): return container ########################################################### # Style properties ########################################################### # The direction of the text is encoded as 'horizontal' in Draw.io. This is # unintuitive so I provided a text_direction alternate syntax. @property def horizontal ( self ): return text_directions [ self . _text_direction ] @horizontal . setter def horizontal ( self , value ): if value in text_directions_inv . keys (): self . _text_direction = text_directions_inv [ value ] else : raise ValueError ( \" {0} is not an allowed value of horizontal\" . format ( value ) ) @property def text_direction ( self ): return self . _text_direction @text_direction . setter def text_direction ( self , value ): if value in text_directions . keys (): self . _text_direction = value else : raise ValueError ( \" {0} is not an allowed value of text_direction\" . format ( value ) ) @property def font_style ( self ): '''The font_style is a numeric format that corresponds to a combination of three other attributes: bold_font, italic_font, and underline_font. Any combination of them can be true. ''' bld = self . bold_font ita = self . italic_font unl = self . underline_font # 0 = normal # 1 = bold # 2 = italic # 3 = bold and italic # 4 = underline # 5 = bold and underlined # 6 = italic and underlined # 7 = bolt, italic, and underlined if not bld and not ita and not unl : return 0 elif bld and not ita and not unl : return 1 elif not bld and ita and not unl : return 2 elif bld and ita and not unl : return 3 elif not bld and not ita and unl : return 4 elif bld and not ita and unl : return 5 elif not bld and ita and unl : return 6 elif bld and ita and unl : return 7 @property def line_pattern ( self ): \"\"\"Two properties are enumerated together into line_pattern: dashed and dashPattern. line_pattern simplifies this with an external database that contains the dropdown options from the Draw.io app then outputs the correct combination of dashed and dashPattern. However in some cases dashed and dashpattern need to be set individually, such as when formatting from a style string. In that case, the setters for those two attributes will disable the other. Returns: str: The line style \"\"\" return self . _line_pattern @line_pattern . setter def line_pattern ( self , value ): if value in line_styles . keys (): self . _line_pattern = value else : raise ValueError ( \" {0} is not an allowed value of line_pattern\" . format ( value ) ) @property def dashed ( self ): \"\"\"This is one of the properties that defines the line style. Along with dashPattern, it can be overriden by setting line_pattern or set directly. Returns: str: Whether the object stroke is dashed. \"\"\" if self . _line_pattern is None : return self . _dashed else : return line_styles [ self . _line_pattern ] @dashed . setter def dashed ( self , value ): self . _line_pattern = None self . _dashed = value @property def dashPattern ( self ): \"\"\"This is one of the properties that defines the line style. Along with dashed, it can be overriden by setting line_pattern or set directly. Returns: str: What style the object stroke is dashed with. \"\"\" if self . _line_pattern is None : return self . _dashed else : return line_styles [ self . _line_pattern ] @dashPattern . setter def dashPattern ( self , value ): self . _line_pattern = None self . _dashPattern = value ########################################################### # Geometry properties ########################################################### # Position property @property def position ( self ): \"\"\"The position of the object on the page. This is the top left corner. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple: A tuple of ints describing the top left corner position of the object \"\"\" return ( self . geometry . x , self . geometry . y ) @position . setter def position ( self , value ): self . geometry . x = value [ 0 ] self . geometry . y = value [ 1 ] @property def center_position ( self ): \"\"\"The position of the object on the page. This is the center of the object. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple: A tuple of ints describing the center position of the object \"\"\" x = self . geometry . x + self . geometry . width / 2 y = self . geometry . y + self . geometry . height / 2 return ( x , y ) @center_position . setter def center_position ( self , position ): self . geometry . x = position [ 0 ] - self . geometry . width / 2 self . geometry . y = position [ 1 ] - self . geometry . height / 2 # Size property @property def size ( self ): \"\"\"The size of the object. It's set with a tuple of ints, width and height respectively. (width, height) Returns: tuple: A tuple of ints describing the size of the object \"\"\" return ( self . geometry . width , self . geometry . height ) @size . setter def size ( self , value ): self . geometry . width = value [ 0 ] self . geometry . height = value [ 1 ] ########################################################### # Edge Tracking ########################################################### def add_out_edge ( self , edge ): \"\"\"Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . append ( edge ) def remove_out_edge ( self , edge ): \"\"\"Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . remove ( edge ) def add_in_edge ( self , edge ): \"\"\"Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . append ( edge ) def remove_in_edge ( self , edge ): \"\"\"Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . remove ( edge ) ########################################################### # XML Generation ########################################################### @property def xml ( self ): \"\"\" Returns the XML object for the Object: the opening tag with the style attributes, the value, and the closing tag. Example: <class_name attribute_name=attribute_value>Text in object</class_name> Returns: str: A single XML tag containing the object name, style attributes, and a closer. \"\"\" tag = ( self . xml_open_tag + \" \\n \" + self . geometry . xml + \" \\n \" + self . xml_close_tag ) return tag","title":"Object"},{"location":"api/objects/#drawpyo.diagram.objects.Object.center_position","text":"The position of the object on the page. This is the center of the object. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple \u2013 A tuple of ints describing the center position of the object","title":"center_position"},{"location":"api/objects/#drawpyo.diagram.objects.Object.dashPattern","text":"This is one of the properties that defines the line style. Along with dashed, it can be overriden by setting line_pattern or set directly. Returns: str \u2013 What style the object stroke is dashed with.","title":"dashPattern"},{"location":"api/objects/#drawpyo.diagram.objects.Object.dashed","text":"This is one of the properties that defines the line style. Along with dashPattern, it can be overriden by setting line_pattern or set directly. Returns: str \u2013 Whether the object stroke is dashed.","title":"dashed"},{"location":"api/objects/#drawpyo.diagram.objects.Object.font_style","text":"The font_style is a numeric format that corresponds to a combination of three other attributes: bold_font, italic_font, and underline_font. Any combination of them can be true.","title":"font_style"},{"location":"api/objects/#drawpyo.diagram.objects.Object.line_pattern","text":"Two properties are enumerated together into line_pattern: dashed and dashPattern. line_pattern simplifies this with an external database that contains the dropdown options from the Draw.io app then outputs the correct combination of dashed and dashPattern. However in some cases dashed and dashpattern need to be set individually, such as when formatting from a style string. In that case, the setters for those two attributes will disable the other. Returns: str \u2013 The line style","title":"line_pattern"},{"location":"api/objects/#drawpyo.diagram.objects.Object.position","text":"The position of the object on the page. This is the top left corner. It's set with a tuple of ints, X and Y respectively. (X, Y) Returns: tuple \u2013 A tuple of ints describing the top left corner position of the object","title":"position"},{"location":"api/objects/#drawpyo.diagram.objects.Object.size","text":"The size of the object. It's set with a tuple of ints, width and height respectively. (width, height) Returns: tuple \u2013 A tuple of ints describing the size of the object","title":"size"},{"location":"api/objects/#drawpyo.diagram.objects.Object.xml","text":"Returns the XML object for the Object: the opening tag with the style attributes, the value, and the closing tag. Example: Text in object Returns: str \u2013 A single XML tag containing the object name, style attributes, and a closer.","title":"xml"},{"location":"api/objects/#drawpyo.diagram.objects.Object.__init__","text":"A Object can be initialized with as many or as few of its styling attributes as is desired. Parameters: value ( str , default: '' ) \u2013 The text to fill the object with. Defaults to \"\". size ( tuple , default: (120, 80) ) \u2013 The size of the object in pixels, in (W, H). Defaults to (120, 80). position ( tuple , default: (0, 0) ) \u2013 The position of the object in pixels, in (X, Y). Defaults to (0, 0). template_object ( Object ) \u2013 Another object to copy the style_attributes from rounded ( bool ) \u2013 Whether to round the corners of the shape whiteSpace ( str ) \u2013 white space fillColor ( str ) \u2013 The object fill color in a hex color code (#ffffff) opacity ( (int ) \u2013 The object's opacity, 0-100 strokeColor \u2013 The object stroke color in a hex color code (#ffffff) glass ( bool ) \u2013 Apply glass styling to the object shadow ( bool ) \u2013 Add a shadow to the object comic ( bool ) \u2013 Add comic styling to the object line_pattern ( str ) \u2013 The stroke style of the object. fontColor ( int ) \u2013 The color of the text in the object (#ffffff) fontFamily ( str ) \u2013 The typeface of the text in the object (see Draw.io for available fonts) fontSize ( int ) \u2013 The size of the text in the object in points align ( str ) \u2013 The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign ( str ) \u2013 The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity ( int ) \u2013 The opacity of the text in the object text_direction ( str ) \u2013 The direction to print the text ('vertical', 'horizontal') bold_font ( bool ) \u2013 Whether the text in the object should be bold italic_font ( bool ) \u2013 Whether the text in the object should be italic underline_font ( bool ) \u2013 Whether the text in the object should be underlined labelPosition ( str ) \u2013 The position of the object label ('left', 'center', or 'right') labelBackgroundColor ( str ) \u2013 The background color of the object label (#ffffff) labelBorderColor ( str ) \u2013 The border color of the object label (#ffffff) Source code in drawpyo/diagram/objects.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __init__ ( self , value = \"\" , size = ( 120 , 80 ), position = ( 0 , 0 ), ** kwargs ): \"\"\"A Object can be initialized with as many or as few of its styling attributes as is desired. Args: value (str, optional): The text to fill the object with. Defaults to \"\". size (tuple, optional): The size of the object in pixels, in (W, H). Defaults to (120, 80). position (tuple, optional): The position of the object in pixels, in (X, Y). Defaults to (0, 0). Keyword Args: template_object (Object, optional): Another object to copy the style_attributes from aspect rounded (bool, optional): Whether to round the corners of the shape whiteSpace (str, optional): white space fillColor (str, optional): The object fill color in a hex color code (#ffffff) opacity (int, optional): The object's opacity, 0-100 strokeColor: The object stroke color in a hex color code (#ffffff) glass (bool, optional): Apply glass styling to the object shadow (bool, optional): Add a shadow to the object comic (bool, optional): Add comic styling to the object line_pattern (str, optional): The stroke style of the object. fontColor (int, optional): The color of the text in the object (#ffffff) fontFamily (str, optional): The typeface of the text in the object (see Draw.io for available fonts) fontSize (int, optional): The size of the text in the object in points align (str, optional): The horizontal alignment of the text in the object ('left', 'center', or 'right') verticalAlign (str, optional): The vertical alignment of the text in the object ('top', 'middle', 'bottom') textOpacity (int, optional): The opacity of the text in the object text_direction (str, optional): The direction to print the text ('vertical', 'horizontal') bold_font (bool, optional): Whether the text in the object should be bold italic_font (bool, optional): Whether the text in the object should be italic underline_font (bool, optional): Whether the text in the object should be underlined labelPosition (str, optional): The position of the object label ('left', 'center', or 'right') labelBackgroundColor (str, optional): The background color of the object label (#ffffff) labelBorderColor (str, optional): The border color of the object label (#ffffff) \"\"\" super () . __init__ ( ** kwargs ) self . _style_attributes = [ \"html\" , \"whiteSpace\" , \"rounded\" , \"fillColor\" , \"fontColor\" , \"strokeColor\" , \"glass\" , \"shadow\" , \"comic\" , \"fontFamily\" , \"align\" , \"verticalAlign\" , \"labelPosition\" , \"labelBackgroundColor\" , \"labelBorderColor\" , \"fontSize\" , \"horizontal\" , \"textOpacity\" , \"opacity\" , \"dashed\" , ] # Geometry self . geometry = ObjGeometry ( parent_object = self ) self . position = kwargs . get ( \"position\" , ( 0 , 0 )) self . size = kwargs . get ( \"size\" , [ 120 , 80 ]) self . vertex = kwargs . get ( \"vertex\" , 1 ) # TODO enumerate to fixed self . aspect = kwargs . get ( \"aspect\" , None ) # Content self . value = value # Style self . baseStyle = kwargs . get ( \"baseStyle\" , None ) self . html = kwargs . get ( \"html\" , 1 ) self . rounded = kwargs . get ( \"rounded\" , 0 ) self . whiteSpace = kwargs . get ( \"whiteSpace\" , \"wrap\" ) self . fillColor = kwargs . get ( \"fillColor\" , None ) self . fontColor = kwargs . get ( \"fontColor\" , None ) self . opacity = kwargs . get ( \"opacity\" , None ) self . strokeColor = kwargs . get ( \"strokeColor\" , None ) self . glass = kwargs . get ( \"glass\" , None ) self . shadow = kwargs . get ( \"shadow\" , None ) self . comic = kwargs . get ( \"comic\" , None ) self . line_pattern = kwargs . get ( \"line_pattern\" , \"solid\" ) self . fontFamily = kwargs . get ( \"fontFamily\" , None ) self . fontSize = kwargs . get ( \"fontSize\" , None ) self . align = kwargs . get ( \"align\" , None ) self . verticalAlign = kwargs . get ( \"verticalAlign\" , None ) self . labelPosition = kwargs . get ( \"labelPosition\" , None ) self . labelBackgroundColor = kwargs . get ( \"labelBackgroundColor\" , None ) self . labelBorderColor = kwargs . get ( \"labelBorderColor\" , None ) # These need to be enumerated self . text_direction = kwargs . get ( \"text_direction\" , None ) # This is actually horizontal. 0 means vertical text, 1 or not present # means horizontal self . textOpacity = kwargs . get ( \"textOpacity\" , None ) self . bold_font = kwargs . get ( \"bold_font\" , False ) self . italic_font = kwargs . get ( \"italic_font\" , False ) self . underline_font = kwargs . get ( \"underline_font\" , False ) self . out_edges = kwargs . get ( \"out_edges\" , []) self . in_edges = kwargs . get ( \"in_edges\" , []) self . xml_class = \"mxCell\" if \"template_object\" in kwargs : self . template_object = kwargs . get ( \"template_object\" ) self . _apply_style_from_template ( self . template_object )","title":"__init__"},{"location":"api/objects/#drawpyo.diagram.objects.Object.add_in_edge","text":"Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object ending at this object Source code in drawpyo/diagram/objects.py 488 489 490 491 492 493 494 def add_in_edge ( self , edge ): \"\"\"Add an edge into the object. If an edge is created with this object set as the target this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . append ( edge )","title":"add_in_edge"},{"location":"api/objects/#drawpyo.diagram.objects.Object.add_out_edge","text":"Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object originating at this object Source code in drawpyo/diagram/objects.py 472 473 474 475 476 477 478 def add_out_edge ( self , edge ): \"\"\"Add an edge out of the object. If an edge is created with this object set as the source this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . append ( edge )","title":"add_out_edge"},{"location":"api/objects/#drawpyo.diagram.objects.Object.create_from_library","text":"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Returns: Object \u2013 An object with the style from the library Source code in drawpyo/diagram/objects.py 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @classmethod def create_from_library ( cls , library , obj_name ): \"\"\"This function generates a Object from a library. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Any keyword arguments that can be passed in to a Object creation can be passed into this function and it will format the base object. However, the styling in the library will overwrite that formatting. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate Returns: Object: An object with the style from the library \"\"\" new_obj = cls () new_obj . format_as_library_object ( library , obj_name ) return new_obj","title":"create_from_library"},{"location":"api/objects/#drawpyo.diagram.objects.Object.create_from_style_string","text":"Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Parameters: style_string ( str ) \u2013 A Draw.io generated style string. Returns: Object \u2013 An object formatted with the style string Source code in drawpyo/diagram/objects.py 207 208 209 210 211 212 213 214 215 216 217 218 @classmethod def create_from_style_string ( cls , style_string ): \"\"\"Objects can be instantiated from a style string. These strings are most easily found in the Draw.io app, by styling an object as desired then right-clicking and selecting \"Edit Style\". Copying that text into this function will generate an object styled the same. Args: style_string (str): A Draw.io generated style string. Returns: Object: An object formatted with the style string \"\"\" cls . apply_style_from_string ( style_string ) return cls","title":"create_from_style_string"},{"location":"api/objects/#drawpyo.diagram.objects.Object.create_from_template_object","text":"Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Parameters: template_object ( Object ) \u2013 Another drawpyo Object to use as a template value ( str , default: None ) \u2013 The text contents of the object. Defaults to None. position ( tuple , default: None ) \u2013 The position where the object should be placed. Defaults to (0, 0). page ( Page , default: None ) \u2013 The Page object to place the object on. Defaults to None. Returns: Object \u2013 The newly created object Source code in drawpyo/diagram/objects.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 @classmethod def create_from_template_object ( cls , template_object , value = None , position = None , page = None ): \"\"\"Object can be instantiated from another object. This will initialize the Object with the same formatting, then set a new position and value. Args: template_object (Object): Another drawpyo Object to use as a template value (str, optional): The text contents of the object. Defaults to None. position (tuple, optional): The position where the object should be placed. Defaults to (0, 0). page (Page, optional): The Page object to place the object on. Defaults to None. Returns: Object: The newly created object \"\"\" new_obj = cls ( value = value , page = page , size = template_object . size , template_object = template_object ) if position is not None : new_obj . position = position if value is not None : new_obj . value = value return new_obj","title":"create_from_template_object"},{"location":"api/objects/#drawpyo.diagram.objects.Object.format_as_library_object","text":"This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Parameters: library ( str or dict ) \u2013 The library containing the object obj_name ( str ) \u2013 The name of the object in the library to generate Source code in drawpyo/diagram/objects.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def format_as_library_object ( self , library , obj_name ): \"\"\"This function applies the style from a library to an existing object. The library can either be custom imported from a TOML or the name of one of the built-in Draw.io libraries. Args: library (str or dict): The library containing the object obj_name (str): The name of the object in the library to generate \"\"\" if type ( library ) == str : if library in base_libraries : library_dict = base_libraries [ library ] if obj_name in library_dict : obj_dict = library_dict [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Object {0} not in Library {1} \" . format ( obj_name , library ) ) else : raise ValueError ( \"Library {0} not in base_libraries\" . format ( library ) ) elif type ( library ) == dict : obj_dict = library [ obj_name ] self . apply_attribute_dict ( obj_dict ) else : raise ValueError ( \"Unparseable libary passed in.\" )","title":"format_as_library_object"},{"location":"api/objects/#drawpyo.diagram.objects.Object.remove_in_edge","text":"Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object ending at this object Source code in drawpyo/diagram/objects.py 496 497 498 499 500 501 502 def remove_in_edge ( self , edge ): \"\"\"Remove an edge into the object. If an edge linked to this object has the target changed or removed this function will be called automatically. Args: edge (Edge): An Edge object ending at this object \"\"\" self . in_edges . remove ( edge )","title":"remove_in_edge"},{"location":"api/objects/#drawpyo.diagram.objects.Object.remove_out_edge","text":"Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Parameters: edge ( Edge ) \u2013 An Edge object originating at this object Source code in drawpyo/diagram/objects.py 480 481 482 483 484 485 486 def remove_out_edge ( self , edge ): \"\"\"Remove an edge out of the object. If an edge linked to this object has the source changed or removed this function will be called automatically. Args: edge (Edge): An Edge object originating at this object \"\"\" self . out_edges . remove ( edge )","title":"remove_out_edge"},{"location":"api/objects/#group","text":"","title":"Group"},{"location":"api/objects/#drawpyo.diagram.objects.Group","text":"This class allows objects to be grouped together. It then provides a number of geometry functions and properties to move the entire group around. Currently this object doesn't replicate any of the functionality of groups in the Draw.io app but it may be extended to have that capability in the future. Source code in drawpyo/diagram/objects.pyclass Group : \"\"\"This class allows objects to be grouped together. It then provides a number of geometry functions and properties to move the entire group around. Currently this object doesn't replicate any of the functionality of groups in the Draw.io app but it may be extended to have that capability in the future. \"\"\" def __init__ ( self , ** kwargs ): self . objects = kwargs . get ( \"objects\" , []) self . geometry = ObjGeometry () def add_object ( self , object ): \"\"\"Adds one or more objects to the group and updates the geometry of the group. Args: object (Object or list): Object or list of objects to be added to the group \"\"\" if not isinstance ( object , list ): object = [ object ] for o in object : if o not in self . objects : self . objects . append ( o ) self . update_geometry () def update_geometry ( self ): \"\"\"Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. \"\"\" self . geometry . x = self . left self . geometry . y = self . top self . geometry . width = self . width self . geometry . height = self . height ########################################################### # Passive properties ########################################################### @property def left ( self ): \"\"\"The leftmost X-coordinate of the objects in the group Returns: int: Left edge of the group \"\"\" return min ([ obj . geometry . x for obj in self . objects ]) @property def right ( self ): \"\"\"The rightmost X-coordinate of the objects in the group Returns: int: Right edge of the group \"\"\" return max ( [ obj . geometry . x + obj . geometry . width for obj in self . objects ] ) @property def top ( self ): \"\"\"The topmost Y-coordinate of the objects in the group Returns: int: Top edge of the group \"\"\" return min ([ obj . geometry . y for obj in self . objects ]) @property def bottom ( self ): \"\"\"The bottommost Y-coordinate of the objects in the group Returns: int: The bottom edge of the group \"\"\" return max ( [ obj . geometry . y + obj . geometry . height for obj in self . objects ] ) @property def width ( self ): \"\"\"The width of all the objects in the group Returns: int: Width of the group \"\"\" return self . right - self . left @property def height ( self ): \"\"\"The height of all the objects in the group Returns: int: Height of the group \"\"\" return self . bottom - self . top @property def size ( self ): \"\"\"The size of the group. Returns a tuple of ints, with the width and height. Returns: tuple: A tuple of ints (width, height) \"\"\" return ( self . width , self . height ) ########################################################### # Position properties ########################################################### @property def center_position ( self ): \"\"\"The center position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple: A tuple of ints (X, Y) \"\"\" return ( self . left + self . width / 2 , self . top + self . height / 2 ) @center_position . setter def center_position ( self , new_center ): current_center = ( self . left + self . width / 2 , self . top + self . height / 2 , ) delta_x = new_center [ 0 ] - current_center [ 0 ] delta_y = new_center [ 1 ] - current_center [ 1 ] for obj in self . objects : obj . position = ( obj . geometry . x + delta_x , obj . geometry . y + delta_y ) self . update_geometry () @property def position ( self ): \"\"\"The top left position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple: A tuple of ints (X, Y) \"\"\" return ( self . left , self . top ) @position . setter def position ( self , new_position ): current_position = ( self . left , self . top ) delta_x = new_position [ 0 ] - current_position [ 0 ] delta_y = new_position [ 1 ] - current_position [ 1 ] for obj in self . objects : obj . position = ( obj . geometry . x + delta_x , obj . geometry . y + delta_y ) self . update_geometry ()","title":"Group"},{"location":"api/objects/#drawpyo.diagram.objects.Group.bottom","text":"The bottommost Y-coordinate of the objects in the group Returns: int \u2013 The bottom edge of the group","title":"bottom"},{"location":"api/objects/#drawpyo.diagram.objects.Group.center_position","text":"The center position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple \u2013 A tuple of ints (X, Y)","title":"center_position"},{"location":"api/objects/#drawpyo.diagram.objects.Group.height","text":"The height of all the objects in the group Returns: int \u2013 Height of the group","title":"height"},{"location":"api/objects/#drawpyo.diagram.objects.Group.left","text":"The leftmost X-coordinate of the objects in the group Returns: int \u2013 Left edge of the group","title":"left"},{"location":"api/objects/#drawpyo.diagram.objects.Group.position","text":"The top left position of the group. Returns a tuple of ints, with the X and Y coordinate. When this property is set, the coordinates of every object in the group are updated. Returns: tuple \u2013 A tuple of ints (X, Y)","title":"position"},{"location":"api/objects/#drawpyo.diagram.objects.Group.right","text":"The rightmost X-coordinate of the objects in the group Returns: int \u2013 Right edge of the group","title":"right"},{"location":"api/objects/#drawpyo.diagram.objects.Group.size","text":"The size of the group. Returns a tuple of ints, with the width and height. Returns: tuple \u2013 A tuple of ints (width, height)","title":"size"},{"location":"api/objects/#drawpyo.diagram.objects.Group.top","text":"The topmost Y-coordinate of the objects in the group Returns: int \u2013 Top edge of the group","title":"top"},{"location":"api/objects/#drawpyo.diagram.objects.Group.width","text":"The width of all the objects in the group Returns: int \u2013 Width of the group","title":"width"},{"location":"api/objects/#drawpyo.diagram.objects.Group.add_object","text":"Adds one or more objects to the group and updates the geometry of the group. Parameters: object ( Object or list ) \u2013 Object or list of objects to be added to the group Source code in drawpyo/diagram/objects.py 563 564 565 566 567 568 569 570 571 572 573 574 def add_object ( self , object ): \"\"\"Adds one or more objects to the group and updates the geometry of the group. Args: object (Object or list): Object or list of objects to be added to the group \"\"\" if not isinstance ( object , list ): object = [ object ] for o in object : if o not in self . objects : self . objects . append ( o ) self . update_geometry ()","title":"add_object"},{"location":"api/objects/#drawpyo.diagram.objects.Group.update_geometry","text":"Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. Source code in drawpyo/diagram/objects.py 576 577 578 579 580 581 582 def update_geometry ( self ): \"\"\"Update the geometry of the group. This includes the left and top coordinates and the width and height of the entire group. \"\"\" self . geometry . x = self . left self . geometry . y = self . top self . geometry . width = self . width self . geometry . height = self . height","title":"update_geometry"},{"location":"api/page/","text":"Page drawpyo.page.Page This class defines a page in a Draw.io document. It contains a list of objects and a reference to the File it's in as well as formatting attributes. Source code in drawpyo/page.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class Page : \"\"\" This class defines a page in a Draw.io document. It contains a list of objects and a reference to the File it's in as well as formatting attributes. \"\"\" def __init__ ( self , file = None , ** kwargs ): super () . __init__ () self . id = id ( self ) self . file = file self . objects = kwargs . get ( \"objects\" , []) # There are two empty top level objects in every Draw.io diagram self . objects . append ( XMLBase ( id = 0 , xml_class = \"mxCell\" )) self . objects . append ( XMLBase ( id = 1 , xml_class = \"mxCell\" , xml_parent = 0 )) # Properties if self . file is not None : page_num = len ( self . file . pages ) else : page_num = 1 self . name = kwargs . get ( \"name\" , f \"Page- { page_num } \" ) self . page_num = kwargs . get ( \"page_num\" , page_num ) self . dx = kwargs . get ( \"dx\" , 2037 ) self . dy = kwargs . get ( \"dy\" , 830 ) self . grid = kwargs . get ( \"grid\" , 1 ) self . grid_size = kwargs . get ( \"grid_size\" , 10 ) self . guides = kwargs . get ( \"guides\" , 1 ) self . tooltips = kwargs . get ( \"tooltips\" , 1 ) self . connect = kwargs . get ( \"connect\" , 1 ) self . arrows = kwargs . get ( \"arrows\" , 1 ) self . fold = kwargs . get ( \"fold\" , 1 ) self . scale = kwargs . get ( \"scale\" , 1 ) self . width = kwargs . get ( \"width\" , 850 ) self . height = kwargs . get ( \"height\" , 1100 ) self . math = kwargs . get ( \"math\" , 0 ) self . shadow = kwargs . get ( \"shadow\" , 0 ) # In the Draw.io file format, each page is actually three nested XML # tags. These are defined as XMLBase subclasses below self . diagram = Diagram ( name = self . name ) self . mxGraph = mxGraph ( page = self ) self . root = Root () def __repr__ ( self ): return f \"drawpyo Page - { self . name } \" def remove ( self ): \"\"\"This function removes the Page from its linked File object then deletes itself. \"\"\" if self . file is not None : self . file . remove_page ( self ) del self def add_object ( self , obj ): if obj not in self . objects : self . objects . append ( obj ) def remove_object ( self , obj ): self . objects . remove ( obj ) @property def file ( self ): return self . _file @file . setter def file ( self , f ): f . add_page ( self ) self . _file = f @file . deleter def file ( self ): self . _file . remove_page ( self ) self . _file = None ########################################################### # XML Generation ########################################################### @property def xml ( self ): xml_string = self . xml_open_tag for obj in self . objects : xml_string = xml_string + \" \\n \" + obj . xml xml_string = xml_string + \" \\n \" + self . xml_close_tag return xml_string @property def xml_open_tag ( self ): tag = ( self . diagram . xml_open_tag + \" \\n \" + self . mxGraph . xml_open_tag + \" \\n \" + self . root . xml_open_tag ) return tag @property def xml_close_tag ( self ): tag = ( \" \" + self . root . xml_close_tag + \" \\n \" + self . mxGraph . xml_close_tag + \" \\n \" + self . diagram . xml_close_tag ) return tag remove () This function removes the Page from its linked File object then deletes itself. Source code in drawpyo/page.py 51 52 53 54 55 56 def remove ( self ): \"\"\"This function removes the Page from its linked File object then deletes itself. \"\"\" if self . file is not None : self . file . remove_page ( self ) del self","title":"Page"},{"location":"api/page/#page","text":"","title":"Page"},{"location":"api/page/#drawpyo.page.Page","text":"This class defines a page in a Draw.io document. It contains a list of objects and a reference to the File it's in as well as formatting attributes. Source code in drawpyo/page.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class Page : \"\"\" This class defines a page in a Draw.io document. It contains a list of objects and a reference to the File it's in as well as formatting attributes. \"\"\" def __init__ ( self , file = None , ** kwargs ): super () . __init__ () self . id = id ( self ) self . file = file self . objects = kwargs . get ( \"objects\" , []) # There are two empty top level objects in every Draw.io diagram self . objects . append ( XMLBase ( id = 0 , xml_class = \"mxCell\" )) self . objects . append ( XMLBase ( id = 1 , xml_class = \"mxCell\" , xml_parent = 0 )) # Properties if self . file is not None : page_num = len ( self . file . pages ) else : page_num = 1 self . name = kwargs . get ( \"name\" , f \"Page- { page_num } \" ) self . page_num = kwargs . get ( \"page_num\" , page_num ) self . dx = kwargs . get ( \"dx\" , 2037 ) self . dy = kwargs . get ( \"dy\" , 830 ) self . grid = kwargs . get ( \"grid\" , 1 ) self . grid_size = kwargs . get ( \"grid_size\" , 10 ) self . guides = kwargs . get ( \"guides\" , 1 ) self . tooltips = kwargs . get ( \"tooltips\" , 1 ) self . connect = kwargs . get ( \"connect\" , 1 ) self . arrows = kwargs . get ( \"arrows\" , 1 ) self . fold = kwargs . get ( \"fold\" , 1 ) self . scale = kwargs . get ( \"scale\" , 1 ) self . width = kwargs . get ( \"width\" , 850 ) self . height = kwargs . get ( \"height\" , 1100 ) self . math = kwargs . get ( \"math\" , 0 ) self . shadow = kwargs . get ( \"shadow\" , 0 ) # In the Draw.io file format, each page is actually three nested XML # tags. These are defined as XMLBase subclasses below self . diagram = Diagram ( name = self . name ) self . mxGraph = mxGraph ( page = self ) self . root = Root () def __repr__ ( self ): return f \"drawpyo Page - { self . name } \" def remove ( self ): \"\"\"This function removes the Page from its linked File object then deletes itself. \"\"\" if self . file is not None : self . file . remove_page ( self ) del self def add_object ( self , obj ): if obj not in self . objects : self . objects . append ( obj ) def remove_object ( self , obj ): self . objects . remove ( obj ) @property def file ( self ): return self . _file @file . setter def file ( self , f ): f . add_page ( self ) self . _file = f @file . deleter def file ( self ): self . _file . remove_page ( self ) self . _file = None ########################################################### # XML Generation ########################################################### @property def xml ( self ): xml_string = self . xml_open_tag for obj in self . objects : xml_string = xml_string + \" \\n \" + obj . xml xml_string = xml_string + \" \\n \" + self . xml_close_tag return xml_string @property def xml_open_tag ( self ): tag = ( self . diagram . xml_open_tag + \" \\n \" + self . mxGraph . xml_open_tag + \" \\n \" + self . root . xml_open_tag ) return tag @property def xml_close_tag ( self ): tag = ( \" \" + self . root . xml_close_tag + \" \\n \" + self . mxGraph . xml_close_tag + \" \\n \" + self . diagram . xml_close_tag ) return tag","title":"Page"},{"location":"api/page/#drawpyo.page.Page.remove","text":"This function removes the Page from its linked File object then deletes itself. Source code in drawpyo/page.py 51 52 53 54 55 56 def remove ( self ): \"\"\"This function removes the Page from its linked File object then deletes itself. \"\"\" if self . file is not None : self . file . remove_page ( self ) del self","title":"remove"},{"location":"api/tree_diagram/nodeobject/","text":"NodeObject drawpyo.diagram_types.tree.NodeObject Bases: Object This class defines one of the nodes on a tree graph. It inherits from Object and performs the same in most regards. It also tracks the tree-specific parameters like the tree, children, parent, etc. Source code in drawpyo/diagram_types/tree.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class NodeObject ( Object ): \"\"\"This class defines one of the nodes on a tree graph. It inherits from Object and performs the same in most regards. It also tracks the tree-specific parameters like the tree, children, parent, etc. \"\"\" def __init__ ( self , tree = None , ** kwargs ): \"\"\"The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Args: tree (TreeDiagram, optional): The owning tree diagram. Defaults to None. Keyword Args: children (list, optional): A list of other NodeObjects parent (list, optional): The parent NodeObject \"\"\" super () . __init__ ( ** kwargs ) self . tree = tree self . children = kwargs . get ( \"children\" , []) self . parent = kwargs . get ( \"parent\" , None ) self . peers = [] # self.level = kwargs.get(\"level\", None) # self.peers = kwargs.get(\"peers\", []) @property def tree ( self ): \"\"\"The TreeDiagram that owns the NodeObject Returns: TreeDiagram \"\"\" return self . _tree @tree . setter def tree ( self , value ): if value is not None : value . add_object ( self ) self . _tree = value @property def parent ( self ): \"\"\"The parent NodeObject Returns: NodeObject \"\"\" return self . _parent @parent . setter def parent ( self , value ): if value is not None : value . children . append ( self ) self . _parent = value def add_child ( self , obj ): \"\"\"Add a new child to the object Args: obj (NodeObject) \"\"\" self . children . append ( obj ) obj . _parent = self def add_peer ( self , obj ): if obj not in self . peers : self . peers . append ( obj ) if self not in obj . peers : obj . peers . append ( self ) @property def size_of_level ( self ): \"\"\"The height or the width of the level, depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . geometry . height elif self . tree . direction in [ \"left\" , \"right\" ]: return self . geometry . width @property def size_in_level ( self ): \"\"\"The size of the object within its level, either its width or height depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . geometry . width elif self . tree . direction in [ \"left\" , \"right\" ]: return self . geometry . height parent property writable The parent NodeObject Returns: \u2013 NodeObject size_in_level property The size of the object within its level, either its width or height depending on tree orientation. Returns: \u2013 int size_of_level property The height or the width of the level, depending on tree orientation. Returns: \u2013 int tree property writable The TreeDiagram that owns the NodeObject Returns: \u2013 TreeDiagram __init__ ( tree = None , ** kwargs ) The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Parameters: tree ( TreeDiagram , default: None ) \u2013 The owning tree diagram. Defaults to None. children ( list ) \u2013 A list of other NodeObjects parent ( list ) \u2013 The parent NodeObject Source code in drawpyo/diagram_types/tree.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , tree = None , ** kwargs ): \"\"\"The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Args: tree (TreeDiagram, optional): The owning tree diagram. Defaults to None. Keyword Args: children (list, optional): A list of other NodeObjects parent (list, optional): The parent NodeObject \"\"\" super () . __init__ ( ** kwargs ) self . tree = tree self . children = kwargs . get ( \"children\" , []) self . parent = kwargs . get ( \"parent\" , None ) self . peers = [] add_child ( obj ) Add a new child to the object Source code in drawpyo/diagram_types/tree.py 58 59 60 61 62 63 64 65 def add_child ( self , obj ): \"\"\"Add a new child to the object Args: obj (NodeObject) \"\"\" self . children . append ( obj ) obj . _parent = self","title":"NodeObject"},{"location":"api/tree_diagram/nodeobject/#nodeobject","text":"","title":"NodeObject"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject","text":"Bases: Object This class defines one of the nodes on a tree graph. It inherits from Object and performs the same in most regards. It also tracks the tree-specific parameters like the tree, children, parent, etc. Source code in drawpyo/diagram_types/tree.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class NodeObject ( Object ): \"\"\"This class defines one of the nodes on a tree graph. It inherits from Object and performs the same in most regards. It also tracks the tree-specific parameters like the tree, children, parent, etc. \"\"\" def __init__ ( self , tree = None , ** kwargs ): \"\"\"The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Args: tree (TreeDiagram, optional): The owning tree diagram. Defaults to None. Keyword Args: children (list, optional): A list of other NodeObjects parent (list, optional): The parent NodeObject \"\"\" super () . __init__ ( ** kwargs ) self . tree = tree self . children = kwargs . get ( \"children\" , []) self . parent = kwargs . get ( \"parent\" , None ) self . peers = [] # self.level = kwargs.get(\"level\", None) # self.peers = kwargs.get(\"peers\", []) @property def tree ( self ): \"\"\"The TreeDiagram that owns the NodeObject Returns: TreeDiagram \"\"\" return self . _tree @tree . setter def tree ( self , value ): if value is not None : value . add_object ( self ) self . _tree = value @property def parent ( self ): \"\"\"The parent NodeObject Returns: NodeObject \"\"\" return self . _parent @parent . setter def parent ( self , value ): if value is not None : value . children . append ( self ) self . _parent = value def add_child ( self , obj ): \"\"\"Add a new child to the object Args: obj (NodeObject) \"\"\" self . children . append ( obj ) obj . _parent = self def add_peer ( self , obj ): if obj not in self . peers : self . peers . append ( obj ) if self not in obj . peers : obj . peers . append ( self ) @property def size_of_level ( self ): \"\"\"The height or the width of the level, depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . geometry . height elif self . tree . direction in [ \"left\" , \"right\" ]: return self . geometry . width @property def size_in_level ( self ): \"\"\"The size of the object within its level, either its width or height depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . geometry . width elif self . tree . direction in [ \"left\" , \"right\" ]: return self . geometry . height","title":"NodeObject"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.parent","text":"The parent NodeObject Returns: \u2013 NodeObject","title":"parent"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.size_in_level","text":"The size of the object within its level, either its width or height depending on tree orientation. Returns: \u2013 int","title":"size_in_level"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.size_of_level","text":"The height or the width of the level, depending on tree orientation. Returns: \u2013 int","title":"size_of_level"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.tree","text":"The TreeDiagram that owns the NodeObject Returns: \u2013 TreeDiagram","title":"tree"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.__init__","text":"The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Parameters: tree ( TreeDiagram , default: None ) \u2013 The owning tree diagram. Defaults to None. children ( list ) \u2013 A list of other NodeObjects parent ( list ) \u2013 The parent NodeObject Source code in drawpyo/diagram_types/tree.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , tree = None , ** kwargs ): \"\"\"The NodeObject should be instantiated with an owning tree object. A NodeObject can only have a single parent but can have any number of children. Args: tree (TreeDiagram, optional): The owning tree diagram. Defaults to None. Keyword Args: children (list, optional): A list of other NodeObjects parent (list, optional): The parent NodeObject \"\"\" super () . __init__ ( ** kwargs ) self . tree = tree self . children = kwargs . get ( \"children\" , []) self . parent = kwargs . get ( \"parent\" , None ) self . peers = []","title":"__init__"},{"location":"api/tree_diagram/nodeobject/#drawpyo.diagram_types.tree.NodeObject.add_child","text":"Add a new child to the object Source code in drawpyo/diagram_types/tree.py 58 59 60 61 62 63 64 65 def add_child ( self , obj ): \"\"\"Add a new child to the object Args: obj (NodeObject) \"\"\" self . children . append ( obj ) obj . _parent = self","title":"add_child"},{"location":"api/tree_diagram/treediagram/","text":"TreeDiagram drawpyo.diagram_types.tree.TreeDiagram The TreeDiagram contains a File object, a Page object, and all the NodeObjects in the tree. Source code in drawpyo/diagram_types/tree.pyclass TreeDiagram : \"\"\"The TreeDiagram contains a File object, a Page object, and all the NodeObjects in the tree. \"\"\" def __init__ ( self , ** kwargs ): \"\"\"The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. Keyword Args: direction (str, optional): Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style (str, optional): Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing (int, optional): Spacing in pixels between levels. Defaults to 60. item_spacing (int, optional): Spacing in pixels between groups within a level. Defaults to 15. padding (int, optional): Spacing in pixels between objects within a group. Defaults to 10. file_name (str, optional): The name of the tree diagram. file_path (str, optional): The path where the tree diagram should be saved. \"\"\" # formatting self . level_spacing = kwargs . get ( \"level_spacing\" , 60 ) self . item_spacing = kwargs . get ( \"item_spacing\" , 15 ) self . group_spacing = kwargs . get ( \"group_spacing\" , 30 ) self . direction = kwargs . get ( \"direction\" , \"down\" ) self . link_style = kwargs . get ( \"link_style\" , \"orthogonal\" ) self . padding = kwargs . get ( \"padding\" , 10 ) # Set up the File and Page objects self . file = File () self . file_name = kwargs . get ( \"file_name\" , \"Heirarchical Diagram.drawio\" ) self . file_path = kwargs . get ( \"file_path\" , r \"C:/\" ) self . page = Page ( file = self . file ) # Set up object and level lists self . objects = [] self . links = [] ########################################################### # properties ########################################################### # These setters and getters keep the file name and file path within the # File object @property def file_name ( self ): \"\"\"The file name of the TreeDiagram Returns: str \"\"\" return self . file . file_name @file_name . setter def file_name ( self , fn ): self . file . file_name = fn @property def file_path ( self ): \"\"\"The file path where the TreeDiagram will be saved Returns: str \"\"\" return self . file . file_path @file_path . setter def file_path ( self , fn ): self . file . file_path = fn # These setters enforce the options for direction and link_style. @property def direction ( self ): \"\"\"The direction the tree diagram should grow. Options are \"up\", \"down\", \"left\", or \"right\". Returns: str \"\"\" return self . _direction @direction . setter def direction ( self , d ): directions = [ \"up\" , \"down\" , \"left\" , \"right\" ] if d in directions : self . _direction = d else : raise ValueError ( \" {0} is not a valid entry for direction. Must be {1} .\" . format ( d , \", \" . join ( directions ) ) ) ########################################################### # Formatting Properties ########################################################### @property def origin ( self ): \"\"\"The origin points of the TreeDiagram. This is the point where the center of the top level of the TreeDiagram starts from. By default it's set to the top center of an edge of the page. Which edge depends on the direction of the tree diagram. Returns: tuple: A tuple of ints \"\"\" origins = { \"up\" : ( self . page . width / 2 , self . page . height - self . padding ), \"down\" : ( self . page . width / 2 , self . padding ), \"right\" : ( self . padding , self . page . height / 2 ), \"left\" : ( self . page . width - self . padding , self . page . height / 2 ), } return origins [ self . direction ] def level_move ( self , move ): \"\"\"The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: move (int): The amount to move within levels Returns: tuple: A tuple containing a 0 and the move, in the right orientation. \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( 0 , move ) elif self . direction in [ \"left\" , \"right\" ]: return ( move , 0 ) def move_between_levels ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], start [ 1 ] - move ) elif self . direction == \"down\" : return ( start [ 0 ], start [ 1 ] + move ) elif self . direction == \"left\" : return ( start [ 0 ] - move , start [ 1 ]) elif self . direction == \"right\" : return ( start [ 0 ] + move , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) def move_in_level ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( start [ 0 ] + move , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], start [ 1 ] + move ) else : raise ValueError ( \"No direction defined!\" ) def abs_move_between_levels ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], position ) elif self . direction == \"down\" : return ( start [ 0 ], position ) elif self . direction == \"left\" : return ( position , start [ 1 ]) elif self . direction == \"right\" : return ( position , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) def abs_move_in_level ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( position , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], position ) else : raise ValueError ( \"No direction defined!\" ) ########################################################### # Style Properties ########################################################### @property def link_style ( self ): \"\"\"The style of the links in the TreeDiagram Returns: str \"\"\" return self . _link_style @link_style . setter def link_style ( self , d ): link_styles = [ \"orthogonal\" , \"straight\" , \"curved\" ] if d in link_styles : self . _link_style = d else : raise ValueError ( \" {0} is not a valid entry for link_style. Must be {1} .\" . format ( d , \", \" . join ( link_styles ) ) ) @property def link_style_dict ( self ): \"\"\"Returns the correct waypoint style for the set link_style Returns: dict: A dict with 'waypoint' as a key then the set link_style \"\"\" if self . link_style == \"orthogonal\" : return { 'waypoints' : 'orthogonal' } elif self . link_style == \"straight\" : return { 'waypoints' : 'straight' } elif self . link_style == \"curved\" : return { 'waypoints' : 'curved' } ########################################################### # Object Linking and Sorting ########################################################### def add_object ( self , obj , ** kwargs ): if obj not in self . objects : obj . page = self . page if \"parent\" in kwargs : obj . parent = kwargs . get ( \"parent\" ) self . objects . append ( obj ) ########################################################### # Layout and Output ########################################################### @property def roots ( self ): return [ x for x in self . objects if x . parent is None ] def auto_layout ( self ): def layout_child ( parent ): grp = TreeGroup ( tree = self ) grp . parent_object = parent if len ( parent . children ) > 0 : # has children, go through each leaf and check its children for leaf in parent . children : self . connect ( parent , leaf ) if len ( leaf . children ) > 0 : # If this leaf has its own children then recursive call grp . add_object ( layout_child ( leaf )) else : grp . add_object ( leaf ) # layout the row grp = layout_group ( grp ) #grp = add_parent(grp, parent) grp . center_parent () return grp def layout_group ( grp , pos = self . origin ): pos = self . origin for leaf in grp . objects : if leaf is not grp . parent_object : leaf . position = pos pos = self . move_in_level ( pos , leaf . size_in_level + self . item_spacing ) return grp # def add_parent(grp, parent): # pos = grp.center_position # level_space = ( # grp.size_of_level / 2 # + self.level_spacing # + parent.size_of_level / 2 # ) # pos = self.move_between_levels(pos, -level_space) # parent.center_position = pos # # add the parent_object # grp.parent_object = parent # return grp top_group = TreeGroup ( tree = self ) for root in self . roots : top_group . add_object ( layout_child ( root )) if len ( top_group . objects ) > 0 : # Position top group top_group = layout_group ( top_group ) # Center the top group pos = self . origin pos = self . move_between_levels ( pos , top_group . size_of_level / 2 ) top_group . center_position = pos # lastly add peer links self . connect_peers () return top_group def connect_peers ( self ): peer_style = { 'endArrow' : 'none' , 'dashed' : 1 , 'html' : 1 , 'rounded' : 0 , 'exitX' : 1 , 'exitY' : 0.5 , 'exitDx' : 0 , 'exitDy' : 0 , 'entryX' : 0 , 'entryY' : 0.5 , 'entryDx' : 0 , 'entryDx' : 0 , 'edgeStyle' : 'orthogonalEdgeStyle' } for obj in self . objects : for peer in obj . peers : link_exists = False for link in self . links : if link . source == obj and link . target == peer : link_exists = True elif link . source == peer and link . target == obj : link_exists = True if not link_exists : edge = Edge ( page = self . page , source = obj , target = peer ) edge . apply_attribute_dict ( peer_style ) self . links . append ( edge ) def connect ( self , source , target ): edge = Edge ( page = self . page , source = source , target = target ) edge . apply_attribute_dict ( self . link_style_dict ) if self . direction == \"down\" : # parent style edge . exitX = 0.5 edge . exitY = 1 # child style edge . entryX = 0.5 edge . entryY = 0 elif self . direction == \"up\" : # parent style edge . exitX = 0.5 edge . exitY = 0 # child style edge . entryX = 0.5 edge . entryY = 1 elif self . direction == \"left\" : # parent style edge . exitX = 0 edge . exitY = 0.5 # child style edge . entryX = 1 edge . entryY = 0.5 elif self . direction == \"right\" : # parent style edge . exitX = 1 edge . exitY = 0.5 # child style edge . entryX = 0 edge . entryY = 0.5 self . links . append ( edge ) def draw_connections ( self ): # Draw connections for lvl in self . objects . values (): for obj in lvl : if obj . parent is not None : self . connect ( source = obj . parent , target = obj ) def write ( self , ** kwargs ): self . file . write ( ** kwargs ) direction property writable The direction the tree diagram should grow. Options are \"up\", \"down\", \"left\", or \"right\". Returns: \u2013 str file_name property writable The file name of the TreeDiagram Returns: \u2013 str file_path property writable The file path where the TreeDiagram will be saved Returns: \u2013 str link_style property writable The style of the links in the TreeDiagram Returns: \u2013 str link_style_dict property Returns the correct waypoint style for the set link_style Returns: dict \u2013 A dict with 'waypoint' as a key then the set link_style origin property The origin points of the TreeDiagram. This is the point where the center of the top level of the TreeDiagram starts from. By default it's set to the top center of an edge of the page. Which edge depends on the direction of the tree diagram. Returns: tuple \u2013 A tuple of ints __init__ ( ** kwargs ) The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. direction ( str ) \u2013 Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style ( str ) \u2013 Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing ( int ) \u2013 Spacing in pixels between levels. Defaults to 60. item_spacing ( int ) \u2013 Spacing in pixels between groups within a level. Defaults to 15. padding ( int ) \u2013 Spacing in pixels between objects within a group. Defaults to 10. file_name ( str ) \u2013 The name of the tree diagram. file_path ( str ) \u2013 The path where the tree diagram should be saved. Source code in drawpyo/diagram_types/tree.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def __init__ ( self , ** kwargs ): \"\"\"The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. Keyword Args: direction (str, optional): Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style (str, optional): Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing (int, optional): Spacing in pixels between levels. Defaults to 60. item_spacing (int, optional): Spacing in pixels between groups within a level. Defaults to 15. padding (int, optional): Spacing in pixels between objects within a group. Defaults to 10. file_name (str, optional): The name of the tree diagram. file_path (str, optional): The path where the tree diagram should be saved. \"\"\" # formatting self . level_spacing = kwargs . get ( \"level_spacing\" , 60 ) self . item_spacing = kwargs . get ( \"item_spacing\" , 15 ) self . group_spacing = kwargs . get ( \"group_spacing\" , 30 ) self . direction = kwargs . get ( \"direction\" , \"down\" ) self . link_style = kwargs . get ( \"link_style\" , \"orthogonal\" ) self . padding = kwargs . get ( \"padding\" , 10 ) # Set up the File and Page objects self . file = File () self . file_name = kwargs . get ( \"file_name\" , \"Heirarchical Diagram.drawio\" ) self . file_path = kwargs . get ( \"file_path\" , r \"C:/\" ) self . page = Page ( file = self . file ) # Set up object and level lists self . objects = [] self . links = [] abs_move_between_levels ( start , position ) The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 def abs_move_between_levels ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], position ) elif self . direction == \"down\" : return ( start [ 0 ], position ) elif self . direction == \"left\" : return ( position , start [ 1 ]) elif self . direction == \"right\" : return ( position , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) abs_move_in_level ( start , position ) The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def abs_move_in_level ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( position , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], position ) else : raise ValueError ( \"No direction defined!\" ) level_move ( move ) The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: move ( int ) \u2013 The amount to move within levels Returns: tuple \u2013 A tuple containing a 0 and the move, in the right orientation. Source code in drawpyo/diagram_types/tree.py 280 281 282 283 284 285 286 287 288 289 290 291 292 def level_move ( self , move ): \"\"\"The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: move (int): The amount to move within levels Returns: tuple: A tuple containing a 0 and the move, in the right orientation. \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( 0 , move ) elif self . direction in [ \"left\" , \"right\" ]: return ( move , 0 ) move_between_levels ( start , move ) The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 def move_between_levels ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], start [ 1 ] - move ) elif self . direction == \"down\" : return ( start [ 0 ], start [ 1 ] + move ) elif self . direction == \"left\" : return ( start [ 0 ] - move , start [ 1 ]) elif self . direction == \"right\" : return ( start [ 0 ] + move , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) move_in_level ( start , move ) The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 def move_in_level ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( start [ 0 ] + move , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], start [ 1 ] + move ) else : raise ValueError ( \"No direction defined!\" ) TreeGroup drawpyo.diagram_types.tree.TreeGroup Bases: Group This class defines a group within a TreeDiagram. When a set of NodeObjects share the same parent they're grouped together for auto positioning. Each level of a TreeDiagram is a set of groups. Source code in drawpyo/diagram_types/tree.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 class TreeGroup ( Group ): \"\"\"This class defines a group within a TreeDiagram. When a set of NodeObjects share the same parent they're grouped together for auto positioning. Each level of a TreeDiagram is a set of groups. \"\"\" def __init__ ( self , tree = None , parent_object = None , ** kwargs ): \"\"\"The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Args: tree (TreeDiagram, optional): The TreeDiagram that owns the group. Defaults to None. parent_object (NodeObject, optional): The parent object in the group. Defaults to None. \"\"\" super () . __init__ ( ** kwargs ) self . parent_object = parent_object self . tree = tree @property def parent_object ( self ): \"\"\"The object that defines the parent of the group. Returns: NodeObject \"\"\" return self . _parent_object @parent_object . setter def parent_object ( self , value ): if value is not None : self . add_object ( value ) self . _parent_object = value def center_parent ( self ): \"\"\"This function centers the parent_objects along the group and then offsets it by the level spacing. \"\"\" children_grp = TreeGroup ( tree = self . tree ) for obj in self . objects : if obj is not self . parent_object : children_grp . add_object ( obj ) pos = children_grp . center_position level_space = ( children_grp . size_of_level / 2 + self . tree . level_spacing + self . parent_object . size_of_level / 2 ) pos = self . tree . move_between_levels ( pos , - level_space ) self . parent_object . center_position = pos # I don't love that these are copy-pasted from NodeObject but the multiple # inheritance was too much of a pain to have TreeGroup inherit. @property def size_of_level ( self ): \"\"\"The height or the width of the level, depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . height elif self . tree . direction in [ \"left\" , \"right\" ]: return self . width @property def size_in_level ( self ): \"\"\"The size of the object within its level, either its width or height depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . width elif self . tree . direction in [ \"left\" , \"right\" ]: return self . height parent_object property writable The object that defines the parent of the group. Returns: \u2013 NodeObject size_in_level property The size of the object within its level, either its width or height depending on tree orientation. Returns: \u2013 int size_of_level property The height or the width of the level, depending on tree orientation. Returns: \u2013 int __init__ ( tree = None , parent_object = None , ** kwargs ) The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Parameters: tree ( TreeDiagram , default: None ) \u2013 The TreeDiagram that owns the group. Defaults to None. parent_object ( NodeObject , default: None ) \u2013 The parent object in the group. Defaults to None. Source code in drawpyo/diagram_types/tree.py 103 104 105 106 107 108 109 110 111 112 def __init__ ( self , tree = None , parent_object = None , ** kwargs ): \"\"\"The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Args: tree (TreeDiagram, optional): The TreeDiagram that owns the group. Defaults to None. parent_object (NodeObject, optional): The parent object in the group. Defaults to None. \"\"\" super () . __init__ ( ** kwargs ) self . parent_object = parent_object self . tree = tree center_parent () This function centers the parent_objects along the group and then offsets it by the level spacing. Source code in drawpyo/diagram_types/tree.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def center_parent ( self ): \"\"\"This function centers the parent_objects along the group and then offsets it by the level spacing. \"\"\" children_grp = TreeGroup ( tree = self . tree ) for obj in self . objects : if obj is not self . parent_object : children_grp . add_object ( obj ) pos = children_grp . center_position level_space = ( children_grp . size_of_level / 2 + self . tree . level_spacing + self . parent_object . size_of_level / 2 ) pos = self . tree . move_between_levels ( pos , - level_space ) self . parent_object . center_position = pos","title":"TreeDiagram"},{"location":"api/tree_diagram/treediagram/#treediagram","text":"","title":"TreeDiagram"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram","text":"The TreeDiagram contains a File object, a Page object, and all the NodeObjects in the tree. Source code in drawpyo/diagram_types/tree.pyclass TreeDiagram : \"\"\"The TreeDiagram contains a File object, a Page object, and all the NodeObjects in the tree. \"\"\" def __init__ ( self , ** kwargs ): \"\"\"The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. Keyword Args: direction (str, optional): Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style (str, optional): Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing (int, optional): Spacing in pixels between levels. Defaults to 60. item_spacing (int, optional): Spacing in pixels between groups within a level. Defaults to 15. padding (int, optional): Spacing in pixels between objects within a group. Defaults to 10. file_name (str, optional): The name of the tree diagram. file_path (str, optional): The path where the tree diagram should be saved. \"\"\" # formatting self . level_spacing = kwargs . get ( \"level_spacing\" , 60 ) self . item_spacing = kwargs . get ( \"item_spacing\" , 15 ) self . group_spacing = kwargs . get ( \"group_spacing\" , 30 ) self . direction = kwargs . get ( \"direction\" , \"down\" ) self . link_style = kwargs . get ( \"link_style\" , \"orthogonal\" ) self . padding = kwargs . get ( \"padding\" , 10 ) # Set up the File and Page objects self . file = File () self . file_name = kwargs . get ( \"file_name\" , \"Heirarchical Diagram.drawio\" ) self . file_path = kwargs . get ( \"file_path\" , r \"C:/\" ) self . page = Page ( file = self . file ) # Set up object and level lists self . objects = [] self . links = [] ########################################################### # properties ########################################################### # These setters and getters keep the file name and file path within the # File object @property def file_name ( self ): \"\"\"The file name of the TreeDiagram Returns: str \"\"\" return self . file . file_name @file_name . setter def file_name ( self , fn ): self . file . file_name = fn @property def file_path ( self ): \"\"\"The file path where the TreeDiagram will be saved Returns: str \"\"\" return self . file . file_path @file_path . setter def file_path ( self , fn ): self . file . file_path = fn # These setters enforce the options for direction and link_style. @property def direction ( self ): \"\"\"The direction the tree diagram should grow. Options are \"up\", \"down\", \"left\", or \"right\". Returns: str \"\"\" return self . _direction @direction . setter def direction ( self , d ): directions = [ \"up\" , \"down\" , \"left\" , \"right\" ] if d in directions : self . _direction = d else : raise ValueError ( \" {0} is not a valid entry for direction. Must be {1} .\" . format ( d , \", \" . join ( directions ) ) ) ########################################################### # Formatting Properties ########################################################### @property def origin ( self ): \"\"\"The origin points of the TreeDiagram. This is the point where the center of the top level of the TreeDiagram starts from. By default it's set to the top center of an edge of the page. Which edge depends on the direction of the tree diagram. Returns: tuple: A tuple of ints \"\"\" origins = { \"up\" : ( self . page . width / 2 , self . page . height - self . padding ), \"down\" : ( self . page . width / 2 , self . padding ), \"right\" : ( self . padding , self . page . height / 2 ), \"left\" : ( self . page . width - self . padding , self . page . height / 2 ), } return origins [ self . direction ] def level_move ( self , move ): \"\"\"The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: move (int): The amount to move within levels Returns: tuple: A tuple containing a 0 and the move, in the right orientation. \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( 0 , move ) elif self . direction in [ \"left\" , \"right\" ]: return ( move , 0 ) def move_between_levels ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], start [ 1 ] - move ) elif self . direction == \"down\" : return ( start [ 0 ], start [ 1 ] + move ) elif self . direction == \"left\" : return ( start [ 0 ] - move , start [ 1 ]) elif self . direction == \"right\" : return ( start [ 0 ] + move , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) def move_in_level ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( start [ 0 ] + move , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], start [ 1 ] + move ) else : raise ValueError ( \"No direction defined!\" ) def abs_move_between_levels ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], position ) elif self . direction == \"down\" : return ( start [ 0 ], position ) elif self . direction == \"left\" : return ( position , start [ 1 ]) elif self . direction == \"right\" : return ( position , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" ) def abs_move_in_level ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( position , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], position ) else : raise ValueError ( \"No direction defined!\" ) ########################################################### # Style Properties ########################################################### @property def link_style ( self ): \"\"\"The style of the links in the TreeDiagram Returns: str \"\"\" return self . _link_style @link_style . setter def link_style ( self , d ): link_styles = [ \"orthogonal\" , \"straight\" , \"curved\" ] if d in link_styles : self . _link_style = d else : raise ValueError ( \" {0} is not a valid entry for link_style. Must be {1} .\" . format ( d , \", \" . join ( link_styles ) ) ) @property def link_style_dict ( self ): \"\"\"Returns the correct waypoint style for the set link_style Returns: dict: A dict with 'waypoint' as a key then the set link_style \"\"\" if self . link_style == \"orthogonal\" : return { 'waypoints' : 'orthogonal' } elif self . link_style == \"straight\" : return { 'waypoints' : 'straight' } elif self . link_style == \"curved\" : return { 'waypoints' : 'curved' } ########################################################### # Object Linking and Sorting ########################################################### def add_object ( self , obj , ** kwargs ): if obj not in self . objects : obj . page = self . page if \"parent\" in kwargs : obj . parent = kwargs . get ( \"parent\" ) self . objects . append ( obj ) ########################################################### # Layout and Output ########################################################### @property def roots ( self ): return [ x for x in self . objects if x . parent is None ] def auto_layout ( self ): def layout_child ( parent ): grp = TreeGroup ( tree = self ) grp . parent_object = parent if len ( parent . children ) > 0 : # has children, go through each leaf and check its children for leaf in parent . children : self . connect ( parent , leaf ) if len ( leaf . children ) > 0 : # If this leaf has its own children then recursive call grp . add_object ( layout_child ( leaf )) else : grp . add_object ( leaf ) # layout the row grp = layout_group ( grp ) #grp = add_parent(grp, parent) grp . center_parent () return grp def layout_group ( grp , pos = self . origin ): pos = self . origin for leaf in grp . objects : if leaf is not grp . parent_object : leaf . position = pos pos = self . move_in_level ( pos , leaf . size_in_level + self . item_spacing ) return grp # def add_parent(grp, parent): # pos = grp.center_position # level_space = ( # grp.size_of_level / 2 # + self.level_spacing # + parent.size_of_level / 2 # ) # pos = self.move_between_levels(pos, -level_space) # parent.center_position = pos # # add the parent_object # grp.parent_object = parent # return grp top_group = TreeGroup ( tree = self ) for root in self . roots : top_group . add_object ( layout_child ( root )) if len ( top_group . objects ) > 0 : # Position top group top_group = layout_group ( top_group ) # Center the top group pos = self . origin pos = self . move_between_levels ( pos , top_group . size_of_level / 2 ) top_group . center_position = pos # lastly add peer links self . connect_peers () return top_group def connect_peers ( self ): peer_style = { 'endArrow' : 'none' , 'dashed' : 1 , 'html' : 1 , 'rounded' : 0 , 'exitX' : 1 , 'exitY' : 0.5 , 'exitDx' : 0 , 'exitDy' : 0 , 'entryX' : 0 , 'entryY' : 0.5 , 'entryDx' : 0 , 'entryDx' : 0 , 'edgeStyle' : 'orthogonalEdgeStyle' } for obj in self . objects : for peer in obj . peers : link_exists = False for link in self . links : if link . source == obj and link . target == peer : link_exists = True elif link . source == peer and link . target == obj : link_exists = True if not link_exists : edge = Edge ( page = self . page , source = obj , target = peer ) edge . apply_attribute_dict ( peer_style ) self . links . append ( edge ) def connect ( self , source , target ): edge = Edge ( page = self . page , source = source , target = target ) edge . apply_attribute_dict ( self . link_style_dict ) if self . direction == \"down\" : # parent style edge . exitX = 0.5 edge . exitY = 1 # child style edge . entryX = 0.5 edge . entryY = 0 elif self . direction == \"up\" : # parent style edge . exitX = 0.5 edge . exitY = 0 # child style edge . entryX = 0.5 edge . entryY = 1 elif self . direction == \"left\" : # parent style edge . exitX = 0 edge . exitY = 0.5 # child style edge . entryX = 1 edge . entryY = 0.5 elif self . direction == \"right\" : # parent style edge . exitX = 1 edge . exitY = 0.5 # child style edge . entryX = 0 edge . entryY = 0.5 self . links . append ( edge ) def draw_connections ( self ): # Draw connections for lvl in self . objects . values (): for obj in lvl : if obj . parent is not None : self . connect ( source = obj . parent , target = obj ) def write ( self , ** kwargs ): self . file . write ( ** kwargs )","title":"TreeDiagram"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.direction","text":"The direction the tree diagram should grow. Options are \"up\", \"down\", \"left\", or \"right\". Returns: \u2013 str","title":"direction"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.file_name","text":"The file name of the TreeDiagram Returns: \u2013 str","title":"file_name"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.file_path","text":"The file path where the TreeDiagram will be saved Returns: \u2013 str","title":"file_path"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.link_style","text":"The style of the links in the TreeDiagram Returns: \u2013 str","title":"link_style"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.link_style_dict","text":"Returns the correct waypoint style for the set link_style Returns: dict \u2013 A dict with 'waypoint' as a key then the set link_style","title":"link_style_dict"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.origin","text":"The origin points of the TreeDiagram. This is the point where the center of the top level of the TreeDiagram starts from. By default it's set to the top center of an edge of the page. Which edge depends on the direction of the tree diagram. Returns: tuple \u2013 A tuple of ints","title":"origin"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.__init__","text":"The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. direction ( str ) \u2013 Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style ( str ) \u2013 Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing ( int ) \u2013 Spacing in pixels between levels. Defaults to 60. item_spacing ( int ) \u2013 Spacing in pixels between groups within a level. Defaults to 15. padding ( int ) \u2013 Spacing in pixels between objects within a group. Defaults to 10. file_name ( str ) \u2013 The name of the tree diagram. file_path ( str ) \u2013 The path where the tree diagram should be saved. Source code in drawpyo/diagram_types/tree.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def __init__ ( self , ** kwargs ): \"\"\"The TreeDiagram initiates its own File and Page objects. There are a number of formatting parameters that can be set to fine tune the rendering of the tree. Keyword Args: direction (str, optional): Direction that the tree grows from the root. Options are 'up', 'down', 'left', and 'right'. Defaults to 'down'. link_style (str, optional): Connection style of the edges. Options are 'orthogonal', 'straight', and 'curved'. Defaults to 'orthogonal'. level_spacing (int, optional): Spacing in pixels between levels. Defaults to 60. item_spacing (int, optional): Spacing in pixels between groups within a level. Defaults to 15. padding (int, optional): Spacing in pixels between objects within a group. Defaults to 10. file_name (str, optional): The name of the tree diagram. file_path (str, optional): The path where the tree diagram should be saved. \"\"\" # formatting self . level_spacing = kwargs . get ( \"level_spacing\" , 60 ) self . item_spacing = kwargs . get ( \"item_spacing\" , 15 ) self . group_spacing = kwargs . get ( \"group_spacing\" , 30 ) self . direction = kwargs . get ( \"direction\" , \"down\" ) self . link_style = kwargs . get ( \"link_style\" , \"orthogonal\" ) self . padding = kwargs . get ( \"padding\" , 10 ) # Set up the File and Page objects self . file = File () self . file_name = kwargs . get ( \"file_name\" , \"Heirarchical Diagram.drawio\" ) self . file_path = kwargs . get ( \"file_path\" , r \"C:/\" ) self . page = Page ( file = self . file ) # Set up object and level lists self . objects = [] self . links = []","title":"__init__"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.abs_move_between_levels","text":"The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 def abs_move_between_levels ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], position ) elif self . direction == \"down\" : return ( start [ 0 ], position ) elif self . direction == \"left\" : return ( position , start [ 1 ]) elif self . direction == \"right\" : return ( position , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" )","title":"abs_move_between_levels"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.abs_move_in_level","text":"The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def abs_move_in_level ( self , start , position ): \"\"\"The functions takes in a starting position and an absolute position along the coordinates within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( position , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], position ) else : raise ValueError ( \"No direction defined!\" )","title":"abs_move_in_level"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.level_move","text":"The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: move ( int ) \u2013 The amount to move within levels Returns: tuple \u2013 A tuple containing a 0 and the move, in the right orientation. Source code in drawpyo/diagram_types/tree.py 280 281 282 283 284 285 286 287 288 289 290 291 292 def level_move ( self , move ): \"\"\"The functions takes in a relative distance to move within levels. It outputs a tuple with the relative move in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: move (int): The amount to move within levels Returns: tuple: A tuple containing a 0 and the move, in the right orientation. \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( 0 , move ) elif self . direction in [ \"left\" , \"right\" ]: return ( move , 0 )","title":"level_move"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.move_between_levels","text":"The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 def move_between_levels ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move between levels. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction == \"up\" : return ( start [ 0 ], start [ 1 ] - move ) elif self . direction == \"down\" : return ( start [ 0 ], start [ 1 ] + move ) elif self . direction == \"left\" : return ( start [ 0 ] - move , start [ 1 ]) elif self . direction == \"right\" : return ( start [ 0 ] + move , start [ 1 ]) else : raise ValueError ( \"No direction defined!\" )","title":"move_between_levels"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeDiagram.move_in_level","text":"The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Parameters: start ( tuple ) \u2013 The starting position, a tuple of ints move ( int ) \u2013 The direction to move between levels. Raises: ValueError \u2013 \"No direction defined!\" Returns: tuple \u2013 The final position, a tuple of ints Source code in drawpyo/diagram_types/tree.py 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 def move_in_level ( self , start , move ): \"\"\"The functions takes in a starting position and a relative distance to move within a level. It outputs a tuple with the final absolute position in the correct direction (horizontal or vertical) depending on the direction of the tree diagram. Args: start (tuple): The starting position, a tuple of ints move (int): The direction to move between levels. Raises: ValueError: \"No direction defined!\" Returns: tuple: The final position, a tuple of ints \"\"\" if self . direction in [ \"up\" , \"down\" ]: return ( start [ 0 ] + move , start [ 1 ]) elif self . direction in [ \"left\" , \"right\" ]: return ( start [ 0 ], start [ 1 ] + move ) else : raise ValueError ( \"No direction defined!\" )","title":"move_in_level"},{"location":"api/tree_diagram/treediagram/#treegroup","text":"","title":"TreeGroup"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup","text":"Bases: Group This class defines a group within a TreeDiagram. When a set of NodeObjects share the same parent they're grouped together for auto positioning. Each level of a TreeDiagram is a set of groups. Source code in drawpyo/diagram_types/tree.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 class TreeGroup ( Group ): \"\"\"This class defines a group within a TreeDiagram. When a set of NodeObjects share the same parent they're grouped together for auto positioning. Each level of a TreeDiagram is a set of groups. \"\"\" def __init__ ( self , tree = None , parent_object = None , ** kwargs ): \"\"\"The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Args: tree (TreeDiagram, optional): The TreeDiagram that owns the group. Defaults to None. parent_object (NodeObject, optional): The parent object in the group. Defaults to None. \"\"\" super () . __init__ ( ** kwargs ) self . parent_object = parent_object self . tree = tree @property def parent_object ( self ): \"\"\"The object that defines the parent of the group. Returns: NodeObject \"\"\" return self . _parent_object @parent_object . setter def parent_object ( self , value ): if value is not None : self . add_object ( value ) self . _parent_object = value def center_parent ( self ): \"\"\"This function centers the parent_objects along the group and then offsets it by the level spacing. \"\"\" children_grp = TreeGroup ( tree = self . tree ) for obj in self . objects : if obj is not self . parent_object : children_grp . add_object ( obj ) pos = children_grp . center_position level_space = ( children_grp . size_of_level / 2 + self . tree . level_spacing + self . parent_object . size_of_level / 2 ) pos = self . tree . move_between_levels ( pos , - level_space ) self . parent_object . center_position = pos # I don't love that these are copy-pasted from NodeObject but the multiple # inheritance was too much of a pain to have TreeGroup inherit. @property def size_of_level ( self ): \"\"\"The height or the width of the level, depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . height elif self . tree . direction in [ \"left\" , \"right\" ]: return self . width @property def size_in_level ( self ): \"\"\"The size of the object within its level, either its width or height depending on tree orientation. Returns: int \"\"\" if self . tree is not None : if self . tree . direction in [ \"up\" , \"down\" ]: return self . width elif self . tree . direction in [ \"left\" , \"right\" ]: return self . height","title":"TreeGroup"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup.parent_object","text":"The object that defines the parent of the group. Returns: \u2013 NodeObject","title":"parent_object"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup.size_in_level","text":"The size of the object within its level, either its width or height depending on tree orientation. Returns: \u2013 int","title":"size_in_level"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup.size_of_level","text":"The height or the width of the level, depending on tree orientation. Returns: \u2013 int","title":"size_of_level"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup.__init__","text":"The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Parameters: tree ( TreeDiagram , default: None ) \u2013 The TreeDiagram that owns the group. Defaults to None. parent_object ( NodeObject , default: None ) \u2013 The parent object in the group. Defaults to None. Source code in drawpyo/diagram_types/tree.py 103 104 105 106 107 108 109 110 111 112 def __init__ ( self , tree = None , parent_object = None , ** kwargs ): \"\"\"The TreeGroup is instantiated with all the arguments of the Group. Additionally, the owning tree and the parent_object. Args: tree (TreeDiagram, optional): The TreeDiagram that owns the group. Defaults to None. parent_object (NodeObject, optional): The parent object in the group. Defaults to None. \"\"\" super () . __init__ ( ** kwargs ) self . parent_object = parent_object self . tree = tree","title":"__init__"},{"location":"api/tree_diagram/treediagram/#drawpyo.diagram_types.tree.TreeGroup.center_parent","text":"This function centers the parent_objects along the group and then offsets it by the level spacing. Source code in drawpyo/diagram_types/tree.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def center_parent ( self ): \"\"\"This function centers the parent_objects along the group and then offsets it by the level spacing. \"\"\" children_grp = TreeGroup ( tree = self . tree ) for obj in self . objects : if obj is not self . parent_object : children_grp . add_object ( obj ) pos = children_grp . center_position level_space = ( children_grp . size_of_level / 2 + self . tree . level_spacing + self . parent_object . size_of_level / 2 ) pos = self . tree . move_between_levels ( pos , - level_space ) self . parent_object . center_position = pos","title":"center_parent"},{"location":"diagram_types/tree_diagrams/","text":"Tree Diagrams These very useful diagram types are why drawpyo was written initially! The TreeDiagram module allows the easy creation of heirarchical directed trees, managing the parent and children relationships, then providing a convenient auto layout function. Create a Tree The two main objects to work with in drawpyo's trees are TreeDiagrams and NodeObjects. To start, create a TreeDiagram: import drawpyo.diagram_types import TreeDiagram tree = TreeDiagram( file_path = 'path/to/tree', file_name = 'Tree Name.drawio', ) There are a number of configuration parameters available to fine tune the layout of the TreeDiagram. They can be passed in during initialization or later. Parameter Effect Default direction direction that the tree grows from the root ('up', 'down', 'left', 'right') 'down' link_style Connection style of the edges ('orthogonal', 'straight', 'curved') 'orthogonal' level_spacing Spacing in pixels between levels 60 item_spacing Spacing in pixels between groups within a level 15 padding Spacing in pixels between objects within a group 10 Add Nodes The custom object type that defines the nodes on the tree are called NodeObjects. Create some NodeObjects: from drawpyo.diagram_types import NodeObject # Top object grinders = NodeObject(tree=tree, value=\"Appliances for Grinding Coffee\", base_style=\"rounded rectangle\") # Main categories blade_grinders = NodeObject(tree=tree, value=\"Blade Grinders\", parent=grinders) burr_grinders = NodeObject(tree=tree, value=\"Burr Grinders\", parent=grinders) blunt_objects = NodeObject(tree=tree, value=\"Blunt Objects\", parent=grinders) Note that the base_style was manually declared for the first object. But NodeObjects will default to \"rounded rectangle\" so it's not necessary for every one. Any NodeObject can be a parent, so you can keep adding objects down the tree: # Other elec_blade = NodeObject(tree=tree, value=\"Electric Blade Grinder\", parent=blade_grinders) mnp = NodeObject(tree=tree, value=\"Mortar and Pestle\", parent=blunt_objects) # Conical Burrs conical = NodeObject(tree=tree, value=\"Conical Burrs\", parent=burr_grinders) elec_conical = NodeObject(tree=tree, value=\"Electric\", parent=conical) manual_conical = NodeObject(tree=tree, value=\"Manual\", parent=conical) Important Note: TreeDiagrams do not currently support NodeObjects with multiple parents! It may not ever as this seriously complicates the auto layout process. However, you can add links between any two objects in the tree and render them in the diagram. They just may look ugly until you manually rearrange the diagram. Finally, before writing the diagram you'll want to run the magic penultimate step: auto layout. tree.auto_layout() tree.write()","title":"Tree Diagrams"},{"location":"diagram_types/tree_diagrams/#tree-diagrams","text":"These very useful diagram types are why drawpyo was written initially! The TreeDiagram module allows the easy creation of heirarchical directed trees, managing the parent and children relationships, then providing a convenient auto layout function.","title":"Tree Diagrams"},{"location":"diagram_types/tree_diagrams/#create-a-tree","text":"The two main objects to work with in drawpyo's trees are TreeDiagrams and NodeObjects. To start, create a TreeDiagram: import drawpyo.diagram_types import TreeDiagram tree = TreeDiagram( file_path = 'path/to/tree', file_name = 'Tree Name.drawio', ) There are a number of configuration parameters available to fine tune the layout of the TreeDiagram. They can be passed in during initialization or later. Parameter Effect Default direction direction that the tree grows from the root ('up', 'down', 'left', 'right') 'down' link_style Connection style of the edges ('orthogonal', 'straight', 'curved') 'orthogonal' level_spacing Spacing in pixels between levels 60 item_spacing Spacing in pixels between groups within a level 15 padding Spacing in pixels between objects within a group 10","title":"Create a Tree"},{"location":"diagram_types/tree_diagrams/#add-nodes","text":"The custom object type that defines the nodes on the tree are called NodeObjects. Create some NodeObjects: from drawpyo.diagram_types import NodeObject # Top object grinders = NodeObject(tree=tree, value=\"Appliances for Grinding Coffee\", base_style=\"rounded rectangle\") # Main categories blade_grinders = NodeObject(tree=tree, value=\"Blade Grinders\", parent=grinders) burr_grinders = NodeObject(tree=tree, value=\"Burr Grinders\", parent=grinders) blunt_objects = NodeObject(tree=tree, value=\"Blunt Objects\", parent=grinders) Note that the base_style was manually declared for the first object. But NodeObjects will default to \"rounded rectangle\" so it's not necessary for every one. Any NodeObject can be a parent, so you can keep adding objects down the tree: # Other elec_blade = NodeObject(tree=tree, value=\"Electric Blade Grinder\", parent=blade_grinders) mnp = NodeObject(tree=tree, value=\"Mortar and Pestle\", parent=blunt_objects) # Conical Burrs conical = NodeObject(tree=tree, value=\"Conical Burrs\", parent=burr_grinders) elec_conical = NodeObject(tree=tree, value=\"Electric\", parent=conical) manual_conical = NodeObject(tree=tree, value=\"Manual\", parent=conical) Important Note: TreeDiagrams do not currently support NodeObjects with multiple parents! It may not ever as this seriously complicates the auto layout process. However, you can add links between any two objects in the tree and render them in the diagram. They just may look ugly until you manually rearrange the diagram. Finally, before writing the diagram you'll want to run the magic penultimate step: auto layout. tree.auto_layout() tree.write()","title":"Add Nodes"},{"location":"usage/basic_usage/","text":"Basic Functionality Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. Files Make a new file A File object represents a Draw.io file. If no file_path is set the default path will be 'user/Drawpyo Charts' where 'user' will be an OS-specific user home folder. diagram = drawpyo.File() file.file_path = r\"C:\\drawpyo\" file.file_name = \"Test Generated Edges.drawio\" Write a file Files can be written simply with the write() function. This function takes a few parameters to make it more flexible: | Parameter | Setting | | - | - | | file_path | This will overwrite the previously set file_path. | | file_name | This will overwrite the previously set file_name. Like file_path, useful in creating multiple copies of a diagram with slight variations | | overwrite | This boolean parameter controls whether an existing diagram should be overwritten or not. | Pages Add a page The Page object represents the different diagram pages that you can create in Draw.io. A Page can be created without linking it to a File but it won't be writable without a File object. # Add a page page = drawpy.Page(file=file) Page Parameters There are a number of customizable parameter for pages: argument description width Width of the document in pixels height Height of the document in pixels grid Enable grid (0 or 1) grid_size Side of grid squares in pixels guides Enable guides (0 or 1) tooltips Enable tooltips (0 or 1) scale Scale of the drawing","title":"Usage"},{"location":"usage/basic_usage/#basic-functionality","text":"Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app.","title":"Basic Functionality"},{"location":"usage/basic_usage/#files","text":"","title":"Files"},{"location":"usage/basic_usage/#make-a-new-file","text":"A File object represents a Draw.io file. If no file_path is set the default path will be 'user/Drawpyo Charts' where 'user' will be an OS-specific user home folder. diagram = drawpyo.File() file.file_path = r\"C:\\drawpyo\" file.file_name = \"Test Generated Edges.drawio\"","title":"Make a new file"},{"location":"usage/basic_usage/#write-a-file","text":"Files can be written simply with the write() function. This function takes a few parameters to make it more flexible: | Parameter | Setting | | - | - | | file_path | This will overwrite the previously set file_path. | | file_name | This will overwrite the previously set file_name. Like file_path, useful in creating multiple copies of a diagram with slight variations | | overwrite | This boolean parameter controls whether an existing diagram should be overwritten or not. |","title":"Write a file"},{"location":"usage/basic_usage/#pages","text":"","title":"Pages"},{"location":"usage/basic_usage/#add-a-page","text":"The Page object represents the different diagram pages that you can create in Draw.io. A Page can be created without linking it to a File but it won't be writable without a File object. # Add a page page = drawpy.Page(file=file)","title":"Add a page"},{"location":"usage/basic_usage/#page-parameters","text":"There are a number of customizable parameter for pages: argument description width Width of the document in pixels height Height of the document in pixels grid Enable grid (0 or 1) grid_size Side of grid squares in pixels guides Enable guides (0 or 1) tooltips Enable tooltips (0 or 1) scale Scale of the drawing","title":"Page Parameters"},{"location":"usage/edges/","text":"Edges Edges are the lines and arrows that connect objects in Draw.io. There's quite a bit of variabiability in how they're created and styled so there's a bit more complexity than with objects. Creating a basic edge Like objects, there's a Edge object that can be easily created: link = drawpyo.diagram.Edge( page=page, source=item_1, target=item_2, ) Edge Geometry Besides the source and target, the edge geometry can be very finely tuned. There are eight parameters that control where and how the edge meets the source and target objects: Parameter Definition entryX From where along the X axis on the source object the edge originates (0-1) entryY From where along the Y axis on the source object the edge originates (0-1) entryDx Applies an offset in pixels to the X axis entry point entryDy Applies an offset in pixels to the Y axis entry point exitX From where along the X axis on the target object the edge originates (0-1) exitY From where along the Y axis on the target object the edge originates (0-1) exitDx Applies an offset in pixels to the X axis exit point exitDy Applies an offset in pixels to the Y axis exit point If these parameters are set to None then the Draw.io rendering engine will place the origination and direction of the edge wherever makes the most sense based on the layout of the objects. This is the same as the behavior in the app when an edge is dragged to the center of a shape (highlighting the whole object green) instead of to a specific node on the border (and seeing just that node highlighted in green). Other attributes for controlling the general shape of the object are: Parameter Definition rounded Sets whether the corners of a line are set to sharp or rounded off (0-1) jettySize Defines the length of the straight line coming out of or into an object before the edge makes its first turn Styling edges Just about every edge styling option from the Draw.io app is implemented in Drawpyo. It's easiest to just play with all of the different line styling options in Draw.io to understand how they render but the major options are listed here. Waypoints The waypoint parameter controls how the line is routed from the source to the target. For example, a straight line is just point to point. A curved line tries to maintain gentle curves and perpendicularity to the source and target objects. Options are: Parameter Rendered straight orthogonal vertical horizontal isometric isometric_vertical curved entity_relation Connections The connection parameter is abstractly named but it controls what type of edge this is. Most edges are lines but other types are available. Parameter Rendered line link arrow simple_arrow Patterns The pattern parameter controls how the line stroke is rendered. Options are: Parameter Rendered solid dashed_small dashed_medium dashed_large dotted_small dotted_medium dotted_large Line Ends The line_end_target and line_end_source parameter sets whatever is rendered where the edge meets the objects. There are secondary boolean parameters for the fill of the ends ( endFill_target and endFill_source ) but not all ends can be filled. Parameter Rendered Unfilled Rendered Filled classic classicThin open na openThin na openAsync na block blockThin async oval diamond diamondThin dash na halfCircle na cross na circlePlus na circle na baseDash na ERone na ERmandOne na ERmany na ERoneToMany na ERzeroToOne na ERzeroToMany na doubleBlock","title":"Edges"},{"location":"usage/edges/#edges","text":"Edges are the lines and arrows that connect objects in Draw.io. There's quite a bit of variabiability in how they're created and styled so there's a bit more complexity than with objects.","title":"Edges"},{"location":"usage/edges/#creating-a-basic-edge","text":"Like objects, there's a Edge object that can be easily created: link = drawpyo.diagram.Edge( page=page, source=item_1, target=item_2, )","title":"Creating a basic edge"},{"location":"usage/edges/#edge-geometry","text":"Besides the source and target, the edge geometry can be very finely tuned. There are eight parameters that control where and how the edge meets the source and target objects: Parameter Definition entryX From where along the X axis on the source object the edge originates (0-1) entryY From where along the Y axis on the source object the edge originates (0-1) entryDx Applies an offset in pixels to the X axis entry point entryDy Applies an offset in pixels to the Y axis entry point exitX From where along the X axis on the target object the edge originates (0-1) exitY From where along the Y axis on the target object the edge originates (0-1) exitDx Applies an offset in pixels to the X axis exit point exitDy Applies an offset in pixels to the Y axis exit point If these parameters are set to None then the Draw.io rendering engine will place the origination and direction of the edge wherever makes the most sense based on the layout of the objects. This is the same as the behavior in the app when an edge is dragged to the center of a shape (highlighting the whole object green) instead of to a specific node on the border (and seeing just that node highlighted in green). Other attributes for controlling the general shape of the object are: Parameter Definition rounded Sets whether the corners of a line are set to sharp or rounded off (0-1) jettySize Defines the length of the straight line coming out of or into an object before the edge makes its first turn","title":"Edge Geometry"},{"location":"usage/edges/#styling-edges","text":"Just about every edge styling option from the Draw.io app is implemented in Drawpyo. It's easiest to just play with all of the different line styling options in Draw.io to understand how they render but the major options are listed here.","title":"Styling edges"},{"location":"usage/edges/#waypoints","text":"The waypoint parameter controls how the line is routed from the source to the target. For example, a straight line is just point to point. A curved line tries to maintain gentle curves and perpendicularity to the source and target objects. Options are: Parameter Rendered straight orthogonal vertical horizontal isometric isometric_vertical curved entity_relation","title":"Waypoints"},{"location":"usage/edges/#connections","text":"The connection parameter is abstractly named but it controls what type of edge this is. Most edges are lines but other types are available. Parameter Rendered line link arrow simple_arrow","title":"Connections"},{"location":"usage/edges/#patterns","text":"The pattern parameter controls how the line stroke is rendered. Options are: Parameter Rendered solid dashed_small dashed_medium dashed_large dotted_small dotted_medium dotted_large","title":"Patterns"},{"location":"usage/edges/#line-ends","text":"The line_end_target and line_end_source parameter sets whatever is rendered where the edge meets the objects. There are secondary boolean parameters for the fill of the ends ( endFill_target and endFill_source ) but not all ends can be filled. Parameter Rendered Unfilled Rendered Filled classic classicThin open na openThin na openAsync na block blockThin async oval diamond diamondThin dash na halfCircle na cross na circlePlus na circle na baseDash na ERone na ERmandOne na ERmany na ERoneToMany na ERzeroToOne na ERzeroToMany na doubleBlock","title":"Line Ends"},{"location":"usage/objects/","text":"Objects Though some diagram types have their own object subclasses, the main class for creating objects is the Object class. Creating a basic object base_obj = drawpyo.diagram.Object(page=page) The default object type is a rounded corner rectangle with white background and a black border just like in the Draw.io app. The value attribute holds the text to display in the object. base_obj.value = \"This Object's Name is Fred\" Creating an object from a shape library Just like the built-in shape libraries in the Draw.io app, Drawpyo supports generating shapes from libraries. Currently the 'general' library from the Draw.io app is defined but more will be added in the future. These libraries are defined in TOML files and drawpyo supports importing custom shape libraries! See [Shape Libraries][/usage/shape_libs.md] for more information. To generate an object from a library: object = drawpyo.diagram.object_from_library( library=\"general\", obj_name=\"process\", page=page, ) This function returns a normal Object but prestyled by the library. It can then be further styled or modified. Object Geometry All objects contain a structure called ObjectGeometry that provides a layer of abstraction. Interacting directly with the geometry class is optional. Object Sizing The three parameters that affect object placement are size and aspect. Size can be set with a tuple containing the width then height. Object.size = (120, 80) Object.aspect = 'fixed' The size attribute is an abstraction of the ObjectGeometry object, so the width and height can also be accessed directly. Object.geometry.height = 80 Object.geometry.width = 120 Object Geometry and Placement Repositioning objects is simple but there are a few convenience features to know about. There are two attributes available for setting the position by either the top left corner or the center: Object.position = (0, 0) Object.center_position = (0, 0) As with the size, the X and Y positions can be accessed directly in the geometry object. Object.geometry.x = 0 Object.geometry.y = 0 Styling Objects There are infinite permutations of object formatting and styling available. There are some higher order attributes that set the template for the object. What lower order styling attributes may or may not apply in combination. Then there are attributes like size and text formatting that apply in all cases. These interactions are difficult to predict in drawpyo alone so a good way to get familiar with all of the possible options and types of customizations is just to play with the Draw.io app directly to design formatting to your taste. Almost all styling attributes are optional (and drawpyo adds the non-optional ones automatically). If an attribute is unset or set to None then it won't be included in the file output. This will set that specific styling behavior to a default mode. BaseStyle and Shape The highest order styling attribute in Draw.io for objects is shape . This sets how the object behaves and is rendered. Different values include: parallelogram shape process hexagon document cylinder3 internalStorage cube step tape trapezoid note card callout dataStorage and many more. Confusingly there is another attribute called baseStyle that is sometimes used in combination with shape and sometimes without. BaseStyles include: text ellipse rhombus triangle swimlane It can be hard to predict how these two attributes will interact. To utilize them it's recommended to start in the Draw.io app, use their shape libraries or templates to get the desired style, then look at the style string to see what shape and baseStyle were used. When creating an object from a shape library these two attributes are handled automatically. Basic Styling Attributes These attributes mostly apply to most shape/baseStyle combinations and can be set on almost any object. rounded fillColor strokeColor opacity whiteSpace glass shadow comic line_pattern Further Styling Attributes As mentioned above, not all of these attributes will apply to all object shapes and types. But some commonly called include: darkOpacity darkOpacity2 backgroundOutline perimeter Text Styling Attributes The text set in the value attribute of the Object class can also be styled with the expected text formatting tools. fontColor fontFamily fontSize align verticalAlign labelPosition labelBackgroundColor labelBorderColor textOpacity Due to complexities with the actual combination of styling strings used by Draw.io, there are some more that are abstracted by drawpyo to make them easy to work with: text_direction bold_font italic_font underline_font Attribute Data Type fontColor str (Hex Code: '#ffffff') fontFamily str (see Draw.io for available fonts) fontSize int (size in pts) align str ('left', 'center', or 'right') verticalAlign str ('top', 'middle', 'bottom') labelPosition str ('left', 'center', or 'right') verticalLabelPosition str ('top', 'middle', 'bottom') labelBackgroundColor str (Hex Code: '#ffffff') labelBorderColor str (Hex Code: '#ffffff') textOpacity int (0-100) text_direction bold_font bool italic_font bool underline_font bool","title":"Objects"},{"location":"usage/objects/#objects","text":"Though some diagram types have their own object subclasses, the main class for creating objects is the Object class.","title":"Objects"},{"location":"usage/objects/#creating-a-basic-object","text":"base_obj = drawpyo.diagram.Object(page=page) The default object type is a rounded corner rectangle with white background and a black border just like in the Draw.io app. The value attribute holds the text to display in the object. base_obj.value = \"This Object's Name is Fred\"","title":"Creating a basic object"},{"location":"usage/objects/#creating-an-object-from-a-shape-library","text":"Just like the built-in shape libraries in the Draw.io app, Drawpyo supports generating shapes from libraries. Currently the 'general' library from the Draw.io app is defined but more will be added in the future. These libraries are defined in TOML files and drawpyo supports importing custom shape libraries! See [Shape Libraries][/usage/shape_libs.md] for more information. To generate an object from a library: object = drawpyo.diagram.object_from_library( library=\"general\", obj_name=\"process\", page=page, ) This function returns a normal Object but prestyled by the library. It can then be further styled or modified.","title":"Creating an object from a shape library"},{"location":"usage/objects/#object-geometry","text":"All objects contain a structure called ObjectGeometry that provides a layer of abstraction. Interacting directly with the geometry class is optional.","title":"Object Geometry"},{"location":"usage/objects/#object-sizing","text":"The three parameters that affect object placement are size and aspect. Size can be set with a tuple containing the width then height. Object.size = (120, 80) Object.aspect = 'fixed' The size attribute is an abstraction of the ObjectGeometry object, so the width and height can also be accessed directly. Object.geometry.height = 80 Object.geometry.width = 120","title":"Object Sizing"},{"location":"usage/objects/#object-geometry-and-placement","text":"Repositioning objects is simple but there are a few convenience features to know about. There are two attributes available for setting the position by either the top left corner or the center: Object.position = (0, 0) Object.center_position = (0, 0) As with the size, the X and Y positions can be accessed directly in the geometry object. Object.geometry.x = 0 Object.geometry.y = 0","title":"Object Geometry and Placement"},{"location":"usage/objects/#styling-objects","text":"There are infinite permutations of object formatting and styling available. There are some higher order attributes that set the template for the object. What lower order styling attributes may or may not apply in combination. Then there are attributes like size and text formatting that apply in all cases. These interactions are difficult to predict in drawpyo alone so a good way to get familiar with all of the possible options and types of customizations is just to play with the Draw.io app directly to design formatting to your taste. Almost all styling attributes are optional (and drawpyo adds the non-optional ones automatically). If an attribute is unset or set to None then it won't be included in the file output. This will set that specific styling behavior to a default mode.","title":"Styling Objects"},{"location":"usage/objects/#basestyle-and-shape","text":"The highest order styling attribute in Draw.io for objects is shape . This sets how the object behaves and is rendered. Different values include: parallelogram shape process hexagon document cylinder3 internalStorage cube step tape trapezoid note card callout dataStorage and many more. Confusingly there is another attribute called baseStyle that is sometimes used in combination with shape and sometimes without. BaseStyles include: text ellipse rhombus triangle swimlane It can be hard to predict how these two attributes will interact. To utilize them it's recommended to start in the Draw.io app, use their shape libraries or templates to get the desired style, then look at the style string to see what shape and baseStyle were used. When creating an object from a shape library these two attributes are handled automatically.","title":"BaseStyle and Shape"},{"location":"usage/objects/#basic-styling-attributes","text":"These attributes mostly apply to most shape/baseStyle combinations and can be set on almost any object. rounded fillColor strokeColor opacity whiteSpace glass shadow comic line_pattern","title":"Basic Styling Attributes"},{"location":"usage/objects/#further-styling-attributes","text":"As mentioned above, not all of these attributes will apply to all object shapes and types. But some commonly called include: darkOpacity darkOpacity2 backgroundOutline perimeter","title":"Further Styling Attributes"},{"location":"usage/objects/#text-styling-attributes","text":"The text set in the value attribute of the Object class can also be styled with the expected text formatting tools. fontColor fontFamily fontSize align verticalAlign labelPosition labelBackgroundColor labelBorderColor textOpacity Due to complexities with the actual combination of styling strings used by Draw.io, there are some more that are abstracted by drawpyo to make them easy to work with: text_direction bold_font italic_font underline_font Attribute Data Type fontColor str (Hex Code: '#ffffff') fontFamily str (see Draw.io for available fonts) fontSize int (size in pts) align str ('left', 'center', or 'right') verticalAlign str ('top', 'middle', 'bottom') labelPosition str ('left', 'center', or 'right') verticalLabelPosition str ('top', 'middle', 'bottom') labelBackgroundColor str (Hex Code: '#ffffff') labelBorderColor str (Hex Code: '#ffffff') textOpacity int (0-100) text_direction bold_font bool italic_font bool underline_font bool","title":"Text Styling Attributes"},{"location":"usage/shape_libs/","text":"Shape Libraries The Draw.io app has a lot of built-in shape libraries available. The basic library contains shapes and building blocks but there are increasingly more specific libraries such as flowcharts, wiring diagrams, and org charts. You can also export and import shape libraries into Draw.io. To replicate this feature for drawpyo, I created a library format based on TOML. Draw.io's libraries are XML which isn't as human readable or writable and is more specification than necessary. Supporting Draw.io's XML based library is a planned feature. Built-In Shape Libaries Drawpyo uses these TOML shape libraries to store the default libaries. Currently the only library that ships with drawpyo is the general library but more will come. The default libraries are in /drawpyo/shape_libraries. There is also a set of TOML databases for other formats, like all of the various combinations of edge styles and the line styles. These are stored in /drawpyo/formatting_database. Custom Shape Libaries This functionality is available to the user so you can define your own custom libraries! TOML was selected because it's a very simple and human-readable config file format. the TOML project website has a very nice high level overview. But drawpyo is hardly scratching the surface of what TOML is capable of so little expertise is needed. Creating a Shape Library To define a shape library create a .toml file. Current convention is to start with a title tag for clarity. title = \"Custom drawpyo shapes\" You can then define a custom object by naming the object in square brackets and adding whichever attributes you want: [square] size = [80, 80] aspect = \"fixed\" You can also have any shape inherit another and then either modify or extend its style: [perfect_circle] inherit = \"square\" baseStyle = \"ellipse\" This perfect_circle will now inherit the fixed aspect and size attributes from square but with the ellipse baseStyle. Style Attribute Types The attributes in the TOML file can come from three sets: Drawpyo attributes (snake_case) These are the attributes that drawpyo uses to abstract some complicated style strings, such as size instead of the Draw.io parameters of width and height . Predefined style attributes Such as any of the attributes listed in the Styling section of Objects . These will simply be overwritten with the values in the TOML file. Any new style attributes If you want to add a rare style attribute that drawpyo hasn't defined or worked with yet, no worries! When you import the TOML library if there are new style attributes defined then they'll get added to the Object and exported into the Draw.io file. Using a Custom Library To use a custom shape library it just needs to be imported then passed to the object definition function: custom_library = drawpyo.diagram.import_shape_database( file_name=r\"path/to/toml_lib\" ) new_obj = drawpyo.diagram.object_from_library( library = custom_library, obj_name = 'object_name_from_lib', page=page, )","title":"Shape Libraries"},{"location":"usage/shape_libs/#shape-libraries","text":"The Draw.io app has a lot of built-in shape libraries available. The basic library contains shapes and building blocks but there are increasingly more specific libraries such as flowcharts, wiring diagrams, and org charts. You can also export and import shape libraries into Draw.io. To replicate this feature for drawpyo, I created a library format based on TOML. Draw.io's libraries are XML which isn't as human readable or writable and is more specification than necessary. Supporting Draw.io's XML based library is a planned feature.","title":"Shape Libraries"},{"location":"usage/shape_libs/#built-in-shape-libaries","text":"Drawpyo uses these TOML shape libraries to store the default libaries. Currently the only library that ships with drawpyo is the general library but more will come. The default libraries are in /drawpyo/shape_libraries. There is also a set of TOML databases for other formats, like all of the various combinations of edge styles and the line styles. These are stored in /drawpyo/formatting_database.","title":"Built-In Shape Libaries"},{"location":"usage/shape_libs/#custom-shape-libaries","text":"This functionality is available to the user so you can define your own custom libraries! TOML was selected because it's a very simple and human-readable config file format. the TOML project website has a very nice high level overview. But drawpyo is hardly scratching the surface of what TOML is capable of so little expertise is needed.","title":"Custom Shape Libaries"},{"location":"usage/shape_libs/#creating-a-shape-library","text":"To define a shape library create a .toml file. Current convention is to start with a title tag for clarity. title = \"Custom drawpyo shapes\" You can then define a custom object by naming the object in square brackets and adding whichever attributes you want: [square] size = [80, 80] aspect = \"fixed\" You can also have any shape inherit another and then either modify or extend its style: [perfect_circle] inherit = \"square\" baseStyle = \"ellipse\" This perfect_circle will now inherit the fixed aspect and size attributes from square but with the ellipse baseStyle.","title":"Creating a Shape Library"},{"location":"usage/shape_libs/#style-attribute-types","text":"The attributes in the TOML file can come from three sets:","title":"Style Attribute Types"},{"location":"usage/shape_libs/#drawpyo-attributes-snake_case","text":"These are the attributes that drawpyo uses to abstract some complicated style strings, such as size instead of the Draw.io parameters of width and height .","title":"Drawpyo attributes (snake_case)"},{"location":"usage/shape_libs/#predefined-style-attributes","text":"Such as any of the attributes listed in the Styling section of Objects . These will simply be overwritten with the values in the TOML file.","title":"Predefined style attributes"},{"location":"usage/shape_libs/#any-new-style-attributes","text":"If you want to add a rare style attribute that drawpyo hasn't defined or worked with yet, no worries! When you import the TOML library if there are new style attributes defined then they'll get added to the Object and exported into the Draw.io file.","title":"Any new style attributes"},{"location":"usage/shape_libs/#using-a-custom-library","text":"To use a custom shape library it just needs to be imported then passed to the object definition function: custom_library = drawpyo.diagram.import_shape_database( file_name=r\"path/to/toml_lib\" ) new_obj = drawpyo.diagram.object_from_library( library = custom_library, obj_name = 'object_name_from_lib', page=page, )","title":"Using a Custom Library"}]}