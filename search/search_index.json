{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to drawpyo Drawpyo is a Python library for programmatically generating Draw.io charts. It enables creating a diagram object, placing and styling objects, then writing the object to a file. History/Justification I love Draw.io! Compared to expensive and heavy commercial options like Visio and Miro, Draw.io's free and lightweight app allows wider and more universal distribution of diagrams. Because the files are stored in plaintext they can be versioned alongside code in a repository as documentation. Draw.io also maintains back compatibility and any diagram created in the app since it was launched can still be opened. The XML-based file format makes these diagrams semi-portable, and could easily be ported to other applications if Draw.io ever disappeared. For these reason, I think it's one of the best options for documentation diagrams. So wen I had a need to generate heirarchical tree diagrams of requirement structures I looked to Draw.io but I was surprised to find there wasn't even a single existing Python library for working with these files. I took the project home and spent a weekend building the initial functionality. I've been adding functionality, robustness, and documentation intermittently since. The Future of Drawpyo I will continue to tinker away with this tool, creating new functionality as I need it or find it interesting. But it's unfortunately a rather low priority so if anyone wants to contribute I would be grateful for the help! Reach out to me at xander@merriman.industries if you want to contribute.","title":"Home"},{"location":"#welcome-to-drawpyo","text":"Drawpyo is a Python library for programmatically generating Draw.io charts. It enables creating a diagram object, placing and styling objects, then writing the object to a file.","title":"Welcome to drawpyo"},{"location":"#historyjustification","text":"I love Draw.io! Compared to expensive and heavy commercial options like Visio and Miro, Draw.io's free and lightweight app allows wider and more universal distribution of diagrams. Because the files are stored in plaintext they can be versioned alongside code in a repository as documentation. Draw.io also maintains back compatibility and any diagram created in the app since it was launched can still be opened. The XML-based file format makes these diagrams semi-portable, and could easily be ported to other applications if Draw.io ever disappeared. For these reason, I think it's one of the best options for documentation diagrams. So wen I had a need to generate heirarchical tree diagrams of requirement structures I looked to Draw.io but I was surprised to find there wasn't even a single existing Python library for working with these files. I took the project home and spent a weekend building the initial functionality. I've been adding functionality, robustness, and documentation intermittently since.","title":"History/Justification"},{"location":"#the-future-of-drawpyo","text":"I will continue to tinker away with this tool, creating new functionality as I need it or find it interesting. But it's unfortunately a rather low priority so if anyone wants to contribute I would be grateful for the help! Reach out to me at xander@merriman.industries if you want to contribute.","title":"The Future of Drawpyo"},{"location":"about/","text":"Conventions and Naming This library contains quite a lot of camel case (capitalizeEachWord) attributes. While the Python convention is snake case (underscores_between_lowercase) the Draw.io style strings and attributes are camel case. Wherever possible, drawpyo uses the terminology and variable names from Draw.io to make it more intuitive to work between the two apps. However, any attribute that does not have an analogy in the Draw.io app is snake case. While this is a bit confusing I hope it helps to clarify when there's a direct analog between drawpyo and Draw.io and when the variable is a drawpyo abstraction. If this is confusing please share that feedback on the GitHub page or email and it may be changed in future versions! Basic Diagrams Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. See the full documentation for these functions in Basic Diagrams - Usage . Extended Functionality Drawpyo extends the basic functionality of the Draw.io app with custom diagram types. These custom diagrams have automated styling and layouting to make common or complex diagrams easier to generate. TreeDiagram This diagram makes creating directed tree graphs easy. Define trees, nodes, and the apply an auto layout. Documentation","title":"About"},{"location":"about/#conventions-and-naming","text":"This library contains quite a lot of camel case (capitalizeEachWord) attributes. While the Python convention is snake case (underscores_between_lowercase) the Draw.io style strings and attributes are camel case. Wherever possible, drawpyo uses the terminology and variable names from Draw.io to make it more intuitive to work between the two apps. However, any attribute that does not have an analogy in the Draw.io app is snake case. While this is a bit confusing I hope it helps to clarify when there's a direct analog between drawpyo and Draw.io and when the variable is a drawpyo abstraction. If this is confusing please share that feedback on the GitHub page or email and it may be changed in future versions!","title":"Conventions and Naming"},{"location":"about/#basic-diagrams","text":"Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. See the full documentation for these functions in Basic Diagrams - Usage .","title":"Basic Diagrams"},{"location":"about/#extended-functionality","text":"Drawpyo extends the basic functionality of the Draw.io app with custom diagram types. These custom diagrams have automated styling and layouting to make common or complex diagrams easier to generate.","title":"Extended Functionality"},{"location":"about/#treediagram","text":"This diagram makes creating directed tree graphs easy. Define trees, nodes, and the apply an auto layout. Documentation","title":"TreeDiagram"},{"location":"diagram_types/tree_diagrams/","text":"Tree Diagrams These very useful diagram types are why drawpyo was written initially! The TreeDiagram module allows the easy creation of heirarchical directed trees, managing the parent and children relationships, then providing a convenient auto layout function. Create a Tree The two main objects to work with in drawpyo's trees are TreeDiagrams and LeafObjects. To start, create a TreeDiagram: import drawpyo.diagram_types import TreeDiagram tree = TreeDiagram( file_path = 'path/to/tree', file_name = 'Tree Name.drawio', ) There are a number of configuration parameters available to fine tune the layout of the TreeDiagram. They can be passed in during initialization or later. Parameter Effect Default direction direction that the tree grows from the root ('up', 'down', 'left', 'right') 'down' link_style Connection style of the edges ('orthogonal', 'straight', 'curved') 'orthogonal' level_spacing Spacing in pixels between levels 60 item_spacing Spacing in pixels between groups within a level 15 padding Spacing in pixels between objects within a group 10 Add Nodes The custom object type that defines the nodes on the tree are called LeafObjects. Create some LeafObjects: from drawpyo.diagram_types import LeafObject # Top object grinders = LeafObject(tree=tree, value=\"Appliances for Grinding Coffee\", base_style=\"rounded rectangle\") # Main categories blade_grinders = LeafObject(tree=tree, value=\"Blade Grinders\", trunk=grinders) burr_grinders = LeafObject(tree=tree, value=\"Burr Grinders\", trunk=grinders) blunt_objects = LeafObject(tree=tree, value=\"Blunt Objects\", trunk=grinders) Note that the base_style was manually declared for the first object. But LeafObjects will default to \"rounded rectangle\" so it's not necessary for every one. Any LeafObject can be a parent, so you can keep adding objects down the tree: # Other elec_blade = LeafObject(tree=tree, value=\"Electric Blade Grinder\", trunk=blade_grinders) mnp = LeafObject(tree=tree, value=\"Mortar and Pestle\", trunk=blunt_objects) # Conical Burrs conical = LeafObject(tree=tree, value=\"Conical Burrs\", trunk=burr_grinders) elec_conical = LeafObject(tree=tree, value=\"Electric\", trunk=conical) manual_conical = LeafObject(tree=tree, value=\"Manual\", trunk=conical) Important Note: TreeDiagrams do not currently support LeafObjects with multiple parents! It may not ever as this seriously complicates the auto layout process. However, you can add links between any two objects in the tree and render them in the diagram. They just may look ugly until you manually rearrange the diagram. Finally, before writing the diagram you'll want to run the magic penultimate step: auto layout. tree.auto_layout() tree.write()","title":"Tree Diagrams"},{"location":"diagram_types/tree_diagrams/#tree-diagrams","text":"These very useful diagram types are why drawpyo was written initially! The TreeDiagram module allows the easy creation of heirarchical directed trees, managing the parent and children relationships, then providing a convenient auto layout function.","title":"Tree Diagrams"},{"location":"diagram_types/tree_diagrams/#create-a-tree","text":"The two main objects to work with in drawpyo's trees are TreeDiagrams and LeafObjects. To start, create a TreeDiagram: import drawpyo.diagram_types import TreeDiagram tree = TreeDiagram( file_path = 'path/to/tree', file_name = 'Tree Name.drawio', ) There are a number of configuration parameters available to fine tune the layout of the TreeDiagram. They can be passed in during initialization or later. Parameter Effect Default direction direction that the tree grows from the root ('up', 'down', 'left', 'right') 'down' link_style Connection style of the edges ('orthogonal', 'straight', 'curved') 'orthogonal' level_spacing Spacing in pixels between levels 60 item_spacing Spacing in pixels between groups within a level 15 padding Spacing in pixels between objects within a group 10","title":"Create a Tree"},{"location":"diagram_types/tree_diagrams/#add-nodes","text":"The custom object type that defines the nodes on the tree are called LeafObjects. Create some LeafObjects: from drawpyo.diagram_types import LeafObject # Top object grinders = LeafObject(tree=tree, value=\"Appliances for Grinding Coffee\", base_style=\"rounded rectangle\") # Main categories blade_grinders = LeafObject(tree=tree, value=\"Blade Grinders\", trunk=grinders) burr_grinders = LeafObject(tree=tree, value=\"Burr Grinders\", trunk=grinders) blunt_objects = LeafObject(tree=tree, value=\"Blunt Objects\", trunk=grinders) Note that the base_style was manually declared for the first object. But LeafObjects will default to \"rounded rectangle\" so it's not necessary for every one. Any LeafObject can be a parent, so you can keep adding objects down the tree: # Other elec_blade = LeafObject(tree=tree, value=\"Electric Blade Grinder\", trunk=blade_grinders) mnp = LeafObject(tree=tree, value=\"Mortar and Pestle\", trunk=blunt_objects) # Conical Burrs conical = LeafObject(tree=tree, value=\"Conical Burrs\", trunk=burr_grinders) elec_conical = LeafObject(tree=tree, value=\"Electric\", trunk=conical) manual_conical = LeafObject(tree=tree, value=\"Manual\", trunk=conical) Important Note: TreeDiagrams do not currently support LeafObjects with multiple parents! It may not ever as this seriously complicates the auto layout process. However, you can add links between any two objects in the tree and render them in the diagram. They just may look ugly until you manually rearrange the diagram. Finally, before writing the diagram you'll want to run the magic penultimate step: auto layout. tree.auto_layout() tree.write()","title":"Add Nodes"},{"location":"usage/basic_usage/","text":"Basic Functionality Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app. Files Make a new file A File object represents a Draw.io file. If no file_path is set the default path will be 'user/Drawpyo Charts' where 'user' will be an OS-specific user home folder. diagram = drawpyo.File() file.file_path = r\"C:\\drawpyo\" file.file_name = \"Test Generated Edges.drawio\" Write a file Files can be written simply with the write() function. This function takes a few parameters to make it more flexible: | Parameter | Setting | | - | - | | file_path | This will overwrite the previously set file_path. | | file_name | This will overwrite the previously set file_name. Like file_path, useful in creating multiple copies of a diagram with slight variations | | overwrite | This boolean parameter controls whether an existing diagram should be overwritten or not. | Pages Add a page The Page object represents the different diagram pages that you can create in Draw.io. A Page can be created without linking it to a File but it won't be writable without a File object. # Add a page page = drawpy.Page(file=file) Page Parameters There are a number of customizable parameter for pages: argument description width Width of the document in pixels height Height of the document in pixels grid Enable grid (0 or 1) grid_size Side of grid squares in pixels guides Enable guides (0 or 1) tooltips Enable tooltips (0 or 1) scale Scale of the drawing","title":"Usage"},{"location":"usage/basic_usage/#basic-functionality","text":"Drawpyo's basic functionality provides the same features as using the Draw.io app. You can create files with one or more pages, add objects to them, and position those objects. You can style objects from built-in shape libraries, manually, or from style strings. Those objects can be shapes, containers, or edges to connect them. Finally you can save your diagrams where they can be opened with the Draw.io app.","title":"Basic Functionality"},{"location":"usage/basic_usage/#files","text":"","title":"Files"},{"location":"usage/basic_usage/#make-a-new-file","text":"A File object represents a Draw.io file. If no file_path is set the default path will be 'user/Drawpyo Charts' where 'user' will be an OS-specific user home folder. diagram = drawpyo.File() file.file_path = r\"C:\\drawpyo\" file.file_name = \"Test Generated Edges.drawio\"","title":"Make a new file"},{"location":"usage/basic_usage/#write-a-file","text":"Files can be written simply with the write() function. This function takes a few parameters to make it more flexible: | Parameter | Setting | | - | - | | file_path | This will overwrite the previously set file_path. | | file_name | This will overwrite the previously set file_name. Like file_path, useful in creating multiple copies of a diagram with slight variations | | overwrite | This boolean parameter controls whether an existing diagram should be overwritten or not. |","title":"Write a file"},{"location":"usage/basic_usage/#pages","text":"","title":"Pages"},{"location":"usage/basic_usage/#add-a-page","text":"The Page object represents the different diagram pages that you can create in Draw.io. A Page can be created without linking it to a File but it won't be writable without a File object. # Add a page page = drawpy.Page(file=file)","title":"Add a page"},{"location":"usage/basic_usage/#page-parameters","text":"There are a number of customizable parameter for pages: argument description width Width of the document in pixels height Height of the document in pixels grid Enable grid (0 or 1) grid_size Side of grid squares in pixels guides Enable guides (0 or 1) tooltips Enable tooltips (0 or 1) scale Scale of the drawing","title":"Page Parameters"},{"location":"usage/edges/","text":"Edges Edges are the lines and arrows that connect objects in Draw.io. There's quite a bit of variabiability in how they're created and styled so there's a bit more complexity than with objects. Creating a basic edge Like objects, there's a BasicEdge object that can be easily created: link = drawpyo.diagram.BasicEdge( page=page, source=item_1, target=item_2, ) Edge Geometry Besides the source and target, the edge geometry can be very finely tuned. There are eight parameters that control where and how the edge meets the source and target objects: Parameter Definition entryX From where along the X axis on the source object the edge originates (0-1) entryY From where along the Y axis on the source object the edge originates (0-1) entryDx Applies an offset in pixels to the X axis entry point entryDy Applies an offset in pixels to the Y axis entry point exitX From where along the X axis on the target object the edge originates (0-1) exitY From where along the Y axis on the target object the edge originates (0-1) exitDx Applies an offset in pixels to the X axis exit point exitDy Applies an offset in pixels to the Y axis exit point If these parameters are set to None then the Draw.io rendering engine will place the origination and direction of the edge wherever makes the most sense based on the layout of the objects. This is the same as the behavior in the app when an edge is dragged to the center of a shape (highlighting the whole object green) instead of to a specific node on the border (and seeing just that node highlighted in green). Other attributes for controlling the general shape of the object are: Parameter Definition rounded Sets whether the corners of a line are set to sharp or rounded off (0-1) jettySize Defines the length of the straight line coming out of or into an object before the edge makes its first turn Styling edges Just about every edge styling option from the Draw.io app is implemented in Drawpyo. It's easiest to just play with all of the different line styling options in Draw.io to understand how they render but the major options are listed here. Waypoints The waypoint parameter controls how the line is routed from the source to the target. For example, a straight line is just point to point. A curved line tries to maintain gentle curves and perpendicularity to the source and target objects. Options are: Parameter Rendered straight orthogonal vertical horizontal isometric isometric_vertical curved entity_relation Connections The connection parameter is abstractly named but it controls what type of edge this is. Most edges are lines but other types are available. Parameter Rendered line link arrow simple_arrow Patterns The pattern parameter controls how the line stroke is rendered. Options are: Parameter Rendered solid dashed_small dashed_medium dashed_large dotted_small dotted_medium dotted_large Line Ends The line_end_target and line_end_source parameter sets whatever is rendered where the edge meets the objects. There are secondary boolean parameters for the fill of the ends ( endFill_target and endFill_source ) but not all ends can be filled. Parameter Rendered Unfilled Rendered Filled classic classicThin open na openThin na openAsync na block blockThin async oval diamond diamondThin dash na halfCircle na cross na circlePlus na circle na baseDash na ERone na ERmandOne na ERmany na ERoneToMany na ERzeroToOne na ERzeroToMany na doubleBlock","title":"Edges"},{"location":"usage/edges/#edges","text":"Edges are the lines and arrows that connect objects in Draw.io. There's quite a bit of variabiability in how they're created and styled so there's a bit more complexity than with objects.","title":"Edges"},{"location":"usage/edges/#creating-a-basic-edge","text":"Like objects, there's a BasicEdge object that can be easily created: link = drawpyo.diagram.BasicEdge( page=page, source=item_1, target=item_2, )","title":"Creating a basic edge"},{"location":"usage/edges/#edge-geometry","text":"Besides the source and target, the edge geometry can be very finely tuned. There are eight parameters that control where and how the edge meets the source and target objects: Parameter Definition entryX From where along the X axis on the source object the edge originates (0-1) entryY From where along the Y axis on the source object the edge originates (0-1) entryDx Applies an offset in pixels to the X axis entry point entryDy Applies an offset in pixels to the Y axis entry point exitX From where along the X axis on the target object the edge originates (0-1) exitY From where along the Y axis on the target object the edge originates (0-1) exitDx Applies an offset in pixels to the X axis exit point exitDy Applies an offset in pixels to the Y axis exit point If these parameters are set to None then the Draw.io rendering engine will place the origination and direction of the edge wherever makes the most sense based on the layout of the objects. This is the same as the behavior in the app when an edge is dragged to the center of a shape (highlighting the whole object green) instead of to a specific node on the border (and seeing just that node highlighted in green). Other attributes for controlling the general shape of the object are: Parameter Definition rounded Sets whether the corners of a line are set to sharp or rounded off (0-1) jettySize Defines the length of the straight line coming out of or into an object before the edge makes its first turn","title":"Edge Geometry"},{"location":"usage/edges/#styling-edges","text":"Just about every edge styling option from the Draw.io app is implemented in Drawpyo. It's easiest to just play with all of the different line styling options in Draw.io to understand how they render but the major options are listed here.","title":"Styling edges"},{"location":"usage/edges/#waypoints","text":"The waypoint parameter controls how the line is routed from the source to the target. For example, a straight line is just point to point. A curved line tries to maintain gentle curves and perpendicularity to the source and target objects. Options are: Parameter Rendered straight orthogonal vertical horizontal isometric isometric_vertical curved entity_relation","title":"Waypoints"},{"location":"usage/edges/#connections","text":"The connection parameter is abstractly named but it controls what type of edge this is. Most edges are lines but other types are available. Parameter Rendered line link arrow simple_arrow","title":"Connections"},{"location":"usage/edges/#patterns","text":"The pattern parameter controls how the line stroke is rendered. Options are: Parameter Rendered solid dashed_small dashed_medium dashed_large dotted_small dotted_medium dotted_large","title":"Patterns"},{"location":"usage/edges/#line-ends","text":"The line_end_target and line_end_source parameter sets whatever is rendered where the edge meets the objects. There are secondary boolean parameters for the fill of the ends ( endFill_target and endFill_source ) but not all ends can be filled. Parameter Rendered Unfilled Rendered Filled classic classicThin open na openThin na openAsync na block blockThin async oval diamond diamondThin dash na halfCircle na cross na circlePlus na circle na baseDash na ERone na ERmandOne na ERmany na ERoneToMany na ERzeroToOne na ERzeroToMany na doubleBlock","title":"Line Ends"},{"location":"usage/objects/","text":"Objects Though some diagram types have their own object subclasses, the main class for creating objects is the BasicObject class. Creating a basic object base_obj = drawpyo.diagram.BasicObject(page=page) The default object type is a rounded corner rectangle with white background and a black border just like in the Draw.io app. The value attribute holds the text to display in the object. base_obj.value = \"This Object's Name is Fred\" Creating an object from a shape library Just like the built-in shape libraries in the Draw.io app, Drawpyo supports generating shapes from libraries. Currently the 'general' library from the Draw.io app is defined but more will be added in the future. These libraries are defined in TOML files and drawpyo supports importing custom shape libraries! See [Shape Libraries][/usage/shape_libs.md] for more information. To generate an object from a library: object = drawpyo.diagram.object_from_library( library=\"general\", obj_name=\"process\", page=page, ) This function returns a normal BasicObject but prestyled by the library. It can then be further styled or modified. Object Geometry All objects contain a structure called ObjectGeometry that provides a layer of abstraction. Interacting directly with the geometry class is optional. Object Sizing The three parameters that affect object placement are size and aspect. Size can be set with a tuple containing the width then height. BasicObject.size = (120, 80) BasicObject.aspect = 'fixed' The size attribute is an abstraction of the ObjectGeometry object, so the width and height can also be accessed directly. BasicObject.geometry.height = 80 BasicObject.geometry.width = 120 Object Geometry and Placement Repositioning objects is simple but there are a few convenience features to know about. There are two attributes available for setting the position by either the top left corner or the center: BasicObject.position = (0, 0) BasicObject.center_position = (0, 0) As with the size, the X and Y positions can be accessed directly in the geometry object. BasicObject.geometry.x = 0 BasicObject.geometry.y = 0 Styling Objects There are infinite permutations of object formatting and styling available. There are some higher order attributes that set the template for the object. What lower order styling attributes may or may not apply in combination. Then there are attributes like size and text formatting that apply in all cases. These interactions are difficult to predict in drawpyo alone so a good way to get familiar with all of the possible options and types of customizations is just to play with the Draw.io app directly to design formatting to your taste. Almost all styling attributes are optional (and drawpyo adds the non-optional ones automatically). If an attribute is unset or set to None then it won't be included in the file output. This will set that specific styling behavior to a default mode. BaseStyle and Shape The highest order styling attribute in Draw.io for objects is shape . This sets how the object behaves and is rendered. Different values include: parallelogram shape process hexagon document cylinder3 internalStorage cube step tape trapezoid note card callout dataStorage and many more. Confusingly there is another attribute called baseStyle that is sometimes used in combination with shape and sometimes without. BaseStyles include: text ellipse rhombus triangle swimlane It can be hard to predict how these two attributes will interact. To utilize them it's recommended to start in the Draw.io app, use their shape libraries or templates to get the desired style, then look at the style string to see what shape and baseStyle were used. When creating an object from a shape library these two attributes are handled automatically. Basic Styling Attributes These attributes mostly apply to most shape/baseStyle combinations and can be set on almost any object. rounded fillColor strokeColor opacity whiteSpace glass shadow comic linePattern Further Styling Attributes As mentioned above, not all of these attributes will apply to all object shapes and types. But some commonly called include: darkOpacity darkOpacity2 backgroundOutline perimeter Text Styling Attributes The text set in the value attribute of the BasicObject class can also be styled with the expected text formatting tools. fontColor fontFamily fontSize align verticalAlign labelPosition labelBackgroundColor labelBorderColor textOpacity Due to complexities with the actual combination of styling strings used by Draw.io, there are some more that are abstracted by drawpyo to make them easy to work with: text_direction bold_font italic_font underline_font Attribute Data Type fontColor str (Hex Code: '#ffffff') fontFamily str (see Draw.io for available fonts) fontSize int (size in pts) align str ('left', 'center', or 'right') verticalAlign str ('top', 'middle', 'bottom') labelPosition str ('left', 'center', or 'right') verticalLabelPosition str ('top', 'middle', 'bottom') labelBackgroundColor str (Hex Code: '#ffffff') labelBorderColor str (Hex Code: '#ffffff') textOpacity int (0-100) text_direction bold_font bool italic_font bool underline_font bool","title":"Objects"},{"location":"usage/objects/#objects","text":"Though some diagram types have their own object subclasses, the main class for creating objects is the BasicObject class.","title":"Objects"},{"location":"usage/objects/#creating-a-basic-object","text":"base_obj = drawpyo.diagram.BasicObject(page=page) The default object type is a rounded corner rectangle with white background and a black border just like in the Draw.io app. The value attribute holds the text to display in the object. base_obj.value = \"This Object's Name is Fred\"","title":"Creating a basic object"},{"location":"usage/objects/#creating-an-object-from-a-shape-library","text":"Just like the built-in shape libraries in the Draw.io app, Drawpyo supports generating shapes from libraries. Currently the 'general' library from the Draw.io app is defined but more will be added in the future. These libraries are defined in TOML files and drawpyo supports importing custom shape libraries! See [Shape Libraries][/usage/shape_libs.md] for more information. To generate an object from a library: object = drawpyo.diagram.object_from_library( library=\"general\", obj_name=\"process\", page=page, ) This function returns a normal BasicObject but prestyled by the library. It can then be further styled or modified.","title":"Creating an object from a shape library"},{"location":"usage/objects/#object-geometry","text":"All objects contain a structure called ObjectGeometry that provides a layer of abstraction. Interacting directly with the geometry class is optional.","title":"Object Geometry"},{"location":"usage/objects/#object-sizing","text":"The three parameters that affect object placement are size and aspect. Size can be set with a tuple containing the width then height. BasicObject.size = (120, 80) BasicObject.aspect = 'fixed' The size attribute is an abstraction of the ObjectGeometry object, so the width and height can also be accessed directly. BasicObject.geometry.height = 80 BasicObject.geometry.width = 120","title":"Object Sizing"},{"location":"usage/objects/#object-geometry-and-placement","text":"Repositioning objects is simple but there are a few convenience features to know about. There are two attributes available for setting the position by either the top left corner or the center: BasicObject.position = (0, 0) BasicObject.center_position = (0, 0) As with the size, the X and Y positions can be accessed directly in the geometry object. BasicObject.geometry.x = 0 BasicObject.geometry.y = 0","title":"Object Geometry and Placement"},{"location":"usage/objects/#styling-objects","text":"There are infinite permutations of object formatting and styling available. There are some higher order attributes that set the template for the object. What lower order styling attributes may or may not apply in combination. Then there are attributes like size and text formatting that apply in all cases. These interactions are difficult to predict in drawpyo alone so a good way to get familiar with all of the possible options and types of customizations is just to play with the Draw.io app directly to design formatting to your taste. Almost all styling attributes are optional (and drawpyo adds the non-optional ones automatically). If an attribute is unset or set to None then it won't be included in the file output. This will set that specific styling behavior to a default mode.","title":"Styling Objects"},{"location":"usage/objects/#basestyle-and-shape","text":"The highest order styling attribute in Draw.io for objects is shape . This sets how the object behaves and is rendered. Different values include: parallelogram shape process hexagon document cylinder3 internalStorage cube step tape trapezoid note card callout dataStorage and many more. Confusingly there is another attribute called baseStyle that is sometimes used in combination with shape and sometimes without. BaseStyles include: text ellipse rhombus triangle swimlane It can be hard to predict how these two attributes will interact. To utilize them it's recommended to start in the Draw.io app, use their shape libraries or templates to get the desired style, then look at the style string to see what shape and baseStyle were used. When creating an object from a shape library these two attributes are handled automatically.","title":"BaseStyle and Shape"},{"location":"usage/objects/#basic-styling-attributes","text":"These attributes mostly apply to most shape/baseStyle combinations and can be set on almost any object. rounded fillColor strokeColor opacity whiteSpace glass shadow comic linePattern","title":"Basic Styling Attributes"},{"location":"usage/objects/#further-styling-attributes","text":"As mentioned above, not all of these attributes will apply to all object shapes and types. But some commonly called include: darkOpacity darkOpacity2 backgroundOutline perimeter","title":"Further Styling Attributes"},{"location":"usage/objects/#text-styling-attributes","text":"The text set in the value attribute of the BasicObject class can also be styled with the expected text formatting tools. fontColor fontFamily fontSize align verticalAlign labelPosition labelBackgroundColor labelBorderColor textOpacity Due to complexities with the actual combination of styling strings used by Draw.io, there are some more that are abstracted by drawpyo to make them easy to work with: text_direction bold_font italic_font underline_font Attribute Data Type fontColor str (Hex Code: '#ffffff') fontFamily str (see Draw.io for available fonts) fontSize int (size in pts) align str ('left', 'center', or 'right') verticalAlign str ('top', 'middle', 'bottom') labelPosition str ('left', 'center', or 'right') verticalLabelPosition str ('top', 'middle', 'bottom') labelBackgroundColor str (Hex Code: '#ffffff') labelBorderColor str (Hex Code: '#ffffff') textOpacity int (0-100) text_direction bold_font bool italic_font bool underline_font bool","title":"Text Styling Attributes"},{"location":"usage/shape_libs/","text":"Shape Libraries The Draw.io app has a lot of built-in shape libraries available. The basic library contains shapes and building blocks but there are increasingly more specific libraries such as flowcharts, wiring diagrams, and org charts. You can also export and import shape libraries into Draw.io. To replicate this feature for drawpyo, I created a library format based on TOML. Draw.io's libraries are XML which isn't as human readable or writable and is more specification than necessary. Supporting Draw.io's XML based library is a planned feature. Built-In Shape Libaries Drawpyo uses these TOML shape libraries to store the default libaries. Currently the only library that ships with drawpyo is the general library but more will come. The default libraries are in /drawpyo/shape_libraries. There is also a set of TOML databases for other formats, like all of the various combinations of edge styles and the line styles. These are stored in /drawpyo/formatting_database. Custom Shape Libaries This functionality is available to the user so you can define your own custom libraries! TOML was selected because it's a very simple and human-readable config file format. the TOML project website has a very nice high level overview. But drawpyo is hardly scratching the surface of what TOML is capable of so little expertise is needed. Creating a Shape Library To define a shape library create a .toml file. Current convention is to start with a title tag for clarity. title = \"Custom drawpyo shapes\" You can then define a custom object by naming the object in square brackets and adding whichever attributes you want: [square] size = [80, 80] aspect = \"fixed\" You can also have any shape inherit another and then either modify or extend its style: [perfect_circle] inherit = \"square\" baseStyle = \"ellipse\" This perfect_circle will now inherit the fixed aspect and size attributes from square but with the ellipse baseStyle. Style Attribute Types The attributes in the TOML file can come from three sets: Drawpyo attributes (snake_case) These are the attributes that drawpyo uses to abstract some complicated style strings, such as size instead of the Draw.io parameters of width and height . Predefined style attributes Such as any of the attributes listed in the Styling section of Objects . These will simply be overwritten with the values in the TOML file. Any new style attributes If you want to add a rare style attribute that drawpyo hasn't defined or worked with yet, no worries! When you import the TOML library if there are new style attributes defined then they'll get added to the BasicObject and exported into the Draw.io file. Using a Custom Library To use a custom shape library it just needs to be imported then passed to the object definition function: custom_library = drawpyo.diagram.import_shape_database( file_name=r\"path/to/toml_lib\" ) new_obj = drawpyo.diagram.object_from_library( library = custom_library, obj_name = 'object_name_from_lib', page=page, )","title":"Shape Libraries"},{"location":"usage/shape_libs/#shape-libraries","text":"The Draw.io app has a lot of built-in shape libraries available. The basic library contains shapes and building blocks but there are increasingly more specific libraries such as flowcharts, wiring diagrams, and org charts. You can also export and import shape libraries into Draw.io. To replicate this feature for drawpyo, I created a library format based on TOML. Draw.io's libraries are XML which isn't as human readable or writable and is more specification than necessary. Supporting Draw.io's XML based library is a planned feature.","title":"Shape Libraries"},{"location":"usage/shape_libs/#built-in-shape-libaries","text":"Drawpyo uses these TOML shape libraries to store the default libaries. Currently the only library that ships with drawpyo is the general library but more will come. The default libraries are in /drawpyo/shape_libraries. There is also a set of TOML databases for other formats, like all of the various combinations of edge styles and the line styles. These are stored in /drawpyo/formatting_database.","title":"Built-In Shape Libaries"},{"location":"usage/shape_libs/#custom-shape-libaries","text":"This functionality is available to the user so you can define your own custom libraries! TOML was selected because it's a very simple and human-readable config file format. the TOML project website has a very nice high level overview. But drawpyo is hardly scratching the surface of what TOML is capable of so little expertise is needed.","title":"Custom Shape Libaries"},{"location":"usage/shape_libs/#creating-a-shape-library","text":"To define a shape library create a .toml file. Current convention is to start with a title tag for clarity. title = \"Custom drawpyo shapes\" You can then define a custom object by naming the object in square brackets and adding whichever attributes you want: [square] size = [80, 80] aspect = \"fixed\" You can also have any shape inherit another and then either modify or extend its style: [perfect_circle] inherit = \"square\" baseStyle = \"ellipse\" This perfect_circle will now inherit the fixed aspect and size attributes from square but with the ellipse baseStyle.","title":"Creating a Shape Library"},{"location":"usage/shape_libs/#style-attribute-types","text":"The attributes in the TOML file can come from three sets:","title":"Style Attribute Types"},{"location":"usage/shape_libs/#drawpyo-attributes-snake_case","text":"These are the attributes that drawpyo uses to abstract some complicated style strings, such as size instead of the Draw.io parameters of width and height .","title":"Drawpyo attributes (snake_case)"},{"location":"usage/shape_libs/#predefined-style-attributes","text":"Such as any of the attributes listed in the Styling section of Objects . These will simply be overwritten with the values in the TOML file.","title":"Predefined style attributes"},{"location":"usage/shape_libs/#any-new-style-attributes","text":"If you want to add a rare style attribute that drawpyo hasn't defined or worked with yet, no worries! When you import the TOML library if there are new style attributes defined then they'll get added to the BasicObject and exported into the Draw.io file.","title":"Any new style attributes"},{"location":"usage/shape_libs/#using-a-custom-library","text":"To use a custom shape library it just needs to be imported then passed to the object definition function: custom_library = drawpyo.diagram.import_shape_database( file_name=r\"path/to/toml_lib\" ) new_obj = drawpyo.diagram.object_from_library( library = custom_library, obj_name = 'object_name_from_lib', page=page, )","title":"Using a Custom Library"}]}